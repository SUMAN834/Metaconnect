{"ast":null,"code":"import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-eec23f27.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-e41b240b.browser.esm.js';\nimport { T as TW_WC_PROJECT_ID } from '../../../../dist/wc-c6a6a61c.browser.esm.js';\nimport { g as getInjectedRainbowProvider } from '../../../../dist/getInjectedRainbowProvider-33485100.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/sdk';\nimport '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nclass RainbowWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Rainbow Wallet\";\n  }\n  constructor(options) {\n    super(RainbowWallet.id, options);\n    this.isInjected = !!getInjectedRainbowProvider();\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // if rainbow is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the rainbow app on mobile via QR code scan\n\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          RainbowConnector\n        } = await import('../../../connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js');\n        const rainbowConnector = new RainbowConnector({\n          chains: this.chains,\n          connectorStorage: this.walletStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.rainbowConnector = rainbowConnector;\n        this.connector = new WagmiAdapter(rainbowConnector);\n      } else {\n        const {\n          WalletConnectConnector\n        } = await import('../../../connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js');\n        const walletConnectConnector = new WalletConnectConnector({\n          chains: this.chains,\n          options: {\n            projectId: this.options?.projectId || TW_WC_PROJECT_ID,\n            // TODO,\n            storage: this.walletStorage,\n            qrcode: this.options?.qrcode,\n            dappMetadata: this.dappMetadata,\n            qrModalOptions: this.options?.qrModalOptions\n          }\n        });\n        walletConnectConnector.getProvider().then(provider => {\n          provider.signer.client.on(\"session_request_sent\", () => {\n            this.emit(\"wc_session_request_sent\");\n          });\n        });\n\n        // need to save this for getting the QR code URI\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n    return this.connector;\n  }\n\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * rainbow.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n    const wcProvider = await wcConnector.getProvider();\n\n    // set a listener for display_uri event\n    wcProvider.on(\"display_uri\", uri => {\n      options.onQrCodeUri(uri);\n    });\n\n    // trigger connect flow\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n}\n_defineProperty(RainbowWallet, \"meta\", {\n  name: \"Rainbow Wallet\",\n  iconURL: \"ipfs://QmSZn47p4DVVBfzvg9BAX2EqwnPxkT1YAE7rUnrtd9CybQ/rainbow-logo.png\",\n  urls: {\n    chrome: \"https://chrome.google.com/webstore/detail/rainbow/opfgelmcmbiajamepnmloijbpoleiama\",\n    android: \"https://rnbwapp.com/e/Va41HWS6Oxb\",\n    ios: \"https://rnbwapp.com/e/OeMdmkJ6Oxb\"\n  }\n});\n_defineProperty(RainbowWallet, \"id\", walletIds.rainbow);\nexport { RainbowWallet };","map":{"version":3,"names":["_","_defineProperty","W","WagmiAdapter","a","AbstractClientWallet","w","walletIds","T","TW_WC_PROJECT_ID","g","getInjectedRainbowProvider","RainbowWallet","walletName","constructor","options","id","isInjected","getConnector","connector","RainbowConnector","rainbowConnector","chains","connectorStorage","walletStorage","shimDisconnect","WalletConnectConnector","walletConnectConnector","projectId","storage","qrcode","dappMetadata","qrModalOptions","getProvider","then","provider","signer","client","on","emit","connectWithQrCode","wcConnector","Error","wcProvider","uri","onQrCodeUri","connect","chainId","onConnected","name","iconURL","urls","chrome","android","ios","rainbow"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-eec23f27.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-e41b240b.browser.esm.js';\nimport { T as TW_WC_PROJECT_ID } from '../../../../dist/wc-c6a6a61c.browser.esm.js';\nimport { g as getInjectedRainbowProvider } from '../../../../dist/getInjectedRainbowProvider-33485100.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/sdk';\nimport '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\n\nclass RainbowWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Rainbow Wallet\";\n  }\n  constructor(options) {\n    super(RainbowWallet.id, options);\n    this.isInjected = !!getInjectedRainbowProvider();\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // if rainbow is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the rainbow app on mobile via QR code scan\n\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          RainbowConnector\n        } = await import('../../../connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js');\n        const rainbowConnector = new RainbowConnector({\n          chains: this.chains,\n          connectorStorage: this.walletStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.rainbowConnector = rainbowConnector;\n        this.connector = new WagmiAdapter(rainbowConnector);\n      } else {\n        const {\n          WalletConnectConnector\n        } = await import('../../../connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js');\n        const walletConnectConnector = new WalletConnectConnector({\n          chains: this.chains,\n          options: {\n            projectId: this.options?.projectId || TW_WC_PROJECT_ID,\n            // TODO,\n            storage: this.walletStorage,\n            qrcode: this.options?.qrcode,\n            dappMetadata: this.dappMetadata,\n            qrModalOptions: this.options?.qrModalOptions\n          }\n        });\n        walletConnectConnector.getProvider().then(provider => {\n          provider.signer.client.on(\"session_request_sent\", () => {\n            this.emit(\"wc_session_request_sent\");\n          });\n        });\n\n        // need to save this for getting the QR code URI\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n    return this.connector;\n  }\n\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * rainbow.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n    const wcProvider = await wcConnector.getProvider();\n\n    // set a listener for display_uri event\n    wcProvider.on(\"display_uri\", uri => {\n      options.onQrCodeUri(uri);\n    });\n\n    // trigger connect flow\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n}\n_defineProperty(RainbowWallet, \"meta\", {\n  name: \"Rainbow Wallet\",\n  iconURL: \"ipfs://QmSZn47p4DVVBfzvg9BAX2EqwnPxkT1YAE7rUnrtd9CybQ/rainbow-logo.png\",\n  urls: {\n    chrome: \"https://chrome.google.com/webstore/detail/rainbow/opfgelmcmbiajamepnmloijbpoleiama\",\n    android: \"https://rnbwapp.com/e/Va41HWS6Oxb\",\n    ios: \"https://rnbwapp.com/e/OeMdmkJ6Oxb\"\n  }\n});\n_defineProperty(RainbowWallet, \"id\", walletIds.rainbow);\n\nexport { RainbowWallet };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}