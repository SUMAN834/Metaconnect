{"ast":null,"code":"var _a, _b, _c, _d, _e;\nimport { $getLoadedMaterial, $variantIndices } from '../material.js';\nimport { $correlatedObjects } from '../three-dom-element.js';\nconst $materials = Symbol('materials');\nconst $variantToMaterialMap = Symbol('variantToMaterialMap');\nconst $modelVariants = Symbol('modelVariants');\nconst $mesh = Symbol('mesh');\nexport const $primitives = Symbol('primitives');\nexport const $loadVariant = Symbol('loadVariant');\nexport const $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nexport const $switchVariant = Symbol('switchVariant');\nexport const $children = Symbol('children');\nexport const $initialMaterialIdx = Symbol('initialMaterialIdx');\nexport const $activeMaterialIdx = Symbol('activeMaterialIdx');\n// Defines the base level node methods and data.\nexport class Node {\n  constructor(name) {\n    this.name = '';\n    this[_a] = new Array();\n    this.name = name;\n  }\n}\n_a = $children;\n// Represents a primitive in a glTF mesh.\nexport class PrimitiveNode extends Node {\n  constructor(mesh, mvMaterials, modelVariants, correlatedSceneGraph) {\n    super(mesh.name);\n    // Maps glTF material index number to a material that this primitive supports.\n    this[_b] = new Map();\n    // Maps variant index to material.\n    this[_c] = new Map();\n    this[_d] = 0;\n    this[_e] = 0;\n    this[$mesh] = mesh;\n    const {\n      gltf,\n      threeGLTF,\n      threeObjectMap\n    } = correlatedSceneGraph;\n    this[$modelVariants] = modelVariants;\n    this.mesh.userData.variantData = modelVariants;\n    // Captures the primitive's initial material.\n    const materialMappings = threeObjectMap.get(mesh.material);\n    if (materialMappings.materials != null) {\n      this[$initialMaterialIdx] = this[$activeMaterialIdx] = materialMappings.materials;\n    } else {\n      console.error(`Primitive (${mesh.name}) missing initial material reference.`);\n    }\n    // Gets the mesh index from the node.\n    const associations = mesh.userData.associations || {};\n    if (associations.meshes == null) {\n      console.error('Mesh is missing primitive index association');\n      return;\n    }\n    // The gltf mesh array to sample from.\n    const meshElementArray = gltf['meshes'] || [];\n    // List of primitives under the mesh.\n    const gltfPrimitives = meshElementArray[associations.meshes].primitives || [];\n    const gltfPrimitive = gltfPrimitives[associations.primitives];\n    if (gltfPrimitive == null) {\n      console.error('Mesh primitive definition is missing.');\n      return;\n    }\n    // Maps the gltfPrimitive default to a material.\n    if (gltfPrimitive.material != null) {\n      this[$materials].set(gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n    } else {\n      const defaultIdx = mvMaterials.findIndex(mat => {\n        return mat.name === 'Default';\n      });\n      if (defaultIdx >= 0) {\n        this[$materials].set(defaultIdx, mvMaterials[defaultIdx]);\n      } else {\n        console.warn('gltfPrimitive has no material!');\n      }\n    }\n    if (gltfPrimitive.extensions && gltfPrimitive.extensions['KHR_materials_variants']) {\n      const variantsExtension = gltfPrimitive.extensions['KHR_materials_variants'];\n      const extensions = threeGLTF.parser.json.extensions;\n      const variantNames = extensions['KHR_materials_variants'].variants;\n      // Provides definition now that we know there are variants to\n      // support.\n      for (const mapping of variantsExtension.mappings) {\n        const mvMaterial = mvMaterials[mapping.material];\n        // Maps variant indices to Materials.\n        this[$materials].set(mapping.material, mvMaterial);\n        for (const variant of mapping.variants) {\n          const {\n            name\n          } = variantNames[variant];\n          this[$variantToMaterialMap].set(variant, mvMaterial);\n          // Provides variant info for material self lookup.\n          mvMaterial[$variantIndices]().add(variant);\n          // Updates the models variant data.\n          if (!modelVariants.has(name)) {\n            modelVariants.set(name, {\n              name,\n              index: variant\n            });\n          }\n        }\n      }\n    }\n  }\n  get mesh() {\n    return this[$mesh];\n  }\n  async setActiveMaterial(material) {\n    const mvMaterial = this[$materials].get(material);\n    if (mvMaterial != null) {\n      this.mesh.material = await mvMaterial[$getLoadedMaterial]();\n      this[$activeMaterialIdx] = material;\n    }\n    return this.mesh.material;\n  }\n  getActiveMaterial() {\n    return this[$materials].get(this[$activeMaterialIdx]);\n  }\n  getMaterial(index) {\n    return this[$materials].get(index);\n  }\n  async enableVariant(name) {\n    if (name == null) {\n      return this.setActiveMaterial(this[$initialMaterialIdx]);\n    }\n    if (this[$variantToMaterialMap] != null && this[$modelVariants].has(name)) {\n      const modelVariants = this[$modelVariants].get(name);\n      return this.enableVariantHelper(modelVariants.index);\n    }\n    return null;\n  }\n  async enableVariantHelper(index) {\n    if (this[$variantToMaterialMap] != null && index != null) {\n      const material = this[$variantToMaterialMap].get(index);\n      if (material != null) {\n        return this.setActiveMaterial(material.index);\n      }\n    }\n    return null;\n  }\n  async instantiateVariants() {\n    if (this[$variantToMaterialMap] == null) {\n      return;\n    }\n    for (const index of this[$variantToMaterialMap].keys()) {\n      const variantMaterial = this.mesh.userData.variantMaterials.get(index);\n      if (variantMaterial.material != null) {\n        continue;\n      }\n      const threeMaterial = await this.enableVariantHelper(index);\n      if (threeMaterial != null) {\n        variantMaterial.material = threeMaterial;\n      }\n    }\n  }\n  get variantInfo() {\n    return this[$variantToMaterialMap];\n  }\n  addVariant(materialVariant, variantName) {\n    if (!this.ensureVariantIsUnused(variantName)) {\n      return false;\n    }\n    // Adds the variant to the model variants if needed.\n    if (!this[$modelVariants].has(variantName)) {\n      this[$modelVariants].set(variantName, {\n        name: variantName,\n        index: this[$modelVariants].size\n      });\n    }\n    const modelVariantData = this[$modelVariants].get(variantName);\n    const variantIndex = modelVariantData.index;\n    // Updates materials mapped to the variant.\n    materialVariant[$variantIndices]().add(variantIndex);\n    // Updates internal mappings.\n    this[$variantToMaterialMap].set(variantIndex, materialVariant);\n    this[$materials].set(materialVariant.index, materialVariant);\n    this.updateVariantUserData(variantIndex, materialVariant);\n    return true;\n  }\n  deleteVariant(variantIndex) {\n    if (this.variantInfo.has(variantIndex)) {\n      this.variantInfo.delete(variantIndex);\n      const userDataMap = this.mesh.userData.variantMaterials;\n      if (userDataMap != null) {\n        userDataMap.delete(variantIndex);\n      }\n    }\n  }\n  updateVariantUserData(variantIndex, materialVariant) {\n    // Adds variants name to material variants set.\n    materialVariant[$variantIndices]().add(variantIndex);\n    this.mesh.userData.variantData = this[$modelVariants];\n    // Updates import data (see VariantMaterialLoaderPlugin.ts).\n    this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials || new Map();\n    const map = this.mesh.userData.variantMaterials;\n    map.set(variantIndex, {\n      material: materialVariant[$correlatedObjects].values().next().value,\n      gltfMaterialIndex: materialVariant.index\n    });\n  }\n  ensureVariantIsUnused(variantName) {\n    const modelVariants = this[$modelVariants].get(variantName);\n    if (modelVariants != null && this.variantInfo.has(modelVariants.index)) {\n      console.warn(`Primitive cannot add variant '${variantName}' for this material, it already exists.`);\n      return false;\n    }\n    return true;\n  }\n}\n_b = $materials, _c = $variantToMaterialMap, _d = $initialMaterialIdx, _e = $activeMaterialIdx;","map":{"version":3,"names":["$getLoadedMaterial","$variantIndices","$correlatedObjects","$materials","Symbol","$variantToMaterialMap","$modelVariants","$mesh","$primitives","$loadVariant","$prepareVariantsForExport","$switchVariant","$children","$initialMaterialIdx","$activeMaterialIdx","Node","constructor","name","_a","Array","PrimitiveNode","mesh","mvMaterials","modelVariants","correlatedSceneGraph","_b","Map","_c","_d","_e","gltf","threeGLTF","threeObjectMap","userData","variantData","materialMappings","get","material","materials","console","error","associations","meshes","meshElementArray","gltfPrimitives","primitives","gltfPrimitive","set","defaultIdx","findIndex","mat","warn","extensions","variantsExtension","parser","json","variantNames","variants","mapping","mappings","mvMaterial","variant","add","has","index","setActiveMaterial","getActiveMaterial","getMaterial","enableVariant","enableVariantHelper","instantiateVariants","keys","variantMaterial","variantMaterials","threeMaterial","variantInfo","addVariant","materialVariant","variantName","ensureVariantIsUnused","size","modelVariantData","variantIndex","updateVariantUserData","deleteVariant","delete","userDataMap","map","values","next","value","gltfMaterialIndex"],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@google\\model-viewer\\src\\features\\scene-graph\\nodes\\primitive-node.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Material as ThreeMaterial, Mesh} from 'three';\nimport {GLTFReference} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {CorrelatedSceneGraph} from '../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {KHRMaterialsVariants, Primitive} from '../../../three-components/gltf-instance/gltf-2.0.js';\nimport {UserDataVariantMapping} from '../../../three-components/gltf-instance/VariantMaterialLoaderPlugin.js';\nimport {$getLoadedMaterial, $variantIndices, Material} from '../material.js';\nimport {VariantData} from '../model.js';\nimport {$correlatedObjects} from '../three-dom-element.js';\n\n\n\nconst $materials = Symbol('materials');\nconst $variantToMaterialMap = Symbol('variantToMaterialMap');\nconst $modelVariants = Symbol('modelVariants');\nconst $mesh = Symbol('mesh');\nexport const $primitives = Symbol('primitives');\nexport const $loadVariant = Symbol('loadVariant');\nexport const $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nexport const $switchVariant = Symbol('switchVariant');\nexport const $children = Symbol('children');\nexport const $initialMaterialIdx = Symbol('initialMaterialIdx');\nexport const $activeMaterialIdx = Symbol('activeMaterialIdx');\n\n// Defines the base level node methods and data.\nexport class Node {\n  name: string = '';\n  [$children] = new Array<Node>();\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n// Represents a primitive in a glTF mesh.\nexport class PrimitiveNode extends Node {\n  private[$mesh]: Mesh;\n  // Maps glTF material index number to a material that this primitive supports.\n  [$materials] = new Map<number, Material>();\n  // Maps variant index to material.\n  private[$variantToMaterialMap] = new Map<number, Material>();\n  private[$initialMaterialIdx] = 0;\n  private[$activeMaterialIdx] = 0;\n  private[$modelVariants]: Map<string, VariantData>;\n\n  constructor(\n      mesh: Mesh, mvMaterials: Material[],\n      modelVariants: Map<string, VariantData>,\n      correlatedSceneGraph: CorrelatedSceneGraph) {\n    super(mesh.name);\n    this[$mesh] = mesh;\n    const {gltf, threeGLTF, threeObjectMap} = correlatedSceneGraph;\n    this[$modelVariants] = modelVariants;\n    this.mesh.userData.variantData = modelVariants;\n    // Captures the primitive's initial material.\n    const materialMappings =\n        threeObjectMap.get(mesh.material as ThreeMaterial)!;\n    if (materialMappings.materials != null) {\n      this[$initialMaterialIdx] = this[$activeMaterialIdx] =\n          materialMappings.materials;\n    } else {\n      console.error(\n          `Primitive (${mesh.name}) missing initial material reference.`);\n    }\n\n    // Gets the mesh index from the node.\n    const associations =\n        (mesh.userData.associations as GLTFReference & {primitives: number}) ||\n        {};\n\n    if (associations.meshes == null) {\n      console.error('Mesh is missing primitive index association');\n      return;\n    }\n    // The gltf mesh array to sample from.\n    const meshElementArray = gltf['meshes'] || [];\n    // List of primitives under the mesh.\n    const gltfPrimitives =\n        (meshElementArray[associations.meshes].primitives || []) as Primitive[];\n\n    const gltfPrimitive = gltfPrimitives[associations.primitives];\n    if (gltfPrimitive == null) {\n      console.error('Mesh primitive definition is missing.');\n      return;\n    }\n\n    // Maps the gltfPrimitive default to a material.\n    if (gltfPrimitive.material != null) {\n      this[$materials].set(\n          gltfPrimitive.material, mvMaterials[gltfPrimitive.material]);\n    } else {\n      const defaultIdx = mvMaterials.findIndex((mat: Material) => {\n        return mat.name === 'Default';\n      });\n      if (defaultIdx >= 0) {\n        this[$materials].set(defaultIdx, mvMaterials[defaultIdx]);\n      } else {\n        console.warn('gltfPrimitive has no material!');\n      }\n    }\n\n    if (gltfPrimitive.extensions &&\n        gltfPrimitive.extensions['KHR_materials_variants']) {\n      const variantsExtension =\n          gltfPrimitive.extensions['KHR_materials_variants'] as\n          KHRMaterialsVariants;\n      const extensions = threeGLTF.parser.json.extensions;\n      const variantNames = extensions['KHR_materials_variants'].variants;\n      // Provides definition now that we know there are variants to\n      // support.\n      for (const mapping of variantsExtension.mappings) {\n        const mvMaterial = mvMaterials[mapping.material];\n        // Maps variant indices to Materials.\n        this[$materials].set(mapping.material, mvMaterial);\n        for (const variant of mapping.variants) {\n          const {name} = variantNames[variant];\n          this[$variantToMaterialMap].set(variant, mvMaterial);\n          // Provides variant info for material self lookup.\n          mvMaterial[$variantIndices]().add(variant);\n          // Updates the models variant data.\n          if (!modelVariants.has(name)) {\n            modelVariants.set(name, {name, index: variant} as VariantData);\n          }\n        }\n      }\n    }\n  }\n\n  get mesh() {\n    return this[$mesh];\n  }\n\n  async setActiveMaterial(material: number): Promise<ThreeMaterial|null> {\n    const mvMaterial = this[$materials].get(material);\n    if (mvMaterial != null) {\n      this.mesh.material = await mvMaterial[$getLoadedMaterial]();\n      this[$activeMaterialIdx] = material;\n    }\n    return this.mesh.material as ThreeMaterial;\n  }\n\n  getActiveMaterial(): Material {\n    return this[$materials].get(this[$activeMaterialIdx])!;\n  }\n\n  getMaterial(index: number): Material|undefined {\n    return this[$materials].get(index);\n  }\n\n  async enableVariant(name: string|null): Promise<ThreeMaterial|null> {\n    if (name == null) {\n      return this.setActiveMaterial(this[$initialMaterialIdx]);\n    }\n    if (this[$variantToMaterialMap] != null && this[$modelVariants].has(name)) {\n      const modelVariants = this[$modelVariants].get(name)!;\n      return this.enableVariantHelper(modelVariants.index);\n    }\n    return null;\n  }\n\n  private async enableVariantHelper(index: number|\n                                    null): Promise<ThreeMaterial|null> {\n    if (this[$variantToMaterialMap] != null && index != null) {\n      const material = this[$variantToMaterialMap].get(index);\n      if (material != null) {\n        return this.setActiveMaterial(material.index);\n      }\n    }\n    return null;\n  }\n\n  async instantiateVariants() {\n    if (this[$variantToMaterialMap] == null) {\n      return;\n    }\n    for (const index of this[$variantToMaterialMap].keys()) {\n      const variantMaterial = this.mesh.userData.variantMaterials.get(index) as\n          UserDataVariantMapping;\n      if (variantMaterial.material != null) {\n        continue;\n      }\n      const threeMaterial = await this.enableVariantHelper(index);\n      if (threeMaterial != null) {\n        variantMaterial.material = threeMaterial;\n      }\n    }\n  }\n\n  get variantInfo() {\n    return this[$variantToMaterialMap];\n  }\n\n  addVariant(materialVariant: Material, variantName: string) {\n    if (!this.ensureVariantIsUnused(variantName)) {\n      return false;\n    }\n\n    // Adds the variant to the model variants if needed.\n    if (!this[$modelVariants].has(variantName)) {\n      this[$modelVariants].set(\n          variantName, {name: variantName, index: this[$modelVariants].size});\n    }\n    const modelVariantData = this[$modelVariants].get(variantName)!;\n    const variantIndex = modelVariantData.index;\n\n    // Updates materials mapped to the variant.\n    materialVariant[$variantIndices]().add(variantIndex);\n\n    // Updates internal mappings.\n    this[$variantToMaterialMap].set(variantIndex, materialVariant);\n    this[$materials].set(materialVariant.index, materialVariant);\n\n    this.updateVariantUserData(variantIndex, materialVariant);\n\n    return true;\n  }\n\n  deleteVariant(variantIndex: number) {\n    if (this.variantInfo.has(variantIndex)) {\n      this.variantInfo.delete(variantIndex);\n\n      const userDataMap = this.mesh.userData.variantMaterials! as\n          Map<number, UserDataVariantMapping>;\n      if (userDataMap != null) {\n        userDataMap.delete(variantIndex);\n      }\n    }\n  }\n\n  private updateVariantUserData(\n      variantIndex: number, materialVariant: Material) {\n    // Adds variants name to material variants set.\n    materialVariant[$variantIndices]().add(variantIndex);\n\n    this.mesh.userData.variantData = this[$modelVariants];\n    // Updates import data (see VariantMaterialLoaderPlugin.ts).\n    this.mesh.userData.variantMaterials = this.mesh.userData.variantMaterials ||\n        new Map<number, UserDataVariantMapping>();\n    const map = this.mesh.userData.variantMaterials! as\n        Map<number, UserDataVariantMapping>;\n    map.set(variantIndex, {\n      material: materialVariant[$correlatedObjects]!.values().next().value,\n      gltfMaterialIndex: materialVariant.index,\n    });\n  }\n\n  private ensureVariantIsUnused(variantName: string) {\n    const modelVariants = this[$modelVariants].get(variantName);\n\n    if (modelVariants != null && this.variantInfo.has(modelVariants!.index)) {\n      console.warn(`Primitive cannot add variant '${\n          variantName}' for this material, it already exists.`);\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"mappings":";AAoBA,SAAQA,kBAAkB,EAAEC,eAAe,QAAiB,gBAAgB;AAE5E,SAAQC,kBAAkB,QAAO,yBAAyB;AAI1D,MAAMC,UAAU,GAAGC,MAAM,CAAC,WAAW,CAAC;AACtC,MAAMC,qBAAqB,GAAGD,MAAM,CAAC,sBAAsB,CAAC;AAC5D,MAAME,cAAc,GAAGF,MAAM,CAAC,eAAe,CAAC;AAC9C,MAAMG,KAAK,GAAGH,MAAM,CAAC,MAAM,CAAC;AAC5B,OAAO,MAAMI,WAAW,GAAGJ,MAAM,CAAC,YAAY,CAAC;AAC/C,OAAO,MAAMK,YAAY,GAAGL,MAAM,CAAC,aAAa,CAAC;AACjD,OAAO,MAAMM,yBAAyB,GAAGN,MAAM,CAAC,0BAA0B,CAAC;AAC3E,OAAO,MAAMO,cAAc,GAAGP,MAAM,CAAC,eAAe,CAAC;AACrD,OAAO,MAAMQ,SAAS,GAAGR,MAAM,CAAC,UAAU,CAAC;AAC3C,OAAO,MAAMS,mBAAmB,GAAGT,MAAM,CAAC,oBAAoB,CAAC;AAC/D,OAAO,MAAMU,kBAAkB,GAAGV,MAAM,CAAC,mBAAmB,CAAC;AAE7D;AACA,OAAM,MAAOW,IAAI;EAGfC,YAAYC,IAAY;IAFxB,KAAAA,IAAI,GAAW,EAAE;IACjB,KAAAC,EAAA,CAAW,GAAG,IAAIC,KAAK,EAAQ;IAE7B,IAAI,CAACF,IAAI,GAAGA,IAAI;EAClB;;KAHCL,SAAS;AAMZ;AACA,OAAM,MAAOQ,aAAc,SAAQL,IAAI;EAUrCC,YACIK,IAAU,EAAEC,WAAuB,EACnCC,aAAuC,EACvCC,oBAA0C;IAC5C,KAAK,CAACH,IAAI,CAACJ,IAAI,CAAC;IAZlB;IACA,KAAAQ,EAAA,CAAY,GAAG,IAAIC,GAAG,EAAoB;IAC1C;IACO,KAAAC,EAAA,CAAuB,GAAG,IAAID,GAAG,EAAoB;IACrD,KAAAE,EAAA,CAAqB,GAAG,CAAC;IACzB,KAAAC,EAAA,CAAoB,GAAG,CAAC;IAQ7B,IAAI,CAACtB,KAAK,CAAC,GAAGc,IAAI;IAClB,MAAM;MAACS,IAAI;MAAEC,SAAS;MAAEC;IAAc,CAAC,GAAGR,oBAAoB;IAC9D,IAAI,CAAClB,cAAc,CAAC,GAAGiB,aAAa;IACpC,IAAI,CAACF,IAAI,CAACY,QAAQ,CAACC,WAAW,GAAGX,aAAa;IAC9C;IACA,MAAMY,gBAAgB,GAClBH,cAAc,CAACI,GAAG,CAACf,IAAI,CAACgB,QAAyB,CAAE;IACvD,IAAIF,gBAAgB,CAACG,SAAS,IAAI,IAAI,EAAE;MACtC,IAAI,CAACzB,mBAAmB,CAAC,GAAG,IAAI,CAACC,kBAAkB,CAAC,GAChDqB,gBAAgB,CAACG,SAAS;KAC/B,MAAM;MACLC,OAAO,CAACC,KAAK,CACT,cAAcnB,IAAI,CAACJ,IAAI,uCAAuC,CAAC;;IAGrE;IACA,MAAMwB,YAAY,GACbpB,IAAI,CAACY,QAAQ,CAACQ,YAAqD,IACpE,EAAE;IAEN,IAAIA,YAAY,CAACC,MAAM,IAAI,IAAI,EAAE;MAC/BH,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC;MAC5D;;IAEF;IACA,MAAMG,gBAAgB,GAAGb,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IAC7C;IACA,MAAMc,cAAc,GACfD,gBAAgB,CAACF,YAAY,CAACC,MAAM,CAAC,CAACG,UAAU,IAAI,EAAkB;IAE3E,MAAMC,aAAa,GAAGF,cAAc,CAACH,YAAY,CAACI,UAAU,CAAC;IAC7D,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzBP,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;MACtD;;IAGF;IACA,IAAIM,aAAa,CAACT,QAAQ,IAAI,IAAI,EAAE;MAClC,IAAI,CAAClC,UAAU,CAAC,CAAC4C,GAAG,CAChBD,aAAa,CAACT,QAAQ,EAAEf,WAAW,CAACwB,aAAa,CAACT,QAAQ,CAAC,CAAC;KACjE,MAAM;MACL,MAAMW,UAAU,GAAG1B,WAAW,CAAC2B,SAAS,CAAEC,GAAa,IAAI;QACzD,OAAOA,GAAG,CAACjC,IAAI,KAAK,SAAS;MAC/B,CAAC,CAAC;MACF,IAAI+B,UAAU,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC7C,UAAU,CAAC,CAAC4C,GAAG,CAACC,UAAU,EAAE1B,WAAW,CAAC0B,UAAU,CAAC,CAAC;OAC1D,MAAM;QACLT,OAAO,CAACY,IAAI,CAAC,gCAAgC,CAAC;;;IAIlD,IAAIL,aAAa,CAACM,UAAU,IACxBN,aAAa,CAACM,UAAU,CAAC,wBAAwB,CAAC,EAAE;MACtD,MAAMC,iBAAiB,GACnBP,aAAa,CAACM,UAAU,CAAC,wBAAwB,CAC7B;MACxB,MAAMA,UAAU,GAAGrB,SAAS,CAACuB,MAAM,CAACC,IAAI,CAACH,UAAU;MACnD,MAAMI,YAAY,GAAGJ,UAAU,CAAC,wBAAwB,CAAC,CAACK,QAAQ;MAClE;MACA;MACA,KAAK,MAAMC,OAAO,IAAIL,iBAAiB,CAACM,QAAQ,EAAE;QAChD,MAAMC,UAAU,GAAGtC,WAAW,CAACoC,OAAO,CAACrB,QAAQ,CAAC;QAChD;QACA,IAAI,CAAClC,UAAU,CAAC,CAAC4C,GAAG,CAACW,OAAO,CAACrB,QAAQ,EAAEuB,UAAU,CAAC;QAClD,KAAK,MAAMC,OAAO,IAAIH,OAAO,CAACD,QAAQ,EAAE;UACtC,MAAM;YAACxC;UAAI,CAAC,GAAGuC,YAAY,CAACK,OAAO,CAAC;UACpC,IAAI,CAACxD,qBAAqB,CAAC,CAAC0C,GAAG,CAACc,OAAO,EAAED,UAAU,CAAC;UACpD;UACAA,UAAU,CAAC3D,eAAe,CAAC,EAAE,CAAC6D,GAAG,CAACD,OAAO,CAAC;UAC1C;UACA,IAAI,CAACtC,aAAa,CAACwC,GAAG,CAAC9C,IAAI,CAAC,EAAE;YAC5BM,aAAa,CAACwB,GAAG,CAAC9B,IAAI,EAAE;cAACA,IAAI;cAAE+C,KAAK,EAAEH;YAAO,CAAgB,CAAC;;;;;EAKxE;EAEA,IAAIxC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACd,KAAK,CAAC;EACpB;EAEA,MAAM0D,iBAAiBA,CAAC5B,QAAgB;IACtC,MAAMuB,UAAU,GAAG,IAAI,CAACzD,UAAU,CAAC,CAACiC,GAAG,CAACC,QAAQ,CAAC;IACjD,IAAIuB,UAAU,IAAI,IAAI,EAAE;MACtB,IAAI,CAACvC,IAAI,CAACgB,QAAQ,GAAG,MAAMuB,UAAU,CAAC5D,kBAAkB,CAAC,EAAE;MAC3D,IAAI,CAACc,kBAAkB,CAAC,GAAGuB,QAAQ;;IAErC,OAAO,IAAI,CAAChB,IAAI,CAACgB,QAAyB;EAC5C;EAEA6B,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC/D,UAAU,CAAC,CAACiC,GAAG,CAAC,IAAI,CAACtB,kBAAkB,CAAC,CAAE;EACxD;EAEAqD,WAAWA,CAACH,KAAa;IACvB,OAAO,IAAI,CAAC7D,UAAU,CAAC,CAACiC,GAAG,CAAC4B,KAAK,CAAC;EACpC;EAEA,MAAMI,aAAaA,CAACnD,IAAiB;IACnC,IAAIA,IAAI,IAAI,IAAI,EAAE;MAChB,OAAO,IAAI,CAACgD,iBAAiB,CAAC,IAAI,CAACpD,mBAAmB,CAAC,CAAC;;IAE1D,IAAI,IAAI,CAACR,qBAAqB,CAAC,IAAI,IAAI,IAAI,IAAI,CAACC,cAAc,CAAC,CAACyD,GAAG,CAAC9C,IAAI,CAAC,EAAE;MACzE,MAAMM,aAAa,GAAG,IAAI,CAACjB,cAAc,CAAC,CAAC8B,GAAG,CAACnB,IAAI,CAAE;MACrD,OAAO,IAAI,CAACoD,mBAAmB,CAAC9C,aAAa,CAACyC,KAAK,CAAC;;IAEtD,OAAO,IAAI;EACb;EAEQ,MAAMK,mBAAmBA,CAACL,KACI;IACpC,IAAI,IAAI,CAAC3D,qBAAqB,CAAC,IAAI,IAAI,IAAI2D,KAAK,IAAI,IAAI,EAAE;MACxD,MAAM3B,QAAQ,GAAG,IAAI,CAAChC,qBAAqB,CAAC,CAAC+B,GAAG,CAAC4B,KAAK,CAAC;MACvD,IAAI3B,QAAQ,IAAI,IAAI,EAAE;QACpB,OAAO,IAAI,CAAC4B,iBAAiB,CAAC5B,QAAQ,CAAC2B,KAAK,CAAC;;;IAGjD,OAAO,IAAI;EACb;EAEA,MAAMM,mBAAmBA,CAAA;IACvB,IAAI,IAAI,CAACjE,qBAAqB,CAAC,IAAI,IAAI,EAAE;MACvC;;IAEF,KAAK,MAAM2D,KAAK,IAAI,IAAI,CAAC3D,qBAAqB,CAAC,CAACkE,IAAI,EAAE,EAAE;MACtD,MAAMC,eAAe,GAAG,IAAI,CAACnD,IAAI,CAACY,QAAQ,CAACwC,gBAAgB,CAACrC,GAAG,CAAC4B,KAAK,CAC3C;MAC1B,IAAIQ,eAAe,CAACnC,QAAQ,IAAI,IAAI,EAAE;QACpC;;MAEF,MAAMqC,aAAa,GAAG,MAAM,IAAI,CAACL,mBAAmB,CAACL,KAAK,CAAC;MAC3D,IAAIU,aAAa,IAAI,IAAI,EAAE;QACzBF,eAAe,CAACnC,QAAQ,GAAGqC,aAAa;;;EAG9C;EAEA,IAAIC,WAAWA,CAAA;IACb,OAAO,IAAI,CAACtE,qBAAqB,CAAC;EACpC;EAEAuE,UAAUA,CAACC,eAAyB,EAAEC,WAAmB;IACvD,IAAI,CAAC,IAAI,CAACC,qBAAqB,CAACD,WAAW,CAAC,EAAE;MAC5C,OAAO,KAAK;;IAGd;IACA,IAAI,CAAC,IAAI,CAACxE,cAAc,CAAC,CAACyD,GAAG,CAACe,WAAW,CAAC,EAAE;MAC1C,IAAI,CAACxE,cAAc,CAAC,CAACyC,GAAG,CACpB+B,WAAW,EAAE;QAAC7D,IAAI,EAAE6D,WAAW;QAAEd,KAAK,EAAE,IAAI,CAAC1D,cAAc,CAAC,CAAC0E;MAAI,CAAC,CAAC;;IAEzE,MAAMC,gBAAgB,GAAG,IAAI,CAAC3E,cAAc,CAAC,CAAC8B,GAAG,CAAC0C,WAAW,CAAE;IAC/D,MAAMI,YAAY,GAAGD,gBAAgB,CAACjB,KAAK;IAE3C;IACAa,eAAe,CAAC5E,eAAe,CAAC,EAAE,CAAC6D,GAAG,CAACoB,YAAY,CAAC;IAEpD;IACA,IAAI,CAAC7E,qBAAqB,CAAC,CAAC0C,GAAG,CAACmC,YAAY,EAAEL,eAAe,CAAC;IAC9D,IAAI,CAAC1E,UAAU,CAAC,CAAC4C,GAAG,CAAC8B,eAAe,CAACb,KAAK,EAAEa,eAAe,CAAC;IAE5D,IAAI,CAACM,qBAAqB,CAACD,YAAY,EAAEL,eAAe,CAAC;IAEzD,OAAO,IAAI;EACb;EAEAO,aAAaA,CAACF,YAAoB;IAChC,IAAI,IAAI,CAACP,WAAW,CAACZ,GAAG,CAACmB,YAAY,CAAC,EAAE;MACtC,IAAI,CAACP,WAAW,CAACU,MAAM,CAACH,YAAY,CAAC;MAErC,MAAMI,WAAW,GAAG,IAAI,CAACjE,IAAI,CAACY,QAAQ,CAACwC,gBACA;MACvC,IAAIa,WAAW,IAAI,IAAI,EAAE;QACvBA,WAAW,CAACD,MAAM,CAACH,YAAY,CAAC;;;EAGtC;EAEQC,qBAAqBA,CACzBD,YAAoB,EAAEL,eAAyB;IACjD;IACAA,eAAe,CAAC5E,eAAe,CAAC,EAAE,CAAC6D,GAAG,CAACoB,YAAY,CAAC;IAEpD,IAAI,CAAC7D,IAAI,CAACY,QAAQ,CAACC,WAAW,GAAG,IAAI,CAAC5B,cAAc,CAAC;IACrD;IACA,IAAI,CAACe,IAAI,CAACY,QAAQ,CAACwC,gBAAgB,GAAG,IAAI,CAACpD,IAAI,CAACY,QAAQ,CAACwC,gBAAgB,IACrE,IAAI/C,GAAG,EAAkC;IAC7C,MAAM6D,GAAG,GAAG,IAAI,CAAClE,IAAI,CAACY,QAAQ,CAACwC,gBACQ;IACvCc,GAAG,CAACxC,GAAG,CAACmC,YAAY,EAAE;MACpB7C,QAAQ,EAAEwC,eAAe,CAAC3E,kBAAkB,CAAE,CAACsF,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,KAAK;MACpEC,iBAAiB,EAAEd,eAAe,CAACb;KACpC,CAAC;EACJ;EAEQe,qBAAqBA,CAACD,WAAmB;IAC/C,MAAMvD,aAAa,GAAG,IAAI,CAACjB,cAAc,CAAC,CAAC8B,GAAG,CAAC0C,WAAW,CAAC;IAE3D,IAAIvD,aAAa,IAAI,IAAI,IAAI,IAAI,CAACoD,WAAW,CAACZ,GAAG,CAACxC,aAAc,CAACyC,KAAK,CAAC,EAAE;MACvEzB,OAAO,CAACY,IAAI,CAAC,iCACT2B,WAAW,yCAAyC,CAAC;MACzD,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;;KA1NC3E,UAAU,EAAAwB,EAAA,GAEHtB,qBAAqB,EAAAuB,EAAA,GACrBf,mBAAmB,EAAAgB,EAAA,GACnBf,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}