{"ast":null,"code":"import { AuthClient as q } from \"@walletconnect/auth-client\";\nimport { SignClient as N } from \"@walletconnect/sign-client\";\nvar l = {\n    exports: {}\n  },\n  u = typeof Reflect == \"object\" ? Reflect : null,\n  m = u && typeof u.apply == \"function\" ? u.apply : function (t, e, n) {\n    return Function.prototype.apply.call(t, e, n);\n  },\n  f;\nu && typeof u.ownKeys == \"function\" ? f = u.ownKeys : Object.getOwnPropertySymbols ? f = function (t) {\n  return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));\n} : f = function (t) {\n  return Object.getOwnPropertyNames(t);\n};\nfunction T(s) {\n  console && console.warn && console.warn(s);\n}\nvar y = Number.isNaN || function (t) {\n  return t !== t;\n};\nfunction o() {\n  o.init.call(this);\n}\nl.exports = o, l.exports.once = M, o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;\nvar w = 10;\nfunction g(s) {\n  if (typeof s != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof s);\n}\nObject.defineProperty(o, \"defaultMaxListeners\", {\n  enumerable: !0,\n  get: function () {\n    return w;\n  },\n  set: function (s) {\n    if (typeof s != \"number\" || s < 0 || y(s)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + s + \".\");\n    w = s;\n  }\n}), o.init = function () {\n  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n}, o.prototype.setMaxListeners = function (t) {\n  if (typeof t != \"number\" || t < 0 || y(t)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + t + \".\");\n  return this._maxListeners = t, this;\n};\nfunction L(s) {\n  return s._maxListeners === void 0 ? o.defaultMaxListeners : s._maxListeners;\n}\no.prototype.getMaxListeners = function () {\n  return L(this);\n}, o.prototype.emit = function (t) {\n  for (var e = [], n = 1; n < arguments.length; n++) e.push(arguments[n]);\n  var i = t === \"error\",\n    a = this._events;\n  if (a !== void 0) i = i && a.error === void 0;else if (!i) return !1;\n  if (i) {\n    var r;\n    if (e.length > 0 && (r = e[0]), r instanceof Error) throw r;\n    var h = new Error(\"Unhandled error.\" + (r ? \" (\" + r.message + \")\" : \"\"));\n    throw h.context = r, h;\n  }\n  var c = a[t];\n  if (c === void 0) return !1;\n  if (typeof c == \"function\") m(c, this, e);else for (var v = c.length, A = b(c, v), n = 0; n < v; ++n) m(A[n], this, e);\n  return !0;\n};\nfunction _(s, t, e, n) {\n  var i, a, r;\n  if (g(e), a = s._events, a === void 0 ? (a = s._events = Object.create(null), s._eventsCount = 0) : (a.newListener !== void 0 && (s.emit(\"newListener\", t, e.listener ? e.listener : e), a = s._events), r = a[t]), r === void 0) r = a[t] = e, ++s._eventsCount;else if (typeof r == \"function\" ? r = a[t] = n ? [e, r] : [r, e] : n ? r.unshift(e) : r.push(e), i = L(s), i > 0 && r.length > i && !r.warned) {\n    r.warned = !0;\n    var h = new Error(\"Possible EventEmitter memory leak detected. \" + r.length + \" \" + String(t) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n    h.name = \"MaxListenersExceededWarning\", h.emitter = s, h.type = t, h.count = r.length, T(h);\n  }\n  return s;\n}\no.prototype.addListener = function (t, e) {\n  return _(this, t, e, !1);\n}, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function (t, e) {\n  return _(this, t, e, !0);\n};\nfunction j() {\n  if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n}\nfunction S(s, t, e) {\n  var n = {\n      fired: !1,\n      wrapFn: void 0,\n      target: s,\n      type: t,\n      listener: e\n    },\n    i = j.bind(n);\n  return i.listener = e, n.wrapFn = i, i;\n}\no.prototype.once = function (t, e) {\n  return g(e), this.on(t, S(this, t, e)), this;\n}, o.prototype.prependOnceListener = function (t, e) {\n  return g(e), this.prependListener(t, S(this, t, e)), this;\n}, o.prototype.removeListener = function (t, e) {\n  var n, i, a, r, h;\n  if (g(e), i = this._events, i === void 0) return this;\n  if (n = i[t], n === void 0) return this;\n  if (n === e || n.listener === e) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[t], i.removeListener && this.emit(\"removeListener\", t, n.listener || e));else if (typeof n != \"function\") {\n    for (a = -1, r = n.length - 1; r >= 0; r--) if (n[r] === e || n[r].listener === e) {\n      h = n[r].listener, a = r;\n      break;\n    }\n    if (a < 0) return this;\n    a === 0 ? n.shift() : I(n, a), n.length === 1 && (i[t] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", t, h || e);\n  }\n  return this;\n}, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function (t) {\n  var e, n, i;\n  if (n = this._events, n === void 0) return this;\n  if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[t] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[t]), this;\n  if (arguments.length === 0) {\n    var a = Object.keys(n),\n      r;\n    for (i = 0; i < a.length; ++i) r = a[i], r !== \"removeListener\" && this.removeAllListeners(r);\n    return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n  }\n  if (e = n[t], typeof e == \"function\") this.removeListener(t, e);else if (e !== void 0) for (i = e.length - 1; i >= 0; i--) this.removeListener(t, e[i]);\n  return this;\n};\nfunction C(s, t, e) {\n  var n = s._events;\n  if (n === void 0) return [];\n  var i = n[t];\n  return i === void 0 ? [] : typeof i == \"function\" ? e ? [i.listener || i] : [i] : e ? W(i) : b(i, i.length);\n}\no.prototype.listeners = function (t) {\n  return C(this, t, !0);\n}, o.prototype.rawListeners = function (t) {\n  return C(this, t, !1);\n}, o.listenerCount = function (s, t) {\n  return typeof s.listenerCount == \"function\" ? s.listenerCount(t) : E.call(s, t);\n}, o.prototype.listenerCount = E;\nfunction E(s) {\n  var t = this._events;\n  if (t !== void 0) {\n    var e = t[s];\n    if (typeof e == \"function\") return 1;\n    if (e !== void 0) return e.length;\n  }\n  return 0;\n}\no.prototype.eventNames = function () {\n  return this._eventsCount > 0 ? f(this._events) : [];\n};\nfunction b(s, t) {\n  for (var e = new Array(t), n = 0; n < t; ++n) e[n] = s[n];\n  return e;\n}\nfunction I(s, t) {\n  for (; t + 1 < s.length; t++) s[t] = s[t + 1];\n  s.pop();\n}\nfunction W(s) {\n  for (var t = new Array(s.length), e = 0; e < t.length; ++e) t[e] = s[e].listener || s[e];\n  return t;\n}\nfunction M(s, t) {\n  return new Promise(function (e, n) {\n    function i(r) {\n      s.removeListener(t, a), n(r);\n    }\n    function a() {\n      typeof s.removeListener == \"function\" && s.removeListener(\"error\", i), e([].slice.call(arguments));\n    }\n    R(s, t, a, {\n      once: !0\n    }), t !== \"error\" && z(s, i, {\n      once: !0\n    });\n  });\n}\nfunction z(s, t, e) {\n  typeof s.on == \"function\" && R(s, \"error\", t, e);\n}\nfunction R(s, t, e, n) {\n  if (typeof s.on == \"function\") n.once ? s.once(t, e) : s.on(t, e);else if (typeof s.addEventListener == \"function\") s.addEventListener(t, function i(a) {\n    n.once && s.removeEventListener(t, i), e(a);\n  });else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof s);\n}\nconst O = \"wc\",\n  F = 2,\n  d = \"Web3Wallet\",\n  K = `${O}@2:${d}:`,\n  k = {\n    database: \":memory:\"\n  },\n  U = \"request\";\nclass X extends l.exports {\n  constructor() {\n    super();\n  }\n}\nclass x {\n  constructor(t) {\n    this.opts = t;\n  }\n}\nclass P {\n  constructor(t) {\n    this.client = t;\n  }\n}\nclass D extends P {\n  constructor(t) {\n    super(t), this.init = async () => {\n      this.signClient = await N.init({\n        core: this.client.core,\n        metadata: this.client.metadata\n      }), this.authClient = await q.init({\n        core: this.client.core,\n        projectId: \"\",\n        metadata: this.client.metadata\n      }), this.initializeEventListeners();\n    }, this.pair = async e => {\n      await this.client.core.pairing.pair(e);\n    }, this.approveSession = async e => {\n      const {\n        topic: n,\n        acknowledged: i\n      } = await this.signClient.approve({\n        id: e.id,\n        namespaces: e.namespaces\n      });\n      return await i(), this.signClient.session.get(n);\n    }, this.rejectSession = async e => await this.signClient.reject(e), this.updateSession = async e => await (await this.signClient.update(e)).acknowledged(), this.extendSession = async e => await (await this.signClient.extend(e)).acknowledged(), this.respondSessionRequest = async e => await this.signClient.respond(e), this.disconnectSession = async e => await this.signClient.disconnect(e), this.emitSessionEvent = async e => await this.signClient.emit(e), this.getActiveSessions = () => this.signClient.session.getAll().reduce((e, n) => (e[n.topic] = n, e), {}), this.getPendingSessionProposals = () => this.signClient.proposal.getAll(), this.getPendingSessionRequests = () => this.signClient.getPendingSessionRequests(), this.respondAuthRequest = async (e, n) => await this.authClient.respond(e, n), this.getPendingAuthRequests = () => this.authClient.requests.getAll().filter(e => \"requester\" in e), this.formatMessage = (e, n) => this.authClient.formatMessage(e, n), this.onSessionRequest = e => {\n      this.client.events.emit(\"session_request\", e);\n    }, this.onSessionProposal = e => {\n      this.client.events.emit(\"session_proposal\", e);\n    }, this.onSessionDelete = e => {\n      this.client.events.emit(\"session_delete\", e);\n    }, this.onAuthRequest = e => {\n      this.client.events.emit(\"auth_request\", e);\n    }, this.initializeEventListeners = () => {\n      this.signClient.events.on(\"session_proposal\", this.onSessionProposal), this.signClient.events.on(\"session_request\", this.onSessionRequest), this.signClient.events.on(\"session_delete\", this.onSessionDelete), this.authClient.on(\"auth_request\", this.onAuthRequest);\n    }, this.signClient = {}, this.authClient = {};\n  }\n}\nclass p extends x {\n  constructor(t) {\n    super(t), this.events = new l.exports(), this.on = (e, n) => this.events.on(e, n), this.once = (e, n) => this.events.once(e, n), this.off = (e, n) => this.events.off(e, n), this.removeListener = (e, n) => this.events.removeListener(e, n), this.pair = async e => {\n      try {\n        return await this.engine.pair(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.approveSession = async e => {\n      try {\n        return await this.engine.approveSession(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.rejectSession = async e => {\n      try {\n        return await this.engine.rejectSession(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.updateSession = async e => {\n      try {\n        return await this.engine.updateSession(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.extendSession = async e => {\n      try {\n        return await this.engine.extendSession(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.respondSessionRequest = async e => {\n      try {\n        return await this.engine.respondSessionRequest(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.disconnectSession = async e => {\n      try {\n        return await this.engine.disconnectSession(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.emitSessionEvent = async e => {\n      try {\n        return await this.engine.emitSessionEvent(e);\n      } catch (n) {\n        throw this.logger.error(n.message), n;\n      }\n    }, this.getActiveSessions = () => {\n      try {\n        return this.engine.getActiveSessions();\n      } catch (e) {\n        throw this.logger.error(e.message), e;\n      }\n    }, this.getPendingSessionProposals = () => {\n      try {\n        return this.engine.getPendingSessionProposals();\n      } catch (e) {\n        throw this.logger.error(e.message), e;\n      }\n    }, this.getPendingSessionRequests = () => {\n      try {\n        return this.engine.getPendingSessionRequests();\n      } catch (e) {\n        throw this.logger.error(e.message), e;\n      }\n    }, this.respondAuthRequest = async (e, n) => {\n      try {\n        return await this.engine.respondAuthRequest(e, n);\n      } catch (i) {\n        throw this.logger.error(i.message), i;\n      }\n    }, this.getPendingAuthRequests = () => {\n      try {\n        return this.engine.getPendingAuthRequests();\n      } catch (e) {\n        throw this.logger.error(e.message), e;\n      }\n    }, this.formatMessage = (e, n) => {\n      try {\n        return this.engine.formatMessage(e, n);\n      } catch (i) {\n        throw this.logger.error(i.message), i;\n      }\n    }, this.metadata = t.metadata, this.name = t.name || d, this.core = t.core, this.logger = this.core.logger, this.engine = new D(this);\n  }\n  static async init(t) {\n    const e = new p(t);\n    return await e.initialize(), e;\n  }\n  async initialize() {\n    this.logger.trace(\"Initialized\");\n    try {\n      await this.engine.init(), this.logger.info(\"Web3Wallet Initialization Success\");\n    } catch (t) {\n      throw this.logger.info(\"Web3Wallet Initialization Failure\"), this.logger.error(t.message), t;\n    }\n  }\n}\nconst G = p;\nexport { d as CLIENT_CONTEXT, k as CLIENT_STORAGE_OPTIONS, K as CLIENT_STORAGE_PREFIX, x as IWeb3Wallet, P as IWeb3WalletEngine, X as IWeb3WalletEvents, O as PROTOCOL, F as PROTOCOL_VERSION, U as REQUEST_CONTEXT, G as Web3Wallet, p as default };","map":{"version":3,"names":[],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\node_modules\\events\\events.js","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\constants\\client.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\constants\\request.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\types\\client.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\types\\engine.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\controllers\\engine.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\client.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@walletconnect\\web3wallet\\src\\index.ts"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","export const PROTOCOL = \"wc\";\nexport const PROTOCOL_VERSION = 2;\nexport const CLIENT_CONTEXT = \"Web3Wallet\";\n\nexport const CLIENT_STORAGE_PREFIX = `${PROTOCOL}@${PROTOCOL_VERSION}:${CLIENT_CONTEXT}:`;\n\nexport const CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","import EventEmmiter, { EventEmitter } from \"events\";\nimport { ICore, ProposalTypes, Verify } from \"@walletconnect/types\";\nimport { AuthClientTypes } from \"@walletconnect/auth-client\";\nimport { IWeb3WalletEngine } from \"./engine\";\nimport { Logger } from \"@walletconnect/logger\";\n\nexport declare namespace Web3WalletTypes {\n  type Event = \"session_proposal\" | \"session_request\" | \"session_delete\" | \"auth_request\";\n\n  interface BaseEventArgs<T = unknown> {\n    id: number;\n    topic: string;\n    params: T;\n  }\n\n  type SessionRequest = BaseEventArgs<{\n    request: { method: string; params: any };\n    chainId: string;\n  }> & {\n    verifyContext: Verify.Context;\n  };\n\n  type SessionProposal = Omit<BaseEventArgs<ProposalTypes.Struct>, \"topic\"> & {\n    verifyContext: Verify.Context;\n  };\n\n  type AuthRequest = BaseEventArgs<AuthClientTypes.AuthRequestEventArgs>;\n\n  type SessionDelete = Omit<BaseEventArgs, \"params\">;\n\n  interface EventArguments {\n    session_proposal: SessionProposal;\n    session_request: SessionRequest;\n    session_delete: Omit<BaseEventArgs, \"params\">;\n    auth_request: AuthRequest;\n  }\n\n  interface Options {\n    core: ICore;\n    metadata: Metadata;\n    name?: string;\n  }\n\n  type Metadata = AuthClientTypes.Metadata;\n}\n\nexport abstract class IWeb3WalletEvents extends EventEmmiter {\n  constructor() {\n    super();\n  }\n\n  public abstract emit: <E extends Web3WalletTypes.Event>(\n    event: E,\n    args: Web3WalletTypes.EventArguments[E],\n  ) => boolean;\n\n  public abstract on: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract once: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract off: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract removeListener: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => any,\n  ) => this;\n}\n\nexport abstract class IWeb3Wallet {\n  public abstract readonly name: string;\n  public abstract engine: IWeb3WalletEngine;\n  public abstract events: EventEmitter;\n  public abstract logger: Logger;\n  public abstract core: ICore;\n  public abstract metadata: Web3WalletTypes.Metadata;\n\n  constructor(public opts: Web3WalletTypes.Options) {}\n\n  // ---------- Public Methods ----------------------------------------------- //\n\n  public abstract pair: IWeb3WalletEngine[\"pair\"];\n\n  // sign //\n  public abstract approveSession: IWeb3WalletEngine[\"approveSession\"];\n  public abstract rejectSession: IWeb3WalletEngine[\"rejectSession\"];\n  public abstract updateSession: IWeb3WalletEngine[\"updateSession\"];\n  public abstract extendSession: IWeb3WalletEngine[\"extendSession\"];\n  public abstract respondSessionRequest: IWeb3WalletEngine[\"respondSessionRequest\"];\n  public abstract disconnectSession: IWeb3WalletEngine[\"disconnectSession\"];\n  public abstract emitSessionEvent: IWeb3WalletEngine[\"emitSessionEvent\"];\n  public abstract getActiveSessions: IWeb3WalletEngine[\"getActiveSessions\"];\n  public abstract getPendingSessionProposals: IWeb3WalletEngine[\"getPendingSessionProposals\"];\n  public abstract getPendingSessionRequests: IWeb3WalletEngine[\"getPendingSessionRequests\"];\n  // auth //\n  public abstract respondAuthRequest: IWeb3WalletEngine[\"respondAuthRequest\"];\n  public abstract getPendingAuthRequests: IWeb3WalletEngine[\"getPendingAuthRequests\"];\n  public abstract formatMessage: IWeb3WalletEngine[\"formatMessage\"];\n\n  // ---------- Event Handlers ----------------------------------------------- //\n  public abstract on: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract once: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract off: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract removeListener: <E extends Web3WalletTypes.Event>(\n    event: E,\n    listener: (args: Web3WalletTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n}\n","import { AuthEngineTypes, IAuthClient } from \"@walletconnect/auth-client\";\nimport { ErrorResponse, JsonRpcResponse } from \"@walletconnect/jsonrpc-utils\";\nimport {\n  ISignClient,\n  PendingRequestTypes,\n  ProposalTypes,\n  SessionTypes,\n} from \"@walletconnect/types\";\nimport { IWeb3Wallet } from \"./client\";\n\nexport abstract class IWeb3WalletEngine {\n  public abstract signClient: ISignClient;\n  public abstract authClient: IAuthClient;\n\n  constructor(public client: IWeb3Wallet) {}\n  // ---------- Public Methods ------------------------------------------------- //\n  public abstract init(): Promise<void>;\n\n  public abstract pair(params: { uri: string; activatePairing?: boolean }): Promise<void>;\n\n  // ---------- Sign ------------------------------------------------- //\n  // approve a session proposal (SIGN)\n  public abstract approveSession(params: {\n    id: number;\n    namespaces: Record<string, SessionTypes.Namespace>;\n    relayProtocol?: string;\n  }): Promise<SessionTypes.Struct>;\n\n  // reject a session proposal (SIGN)\n  public abstract rejectSession(params: {\n    // proposerPublicKey: string;\n    id: number;\n    reason: ErrorResponse;\n  }): Promise<void>;\n\n  // update session namespaces (SIGN)\n  public abstract updateSession(params: {\n    topic: string;\n    namespaces: SessionTypes.Namespaces;\n  }): Promise<void>;\n\n  // update session expiry (SIGN)\n  public abstract extendSession(params: { topic: string }): Promise<void>;\n\n  // respond JSON-RPC request (SIGN)\n  public abstract respondSessionRequest(params: {\n    topic: string;\n    response: JsonRpcResponse;\n  }): Promise<void>;\n\n  // emit session events (SIGN)\n  public abstract emitSessionEvent(params: {\n    topic: string;\n    event: any; //SessionEvent;\n    chainId: string;\n  }): Promise<void>;\n\n  // disconnect a session (SIGN)\n  public abstract disconnectSession(params: {\n    topic: string;\n    reason: ErrorResponse;\n  }): Promise<void>;\n\n  // query all active sessions (SIGN)\n  public abstract getActiveSessions(): Record<string, SessionTypes.Struct>;\n\n  // query all pending session requests (SIGN)\n  public abstract getPendingSessionProposals(): Record<number, ProposalTypes.Struct>;\n\n  // query all pending session requests (SIGN)\n  public abstract getPendingSessionRequests(): PendingRequestTypes.Struct[];\n\n  // ---------- Auth ------------------------------------------------- //\n\n  // respond Auth Request (AUTH)\n  public abstract respondAuthRequest(\n    params: AuthEngineTypes.RespondParams,\n    iss: string,\n  ): Promise<void>;\n\n  // query all pending auth requests (AUTH)\n  public abstract getPendingAuthRequests(): Record<number, AuthEngineTypes.PendingRequest>;\n\n  // format payload to message string\n  public abstract formatMessage(payload: AuthEngineTypes.CacaoRequestPayload, iss: string): string;\n}\n","import { AuthClient, AuthEngineTypes, IAuthClient } from \"@walletconnect/auth-client\";\nimport { SignClient } from \"@walletconnect/sign-client\";\nimport { ISignClient } from \"@walletconnect/types\";\nimport { IWeb3WalletEngine, Web3WalletTypes } from \"../types\";\n\nexport class Engine extends IWeb3WalletEngine {\n  public signClient: ISignClient;\n  public authClient: IAuthClient;\n\n  constructor(client: IWeb3WalletEngine[\"client\"]) {\n    super(client);\n    // initialized in init()\n    this.signClient = {} as any;\n    this.authClient = {} as any;\n  }\n\n  public init = async () => {\n    this.signClient = await SignClient.init({\n      core: this.client.core,\n      metadata: this.client.metadata,\n    });\n    this.authClient = await AuthClient.init({\n      core: this.client.core,\n      projectId: \"\",\n      metadata: this.client.metadata,\n    });\n\n    this.initializeEventListeners();\n  };\n\n  public pair: IWeb3WalletEngine[\"pair\"] = async (params) => {\n    await this.client.core.pairing.pair(params);\n  };\n\n  // Sign //\n  public approveSession: IWeb3WalletEngine[\"approveSession\"] = async (sessionProposal) => {\n    const { topic, acknowledged } = await this.signClient.approve({\n      id: sessionProposal.id,\n      namespaces: sessionProposal.namespaces,\n    });\n    await acknowledged();\n    return this.signClient.session.get(topic);\n  };\n\n  public rejectSession: IWeb3WalletEngine[\"rejectSession\"] = async (params) => {\n    return await this.signClient.reject(params);\n  };\n\n  public updateSession: IWeb3WalletEngine[\"updateSession\"] = async (params) => {\n    return await (await this.signClient.update(params)).acknowledged();\n  };\n\n  public extendSession: IWeb3WalletEngine[\"extendSession\"] = async (params) => {\n    return await (await this.signClient.extend(params)).acknowledged();\n  };\n\n  public respondSessionRequest: IWeb3WalletEngine[\"respondSessionRequest\"] = async (params) => {\n    const result = await this.signClient.respond(params);\n    return result;\n  };\n\n  public disconnectSession: IWeb3WalletEngine[\"disconnectSession\"] = async (params) => {\n    return await this.signClient.disconnect(params);\n  };\n\n  public emitSessionEvent: IWeb3WalletEngine[\"emitSessionEvent\"] = async (params) => {\n    return await this.signClient.emit(params);\n  };\n\n  public getActiveSessions: IWeb3WalletEngine[\"getActiveSessions\"] = () => {\n    const sessions = this.signClient.session.getAll();\n    return sessions.reduce((sessions, session) => {\n      sessions[session.topic] = session;\n      return sessions;\n    }, {});\n  };\n\n  public getPendingSessionProposals: IWeb3WalletEngine[\"getPendingSessionProposals\"] = () => {\n    return this.signClient.proposal.getAll();\n  };\n\n  public getPendingSessionRequests: IWeb3WalletEngine[\"getPendingSessionRequests\"] = () => {\n    return this.signClient.getPendingSessionRequests();\n  };\n\n  // Auth //\n  public respondAuthRequest: IWeb3WalletEngine[\"respondAuthRequest\"] = async (params, iss) => {\n    return await this.authClient.respond(params, iss);\n  };\n\n  public getPendingAuthRequests: IWeb3WalletEngine[\"getPendingAuthRequests\"] = () => {\n    return this.authClient.requests\n      .getAll()\n      .filter((request) => \"requester\" in request) as AuthEngineTypes.PendingRequest[];\n  };\n\n  public formatMessage: IWeb3WalletEngine[\"formatMessage\"] = (params, iss) => {\n    return this.authClient.formatMessage(params, iss);\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private onSessionRequest = (event: Web3WalletTypes.SessionRequest) => {\n    this.client.events.emit(\"session_request\", event);\n  };\n\n  private onSessionProposal = (event: Web3WalletTypes.SessionProposal) => {\n    this.client.events.emit(\"session_proposal\", event);\n  };\n\n  private onSessionDelete = (event: Web3WalletTypes.SessionDelete) => {\n    this.client.events.emit(\"session_delete\", event);\n  };\n\n  private onAuthRequest = (event: Web3WalletTypes.AuthRequest) => {\n    this.client.events.emit(\"auth_request\", event);\n  };\n\n  private initializeEventListeners = () => {\n    this.signClient.events.on(\"session_proposal\", this.onSessionProposal);\n    this.signClient.events.on(\"session_request\", this.onSessionRequest);\n    this.signClient.events.on(\"session_delete\", this.onSessionDelete);\n    this.authClient.on(\"auth_request\", this.onAuthRequest);\n  };\n}\n","import EventEmitter from \"events\";\nimport { CLIENT_CONTEXT } from \"./constants\";\nimport { Engine } from \"./controllers\";\nimport { IWeb3Wallet, Web3WalletTypes } from \"./types\";\n\nexport class Web3Wallet extends IWeb3Wallet {\n  public name: IWeb3Wallet[\"name\"];\n  public core: IWeb3Wallet[\"core\"];\n  public logger: IWeb3Wallet[\"logger\"];\n  public events: IWeb3Wallet[\"events\"] = new EventEmitter();\n  public engine: IWeb3Wallet[\"engine\"];\n  public metadata: IWeb3Wallet[\"metadata\"];\n\n  static async init(opts: Web3WalletTypes.Options) {\n    const client = new Web3Wallet(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts: Web3WalletTypes.Options) {\n    super(opts);\n    this.metadata = opts.metadata;\n    this.name = opts.name || CLIENT_CONTEXT;\n    this.core = opts.core;\n    this.logger = this.core.logger;\n    this.engine = new Engine(this);\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: IWeb3Wallet[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: IWeb3Wallet[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: IWeb3Wallet[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: IWeb3Wallet[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public pair: IWeb3Wallet[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSession: IWeb3Wallet[\"approveSession\"] = async (params) => {\n    try {\n      return await this.engine.approveSession(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSession: IWeb3Wallet[\"rejectSession\"] = async (params) => {\n    try {\n      return await this.engine.rejectSession(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public updateSession: IWeb3Wallet[\"updateSession\"] = async (params) => {\n    try {\n      return await this.engine.updateSession(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extendSession: IWeb3Wallet[\"extendSession\"] = async (params) => {\n    try {\n      return await this.engine.extendSession(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respondSessionRequest: IWeb3Wallet[\"respondSessionRequest\"] = async (params) => {\n    try {\n      return await this.engine.respondSessionRequest(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnectSession: IWeb3Wallet[\"disconnectSession\"] = async (params) => {\n    try {\n      return await this.engine.disconnectSession(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emitSessionEvent: IWeb3Wallet[\"emitSessionEvent\"] = async (params) => {\n    try {\n      return await this.engine.emitSessionEvent(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getActiveSessions: IWeb3Wallet[\"getActiveSessions\"] = () => {\n    try {\n      return this.engine.getActiveSessions();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionProposals: IWeb3Wallet[\"getPendingSessionProposals\"] = () => {\n    try {\n      return this.engine.getPendingSessionProposals();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: IWeb3Wallet[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respondAuthRequest: IWeb3Wallet[\"respondAuthRequest\"] = async (params, iss) => {\n    try {\n      return await this.engine.respondAuthRequest(params, iss);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingAuthRequests: IWeb3Wallet[\"getPendingAuthRequests\"] = () => {\n    try {\n      return this.engine.getPendingAuthRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatMessage: IWeb3Wallet[\"formatMessage\"] = (params, iss) => {\n    try {\n      return this.engine.formatMessage(params, iss);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.engine.init();\n      this.logger.info(`Web3Wallet Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`Web3Wallet Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { Web3Wallet as Client } from \"./client\";\n\nexport * from \"./constants\";\nexport * from \"./types\";\n\nexport const Web3Wallet = Client;\nexport default Client;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}