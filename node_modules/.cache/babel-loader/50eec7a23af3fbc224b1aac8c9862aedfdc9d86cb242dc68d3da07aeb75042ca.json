{"ast":null,"code":"var r = (n => (n.MissingApiKey = \"MISSING_API_KEY\", n.ModalNotReady = \"MODAL_NOT_READY\", n.MalformedResponse = \"MALFORMED_RESPONSE\", n.InvalidArgument = \"INVALID_ARGUMENT\", n.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", n.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", n))(r || {}),\n  a = (s => (s.SyncWeb3Method = \"SYNC_WEB3_METHOD\", s.DuplicateIframe = \"DUPLICATE_IFRAME\", s.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", s.DeprecationNotice = \"DEPRECATION_NOTICE\", s))(a || {}),\n  m = (t => (t[t.ParseError = -32700] = \"ParseError\", t[t.InvalidRequest = -32600] = \"InvalidRequest\", t[t.MethodNotFound = -32601] = \"MethodNotFound\", t[t.InvalidParams = -32602] = \"InvalidParams\", t[t.InternalError = -32603] = \"InternalError\", t[t.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", t[t.MagicLinkExpired = -10001] = \"MagicLinkExpired\", t[t.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", t[t.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", t[t.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", t[t.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", t[t.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", t[t.InactiveRecipient = -10010] = \"InactiveRecipient\", t[t.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", t))(m || {});\nvar p = (e => (e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_auth_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"mc_get_wallet_info\", e.ShowUI = \"mc_wallet\", e.NFTPurchase = \"magic_nft_purchase\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.UpdatePhoneNumber = \"magic_auth_update_phone_number\", e.UpdatePhoneNumberTestMode = \"magic_auth_update_phone_number_testing_mode\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e))(p || {});\nvar u = (i => (i.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", i.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", i.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", i.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", i.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", i))(u || {}),\n  o = (_ => (_.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", _))(o || {});\nvar c = (_ => (_.Harmony = \"HARMONY\", _))(c || {});\nexport { c as EthChainType, u as MagicIncomingWindowMessage, o as MagicOutgoingWindowMessage, p as MagicPayloadMethod, m as RPCErrorCode, r as SDKErrorCode, a as SDKWarningCode };","map":{"version":3,"names":["r","n","MissingApiKey","ModalNotReady","MalformedResponse","InvalidArgument","ExtensionNotInitialized","IncompatibleExtensions","a","s","SyncWeb3Method","DuplicateIframe","ReactNativeEndpointConfiguration","DeprecationNotice","m","t","ParseError","InvalidRequest","MethodNotFound","InvalidParams","InternalError","MagicLinkFailedVerification","MagicLinkExpired","MagicLinkRateLimited","MagicLinkInvalidRedirectURL","UserAlreadyLoggedIn","UpdateEmailFailed","UserRequestEditEmail","InactiveRecipient","AccessDeniedToUser","p","e","LoginWithSms","LoginWithEmailOTP","LoginWithMagicLink","LoginWithCredential","GetIdToken","GenerateIdToken","GetMetadata","IsLoggedIn","Logout","UpdateEmail","UserSettings","UserSettingsTestMode","LoginWithSmsTestMode","LoginWithEmailOTPTestMode","LoginWithMagicLinkTestMode","LoginWithCredentialTestMode","GetIdTokenTestMode","GenerateIdTokenTestMode","GetMetadataTestMode","IsLoggedInTestMode","LogoutTestMode","UpdateEmailTestMode","IntermediaryEvent","RequestAccounts","GetInfo","ShowUI","NFTPurchase","RequestUserInfoWithUI","Disconnect","UpdatePhoneNumber","UpdatePhoneNumberTestMode","RecoverAccount","RecoverAccountTestMode","u","i","MAGIC_HANDLE_RESPONSE","MAGIC_OVERLAY_READY","MAGIC_SHOW_OVERLAY","MAGIC_HIDE_OVERLAY","MAGIC_HANDLE_EVENT","o","_","MAGIC_HANDLE_REQUEST","c","Harmony","EthChainType","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","MagicPayloadMethod","RPCErrorCode","SDKErrorCode","SDKWarningCode"],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@magic-sdk\\types\\src\\core\\exception-types.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@magic-sdk\\types\\src\\core\\json-rpc-types.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@magic-sdk\\types\\src\\core\\message-types.ts","C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@magic-sdk\\types\\src\\modules\\rpc-provider-types.ts"],"sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n  data?: any;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport interface WalletInfo {\n  walletType: 'magic' | 'metamask' | 'coinbase_wallet' | 'wallet_connect';\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\nexport interface NFTPurchaseRequest {\n  nft: {\n    name: string;\n    price: number;\n    currencyCode: string;\n    contractAddress: string;\n    collection?: string;\n    imageUrl?: string;\n  };\n  identityPrefill: {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string; // YYYY-MM-DD\n    emailAddress: string;\n    phone: string;\n    address: {\n      street1: string;\n      street2: string;\n      city: string;\n      regionCode: string;\n      postalCode: string;\n      countryCode: string;\n    };\n  };\n}\n\nexport type NFTPurchaseStatus = 'processed' | 'declined' | 'expired';\n\nexport interface NFTPurchaseResponse {\n  status: NFTPurchaseStatus;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'mc_get_wallet_info',\n  ShowUI = 'mc_wallet',\n  NFTPurchase = 'magic_nft_purchase',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export type EthNetworkName = 'mainnet' | 'goerli';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}