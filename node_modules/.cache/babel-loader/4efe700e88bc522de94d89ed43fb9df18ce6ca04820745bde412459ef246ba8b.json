{"ast":null,"code":"const resolve = require('./resolve');\nconst provider = require('./provider');\nconst presets = require('./presets');\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n};\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null;\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null;\nif (injected.ethereum) injected.ethereum.__isProvider = true;\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n};\nmodule.exports = (targets, options) => {\n  if (targets && !Array.isArray(targets) && typeof targets === 'object' && !options) {\n    options = targets;\n    targets = undefined;\n  }\n  if (!targets) targets = ['injected', 'frame'];\n  if (!options) options = {};\n  targets = [].concat(targets);\n  targets.forEach(t => {\n    if (t.startsWith('alchemy') && !options.alchemyId) throw new Error('Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: \\'123abc\\' }');\n    if (t.startsWith('infura') && !options.infuraId) throw new Error('Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: \\'123abc\\' }');\n  });\n  const sets = presets(options);\n  return provider(connections, resolve(targets, sets), options);\n};","map":{"version":3,"names":["resolve","require","provider","presets","injected","ethereum","window","web3","currentProvider","ws","WebSocket","XHR","XMLHttpRequest","__isProvider","connections","ipc","http","module","exports","targets","options","Array","isArray","undefined","concat","forEach","t","startsWith","alchemyId","Error","infuraId","sets"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/eth-provider/browser.js"],"sourcesContent":["const resolve = require('./resolve')\nconst provider = require('./provider')\nconst presets = require('./presets')\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n}\n\nmodule.exports = (targets, options) => {\n  if (targets && !Array.isArray(targets) && typeof targets === 'object' && !options) {\n    options = targets\n    targets = undefined\n  }\n  if (!targets) targets = ['injected', 'frame']\n  if (!options) options = {}\n\n  targets = [].concat(targets)\n\n  targets.forEach(t => {\n    if (t.startsWith('alchemy') && !options.alchemyId) throw new Error('Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: \\'123abc\\' }')\n    if (t.startsWith('infura') && !options.infuraId) throw new Error('Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: \\'123abc\\' }')\n  })\n\n  const sets = presets(options)\n\n  return provider(connections, resolve(targets, sets), options)\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAEpC,MAAMG,QAAQ,GAAG;EACfC,QAAQ,EAAE,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACD,QAAQ,KAAK,WAAW,GAAGC,MAAM,CAACD,QAAQ,GAAG,IAAI;EAC1GE,IAAI,EAAE,OAAOD,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,IAAI,KAAK,WAAW,GAAGD,MAAM,CAACC,IAAI,CAACC,eAAe,GAAG;AAC5G,CAAC;AACD,MAAMC,EAAE,GAAG,OAAOH,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACI,SAAS,KAAK,WAAW,GAAGJ,MAAM,CAACI,SAAS,GAAG,IAAI;AAC7G,MAAMC,GAAG,GAAG,OAAOL,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACM,cAAc,KAAK,WAAW,GAAGN,MAAM,CAACM,cAAc,GAAG,IAAI;AAExH,IAAIR,QAAQ,CAACC,QAAQ,EAAED,QAAQ,CAACC,QAAQ,CAACQ,YAAY,GAAG,IAAI;AAE5D,MAAMC,WAAW,GAAG;EAClBV,QAAQ,EAAEA,QAAQ,CAACC,QAAQ,IAAIJ,OAAO,CAAC,wBAAwB,CAAC,CAACG,QAAQ,CAACG,IAAI,CAAC;EAC/EQ,GAAG,EAAEd,OAAO,CAAC,2BAA2B,CAAC,CAAC,+CAA+C,CAAC;EAC1FQ,EAAE,EAAER,OAAO,CAAC,kBAAkB,CAAC,CAACQ,EAAE,CAAC;EACnCO,IAAI,EAAEf,OAAO,CAAC,oBAAoB,CAAC,CAACU,GAAG;AACzC,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG,CAACC,OAAO,EAAEC,OAAO,KAAK;EACrC,IAAID,OAAO,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,CAACC,OAAO,EAAE;IACjFA,OAAO,GAAGD,OAAO;IACjBA,OAAO,GAAGI,SAAS;EACrB;EACA,IAAI,CAACJ,OAAO,EAAEA,OAAO,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC;EAC7C,IAAI,CAACC,OAAO,EAAEA,OAAO,GAAG,CAAC,CAAC;EAE1BD,OAAO,GAAG,EAAE,CAACK,MAAM,CAACL,OAAO,CAAC;EAE5BA,OAAO,CAACM,OAAO,CAACC,CAAC,IAAI;IACnB,IAAIA,CAAC,CAACC,UAAU,CAAC,SAAS,CAAC,IAAI,CAACP,OAAO,CAACQ,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,4HAA4H,CAAC;IAChM,IAAIH,CAAC,CAACC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAACP,OAAO,CAACU,QAAQ,EAAE,MAAM,IAAID,KAAK,CAAC,yHAAyH,CAAC;EAC7L,CAAC,CAAC;EAEF,MAAME,IAAI,GAAG5B,OAAO,CAACiB,OAAO,CAAC;EAE7B,OAAOlB,QAAQ,CAACY,WAAW,EAAEd,OAAO,CAACmB,OAAO,EAAEY,IAAI,CAAC,EAAEX,OAAO,CAAC;AAC/D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}