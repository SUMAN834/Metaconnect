{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = void 0;\nconst signer_1 = require(\"./signer\");\nconst utils_1 = require(\"./utils\");\nconst ethers_1 = require(\"ethers\");\nconst adapters_1 = require(\"./adapters\");\nclass Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {\n  constructor(privateKey, providerL2, providerL1) {\n    super(privateKey, providerL2);\n    if (this.provider != null) {\n      const chainId = this.getChainId();\n      // @ts-ignore\n      this.eip712 = new signer_1.EIP712Signer(this, chainId);\n    }\n    this.providerL1 = providerL1;\n  }\n  _providerL1() {\n    if (this.providerL1 == null) {\n      throw new Error('L1 provider missing: use `connectToL1` to specify');\n    }\n    return this.providerL1;\n  }\n  _providerL2() {\n    return this.provider;\n  }\n  _signerL1() {\n    return this.ethWallet();\n  }\n  _signerL2() {\n    return this;\n  }\n  ethWallet() {\n    return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());\n  }\n  // an alias with a better name\n  async getNonce(blockTag) {\n    return await this.getTransactionCount(blockTag);\n  }\n  connect(provider) {\n    return new Wallet(this._signingKey(), provider, this.providerL1);\n  }\n  connectToL1(provider) {\n    return new Wallet(this._signingKey(), this.provider, provider);\n  }\n  static fromMnemonic(mnemonic, path, wordlist) {\n    const wallet = super.fromMnemonic(mnemonic, path, wordlist);\n    return new Wallet(wallet._signingKey());\n  }\n  static async fromEncryptedJson(json, password, callback) {\n    const wallet = await super.fromEncryptedJson(json, password, callback);\n    return new Wallet(wallet._signingKey());\n  }\n  static fromEncryptedJsonSync(json, password) {\n    const wallet = super.fromEncryptedJsonSync(json, password);\n    return new Wallet(wallet._signingKey());\n  }\n  static createRandom(options) {\n    const wallet = super.createRandom(options);\n    return new Wallet(wallet._signingKey());\n  }\n  async populateTransaction(transaction) {\n    var _a, _b;\n    if (transaction.type == null && transaction.customData == null) {\n      // use legacy txs by default\n      transaction.type = 0;\n    }\n    transaction = await super.populateTransaction(transaction);\n    if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n      return transaction;\n    }\n    transaction.type = utils_1.EIP712_TX_TYPE;\n    (_a = transaction.value) !== null && _a !== void 0 ? _a : transaction.value = 0;\n    (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.data = '0x';\n    transaction.customData = this._fillCustomData(transaction.customData);\n    transaction.gasPrice = await this.provider.getGasPrice();\n    return transaction;\n  }\n  async signTransaction(transaction) {\n    var _a;\n    if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n      if (transaction.type == 2 && transaction.maxFeePerGas == null) {\n        transaction.maxFeePerGas = await this.provider.getGasPrice();\n      }\n      return await super.signTransaction(transaction);\n    } else {\n      (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = this.address;\n      if (transaction.from.toLowerCase() != this.address.toLowerCase()) {\n        throw new Error('Transaction `from` address mismatch');\n      }\n      transaction.customData.customSignature = await this.eip712.sign(transaction);\n      return (0, utils_1.serialize)(transaction);\n    }\n  }\n  async sendTransaction(transaction) {\n    // Typescript isn't smart enough to recognise that wallet.sendTransaction\n    // calls provider.sendTransaction which returns our extended type and not ethers' one.\n    return await super.sendTransaction(transaction);\n  }\n}\nexports.Wallet = Wallet;","map":{"version":3,"names":["Object","defineProperty","exports","value","Wallet","signer_1","require","utils_1","ethers_1","adapters_1","AdapterL2","AdapterL1","ethers","constructor","privateKey","providerL2","providerL1","provider","chainId","getChainId","eip712","EIP712Signer","_providerL1","Error","_providerL2","_signerL1","ethWallet","_signerL2","_signingKey","getNonce","blockTag","getTransactionCount","connect","connectToL1","fromMnemonic","mnemonic","path","wordlist","wallet","fromEncryptedJson","json","password","callback","fromEncryptedJsonSync","createRandom","options","populateTransaction","transaction","_a","_b","type","customData","EIP712_TX_TYPE","data","_fillCustomData","gasPrice","getGasPrice","signTransaction","maxFeePerGas","from","address","toLowerCase","customSignature","sign","serialize","sendTransaction"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/zksync-web3/build/src/wallet.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wallet = void 0;\nconst signer_1 = require(\"./signer\");\nconst utils_1 = require(\"./utils\");\nconst ethers_1 = require(\"ethers\");\nconst adapters_1 = require(\"./adapters\");\nclass Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {\n    constructor(privateKey, providerL2, providerL1) {\n        super(privateKey, providerL2);\n        if (this.provider != null) {\n            const chainId = this.getChainId();\n            // @ts-ignore\n            this.eip712 = new signer_1.EIP712Signer(this, chainId);\n        }\n        this.providerL1 = providerL1;\n    }\n    _providerL1() {\n        if (this.providerL1 == null) {\n            throw new Error('L1 provider missing: use `connectToL1` to specify');\n        }\n        return this.providerL1;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this.ethWallet();\n    }\n    _signerL2() {\n        return this;\n    }\n    ethWallet() {\n        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    connect(provider) {\n        return new Wallet(this._signingKey(), provider, this.providerL1);\n    }\n    connectToL1(provider) {\n        return new Wallet(this._signingKey(), this.provider, provider);\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        const wallet = super.fromMnemonic(mnemonic, path, wordlist);\n        return new Wallet(wallet._signingKey());\n    }\n    static async fromEncryptedJson(json, password, callback) {\n        const wallet = await super.fromEncryptedJson(json, password, callback);\n        return new Wallet(wallet._signingKey());\n    }\n    static fromEncryptedJsonSync(json, password) {\n        const wallet = super.fromEncryptedJsonSync(json, password);\n        return new Wallet(wallet._signingKey());\n    }\n    static createRandom(options) {\n        const wallet = super.createRandom(options);\n        return new Wallet(wallet._signingKey());\n    }\n    async populateTransaction(transaction) {\n        var _a, _b;\n        if (transaction.type == null && transaction.customData == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        transaction = await super.populateTransaction(transaction);\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return transaction;\n        }\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        (_a = transaction.value) !== null && _a !== void 0 ? _a : (transaction.value = 0);\n        (_b = transaction.data) !== null && _b !== void 0 ? _b : (transaction.data = '0x');\n        transaction.customData = this._fillCustomData(transaction.customData);\n        transaction.gasPrice = await this.provider.getGasPrice();\n        return transaction;\n    }\n    async signTransaction(transaction) {\n        var _a;\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            if (transaction.type == 2 && transaction.maxFeePerGas == null) {\n                transaction.maxFeePerGas = await this.provider.getGasPrice();\n            }\n            return await super.signTransaction(transaction);\n        }\n        else {\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = this.address);\n            if (transaction.from.toLowerCase() != this.address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            return (0, utils_1.serialize)(transaction);\n        }\n    }\n    async sendTransaction(transaction) {\n        // Typescript isn't smart enough to recognise that wallet.sendTransaction\n        // calls provider.sendTransaction which returns our extended type and not ethers' one.\n        return (await super.sendTransaction(transaction));\n    }\n}\nexports.Wallet = Wallet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}