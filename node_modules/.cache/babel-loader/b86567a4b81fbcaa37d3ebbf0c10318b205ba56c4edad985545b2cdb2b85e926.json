{"ast":null,"code":"import Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport { constants, BigNumber, utils, Contract } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { aH as ListingNotFoundError, aI as WrongListingTypeError, bW as resolveAddress, em as mapOffer, eb as buildTransactionFunction, a as fetchCurrencyValue, en as fetchTokenMetadataForContract, eo as isTokenApprovedForTransfer, c3 as InterfaceId_IERC721, c4 as InterfaceId_IERC1155, ep as validateNewListingParam, eq as handleTokenApproval, n as normalizePriceValue, ak as Transaction, c as cleanCurrencyAddress, i as isNativeToken, s as setErc20Allowance, y as ContractEncoder, af as ContractEvents, f as fetchCurrencyMetadata, er as isWinningBid, aF as AuctionAlreadyStartedError, aL as AuctionHasNotEndedError } from './smart-contract-40473f5e.browser.esm.js';\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.read(\"offers\", [listingId, await resolveAddress(address)]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.direct.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n    }\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n    let expirationTimestamp = constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n      overrides\n    });\n  });\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, addressOfOfferor) => {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const resolvedAddress = await resolveAddress(addressOfOfferor);\n    const offer = await this.contractWrapper.read(\"offers\", [listingId, resolvedAddress]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n    });\n  });\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buy\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.buyoutPrice,\n      // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice, await resolveAddress(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelDirectListing\",\n      args: [listingId]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvents = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvents.getEvents(\"AuctionClosed\");\n    const auction = closedAuctions.find(a => a.data.listingId.eq(BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedReservePrice,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.auction.createListingsBatch(auctions);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n    return this.makeBid.prepare(listingId, utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (listingId, pricePerToken) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n    if (normalizedPrice.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.read(\"bidBufferBps\", []);\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n      invariant(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n    }\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, constants.MaxUint256],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"closeAuction\",\n      args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n    });\n  });\n\n  /**\n   * Close the Auction for the buyer or the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  closeListing = /* @__PURE__ */buildTransactionFunction(async (listingId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [BigNumber.from(listingId), closeFor]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.executeSale(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   */\n  executeSale = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      const winningBid = await this.getWinningBid(listingId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n      const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [closeForSeller, closeForBuyer]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n    });\n  });\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), this.validateListing(BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\nexport { ListingType as L, MarketplaceDirect as M, MarketplaceAuction as a };","map":{"version":3,"names":["Erc1155Abi","ERC165Abi","Erc721Abi","constants","BigNumber","utils","Contract","invariant","aH","ListingNotFoundError","aI","WrongListingTypeError","bW","resolveAddress","em","mapOffer","eb","buildTransactionFunction","a","fetchCurrencyValue","en","fetchTokenMetadataForContract","eo","isTokenApprovedForTransfer","c3","InterfaceId_IERC721","c4","InterfaceId_IERC1155","ep","validateNewListingParam","eq","handleTokenApproval","n","normalizePriceValue","ak","Transaction","c","cleanCurrencyAddress","i","isNativeToken","s","setErc20Allowance","y","ContractEncoder","af","ContractEvents","f","fetchCurrencyMetadata","er","isWinningBid","aF","AuctionAlreadyStartedError","aL","AuctionHasNotEndedError","ListingType","MarketplaceDirect","constructor","contractWrapper","storage","getAddress","address","getListing","listingId","listing","read","assetContract","AddressZero","toString","listingType","Direct","mapListing","getActiveOffer","validateListing","from","isAddress","offers","offeror","undefined","getProvider","createListing","resolvedAssetAddress","assetContractAddress","resolvedCurrencyAddress","currencyContractAddress","tokenId","getSignerAddress","normalizedPricePerToken","buyoutPricePerToken","listingStartTime","Math","floor","startTimestamp","getTime","block","getBlock","blockTime","timestamp","fromContractWrapper","method","args","currencyToAccept","quantityToList","quantity","reservePricePerToken","secondsUntilEndTime","listingDurationInSeconds","startTime","parse","receipt","event","parseLogs","logs","id","createListingsBatch","listings","data","Promise","all","map","prepare","tx","encode","events","makeOffer","quantityDesired","pricePerToken","expirationDate","Error","normalizedPrice","err","console","error","value","mul","overrides","getCallOverrides","expirationTimestamp","MaxUint256","acceptOffer","addressOfOfferor","resolvedAddress","offer","currency","buyoutListing","receiver","valid","isStillValidListing","buyFor","buyoutPrice","updateListing","startTimeInSeconds","secondsUntilEnd","cancelListing","buyoutCurrencyValuePerToken","asset","endTime","sellerAddress","tokenOwner","type","approved","provider","erc165","isERC721","supportsInterface","isERC1155","owner","ownerOf","e","toLowerCase","balance","balanceOf","gte","MarketplaceAuction","encoder","Auction","getWinningBid","getWinner","now","Date","endTimeInEpochSeconds","gt","contractEvents","closedAuctions","getEvents","auction","find","winningBidder","normalizedReservePrice","currencyMetadata","makeBid","formatUnits","decimals","bidBuffer","winningBid","isWinner","tokenPrice","reservePrice","startTimeInEpochSeconds","closeListing","closeFor","message","includes","executeSale","closeForSeller","closeForBuyer","buyerAddress","getBidBufferBps","getMinimumNextBid","currentBidBufferBps","currentBidOrReservePrice","currencyValue","minimumNextBid","add","div","reservePriceCurrencyValuePerToken","L","M"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-635cfe91.browser.esm.js"],"sourcesContent":["import Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport { constants, BigNumber, utils, Contract } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { aH as ListingNotFoundError, aI as WrongListingTypeError, bW as resolveAddress, em as mapOffer, eb as buildTransactionFunction, a as fetchCurrencyValue, en as fetchTokenMetadataForContract, eo as isTokenApprovedForTransfer, c3 as InterfaceId_IERC721, c4 as InterfaceId_IERC1155, ep as validateNewListingParam, eq as handleTokenApproval, n as normalizePriceValue, ak as Transaction, c as cleanCurrencyAddress, i as isNativeToken, s as setErc20Allowance, y as ContractEncoder, af as ContractEvents, f as fetchCurrencyMetadata, er as isWinningBid, aF as AuctionAlreadyStartedError, aL as AuctionHasNotEndedError } from './smart-contract-40473f5e.browser.esm.js';\n\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.read(\"offers\", [listingId, await resolveAddress(address)]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.direct.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n    }\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n    let expirationTimestamp = constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n      overrides\n    });\n  });\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, addressOfOfferor) => {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const resolvedAddress = await resolveAddress(addressOfOfferor);\n    const offer = await this.contractWrapper.read(\"offers\", [listingId, resolvedAddress]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n    });\n  });\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buy\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.buyoutPrice,\n      // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice, await resolveAddress(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelDirectListing\",\n      args: [listingId]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvents = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvents.getEvents(\"AuctionClosed\");\n    const auction = closedAuctions.find(a => a.data.listingId.eq(BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedReservePrice,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.auction.createListingsBatch(auctions);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n    return this.makeBid.prepare(listingId, utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (listingId, pricePerToken) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n    if (normalizedPrice.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.read(\"bidBufferBps\", []);\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n      invariant(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n    }\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, constants.MaxUint256],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"closeAuction\",\n      args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n    });\n  });\n\n  /**\n   * Close the Auction for the buyer or the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  closeListing = /* @__PURE__ */buildTransactionFunction(async (listingId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [BigNumber.from(listingId), closeFor]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.executeSale(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   */\n  executeSale = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      const winningBid = await this.getWinningBid(listingId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n      const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [closeForSeller, closeForBuyer]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n    });\n  });\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), this.validateListing(BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\n\nexport { ListingType as L, MarketplaceDirect as M, MarketplaceAuction as a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}