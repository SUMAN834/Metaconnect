{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapProvider = void 0;\nconst contracts_1 = require(\"@account-abstraction/contracts\");\nconst SimpleAccountAPI_1 = require(\"./SimpleAccountAPI\");\nconst ERC4337EthersProvider_1 = require(\"./ERC4337EthersProvider\");\nconst HttpRpcClient_1 = require(\"./HttpRpcClient\");\nconst DeterministicDeployer_1 = require(\"./DeterministicDeployer\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)('aa.wrapProvider');\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider the normal provider\n * @param config see ClientConfig for more info\n * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nasync function wrapProvider(originalProvider, config, originalSigner = originalProvider.getSigner()) {\n  const entryPoint = contracts_1.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  // Initial SimpleAccount instance is not deployed and exists just for the interface\n  const detDeployer = new DeterministicDeployer_1.DeterministicDeployer(originalProvider);\n  const SimpleAccountFactory = await detDeployer.deterministicDeploy(new contracts_1.SimpleAccountFactory__factory(), 0, [entryPoint.address]);\n  const smartAccountAPI = new SimpleAccountAPI_1.SimpleAccountAPI({\n    provider: originalProvider,\n    entryPointAddress: entryPoint.address,\n    owner: originalSigner,\n    factoryAddress: SimpleAccountFactory,\n    paymasterAPI: config.paymasterAPI\n  });\n  debug('config=', config);\n  const chainId = await originalProvider.getNetwork().then(net => net.chainId);\n  const httpRpcClient = new HttpRpcClient_1.HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId);\n  return await new ERC4337EthersProvider_1.ERC4337EthersProvider(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI).init();\n}\nexports.wrapProvider = wrapProvider;","map":{"version":3,"names":["contracts_1","require","SimpleAccountAPI_1","ERC4337EthersProvider_1","HttpRpcClient_1","DeterministicDeployer_1","debug_1","__importDefault","debug","default","wrapProvider","originalProvider","config","originalSigner","getSigner","entryPoint","EntryPoint__factory","connect","entryPointAddress","detDeployer","DeterministicDeployer","SimpleAccountFactory","deterministicDeploy","SimpleAccountFactory__factory","address","smartAccountAPI","SimpleAccountAPI","provider","owner","factoryAddress","paymasterAPI","chainId","getNetwork","then","net","httpRpcClient","HttpRpcClient","bundlerUrl","ERC4337EthersProvider","init","exports"],"sources":["../../src/Provider.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAEA,MAAAA,WAAA,GAAAC,OAAA;AAGA,MAAAC,kBAAA,GAAAD,OAAA;AACA,MAAAE,uBAAA,GAAAF,OAAA;AACA,MAAAG,eAAA,GAAAH,OAAA;AACA,MAAAI,uBAAA,GAAAJ,OAAA;AAEA,MAAAK,OAAA,GAAAC,eAAA,CAAAN,OAAA;AAEA,MAAMO,KAAK,GAAG,IAAAF,OAAA,CAAAG,OAAK,EAAC,iBAAiB,CAAC;AAEtC;;;;;;AAMO,eAAeC,YAAYA,CAChCC,gBAAiC,EACjCC,MAAoB,EACpBC,cAAA,GAAyBF,gBAAgB,CAACG,SAAS,EAAE;EAErD,MAAMC,UAAU,GAAGf,WAAA,CAAAgB,mBAAmB,CAACC,OAAO,CAACL,MAAM,CAACM,iBAAiB,EAAEP,gBAAgB,CAAC;EAC1F;EACA,MAAMQ,WAAW,GAAG,IAAId,uBAAA,CAAAe,qBAAqB,CAACT,gBAAgB,CAAC;EAC/D,MAAMU,oBAAoB,GAAG,MAAMF,WAAW,CAACG,mBAAmB,CAAC,IAAItB,WAAA,CAAAuB,6BAA6B,EAAE,EAAE,CAAC,EAAE,CAACR,UAAU,CAACS,OAAO,CAAC,CAAC;EAChI,MAAMC,eAAe,GAAG,IAAIvB,kBAAA,CAAAwB,gBAAgB,CAAC;IAC3CC,QAAQ,EAAEhB,gBAAgB;IAC1BO,iBAAiB,EAAEH,UAAU,CAACS,OAAO;IACrCI,KAAK,EAAEf,cAAc;IACrBgB,cAAc,EAAER,oBAAoB;IACpCS,YAAY,EAAElB,MAAM,CAACkB;GACtB,CAAC;EACFtB,KAAK,CAAC,SAAS,EAAEI,MAAM,CAAC;EACxB,MAAMmB,OAAO,GAAG,MAAMpB,gBAAgB,CAACqB,UAAU,EAAE,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,OAAO,CAAC;EAC5E,MAAMI,aAAa,GAAG,IAAI/B,eAAA,CAAAgC,aAAa,CAACxB,MAAM,CAACyB,UAAU,EAAEzB,MAAM,CAACM,iBAAiB,EAAEa,OAAO,CAAC;EAC7F,OAAO,MAAM,IAAI5B,uBAAA,CAAAmC,qBAAqB,CACpCP,OAAO,EACPnB,MAAM,EACNC,cAAc,EACdF,gBAAgB,EAChBwB,aAAa,EACbpB,UAAU,EACVU,eAAe,CAChB,CAACc,IAAI,EAAE;AACV;AA5BAC,OAAA,CAAA9B,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}