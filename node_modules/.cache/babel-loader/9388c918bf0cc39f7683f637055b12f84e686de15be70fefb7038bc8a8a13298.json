{"ast":null,"code":"import { a9 as Erc1155, eb as buildTransactionFunction } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this2.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\nexport { StandardErc1155 as S };","map":{"version":3,"names":["a9","Erc1155","eb","buildTransactionFunction","StandardErc1155","chainId","_chainId","constructor","contractWrapper","storage","erc1155","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","get","tokenId","totalSupply","balanceOf","balance","isApproved","operator","transfer","_this","to","amount","data","arguments","length","undefined","prepare","setApprovalForAll","approved","airdrop","_this2","addresses","fromAddress","S"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-29044916.browser.esm.js"],"sourcesContent":["import { a9 as Erc1155, eb as buildTransactionFunction } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\n    };\n  })());\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      return _this2.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\n    };\n  })());\n}\n\nexport { StandardErc1155 as S };\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,OAAO,EAAEC,EAAE,IAAIC,wBAAwB,QAAQ,0CAA0C;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EACpB,IAAIC,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACC,QAAQ;EACtB;EACAC,WAAWA,CAACC,eAAe,EAAEC,OAAO,EAAEJ,OAAO,EAAE;IAC7C,IAAI,CAACG,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAG,IAAIT,OAAO,CAAC,IAAI,CAACO,eAAe,EAAE,IAAI,CAACC,OAAO,EAAEJ,OAAO,CAAC;IACvE,IAAI,CAACC,QAAQ,GAAGD,OAAO;EACzB;;EAEA;AACF;AACA;EACEM,gBAAgBA,CAACC,OAAO,EAAE;IACxB,IAAI,CAACJ,eAAe,CAACK,sBAAsB,CAACD,OAAO,CAAC;EACtD;EACAE,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACN,eAAe,CAACO,OAAO;EACrC;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,GAAGA,CAACC,OAAO,EAAE;IACjB,OAAO,IAAI,CAACP,OAAO,CAACM,GAAG,CAACC,OAAO,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAACD,OAAO,EAAE;IACzB,OAAO,IAAI,CAACP,OAAO,CAACQ,WAAW,CAACD,OAAO,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAME,SAASA,CAACJ,OAAO,EAAEE,OAAO,EAAE;IAChC,OAAO,IAAI,CAACP,OAAO,CAACS,SAAS,CAACJ,OAAO,EAAEE,OAAO,CAAC;EACjD;;EAEA;AACF;AACA;EACE,MAAMG,OAAOA,CAACH,OAAO,EAAE;IACrB,OAAO,IAAI,CAACP,OAAO,CAACU,OAAO,CAACH,OAAO,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMI,UAAUA,CAACN,OAAO,EAAEO,QAAQ,EAAE;IAClC,OAAO,IAAI,CAACZ,OAAO,CAACW,UAAU,CAACN,OAAO,EAAEO,QAAQ,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,GAAG,eAAepB,wBAAwB,CAAC,CAAC,MAAM;IACxD,IAAIqB,KAAK,GAAG,IAAI;IAChB,OAAO,gBAAgBC,EAAE,EAAER,OAAO,EAAES,MAAM,EAAE;MAC1C,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClF,OAAOJ,KAAK,CAACd,OAAO,CAACa,QAAQ,CAACQ,OAAO,CAACN,EAAE,EAAER,OAAO,EAAES,MAAM,EAAEC,IAAI,CAAC;IAClE,CAAC;EACH,CAAC,EAAE,CAAC,CAAC;;EAEL;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiB,GAAG,eAAe7B,wBAAwB,CAAC,OAAOmB,QAAQ,EAAEW,QAAQ,KAAK;IACxF,OAAO,IAAI,CAACvB,OAAO,CAACsB,iBAAiB,CAACD,OAAO,CAACT,QAAQ,EAAEW,QAAQ,CAAC;EACnE,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,GAAG,eAAe/B,wBAAwB,CAAC,CAAC,MAAM;IACvD,IAAIgC,MAAM,GAAG,IAAI;IACjB,OAAO,gBAAgBlB,OAAO,EAAEmB,SAAS,EAAEC,WAAW,EAAE;MACtD,IAAIV,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClF,OAAOO,MAAM,CAACzB,OAAO,CAACwB,OAAO,CAACH,OAAO,CAACd,OAAO,EAAEmB,SAAS,EAAEC,WAAW,EAAEV,IAAI,CAAC;IAC9E,CAAC;EACH,CAAC,EAAE,CAAC,CAAC;AACP;AAEA,SAASvB,eAAe,IAAIkC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}