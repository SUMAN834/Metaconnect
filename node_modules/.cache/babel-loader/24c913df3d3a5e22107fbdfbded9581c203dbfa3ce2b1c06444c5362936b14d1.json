{"ast":null,"code":"import { DoubleSide } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nclass USDZExporter {\n  async parse(scene) {\n    const files = {};\n    const modelFileName = 'model.usda';\n\n    // model file should be first in USDZ archive so we init it here\n    files[modelFileName] = null;\n    let output = buildHeader();\n    const materials = {};\n    const textures = {};\n    scene.traverseVisible(object => {\n      if (object.isMesh) {\n        const geometry = object.geometry;\n        const material = object.material;\n        if (material.isMeshStandardMaterial) {\n          const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n          if (!(geometryFileName in files)) {\n            const meshObject = buildMeshObject(geometry);\n            files[geometryFileName] = buildUSDFileAsString(meshObject);\n          }\n          if (!(material.uuid in materials)) {\n            materials[material.uuid] = material;\n          }\n          output += buildXform(object, geometry, material);\n        } else {\n          console.warn('THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)', object);\n        }\n      } else if (object.isCamera) {\n        output += buildCamera(object);\n      }\n    });\n    output += buildMaterials(materials, textures);\n    files[modelFileName] = fflate.strToU8(output);\n    output = null;\n    for (const id in textures) {\n      const texture = textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n      files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n    }\n\n    // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n    let offset = 0;\n    for (const filename in files) {\n      const file = files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n      offset = file.length;\n    }\n    return fflate.zipSync(files, {\n      level: 0\n    });\n  }\n}\nfunction imageToCanvas(image, color) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const scale = 1024 / Math.max(image.width, image.height);\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width * Math.min(1, scale);\n    canvas.height = image.height * Math.min(1, scale);\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    if (color !== undefined) {\n      const hex = parseInt(color, 16);\n      const r = (hex >> 16 & 255) / 255;\n      const g = (hex >> 8 & 255) / 255;\n      const b = (hex & 255) / 255;\n      const imagedata = context.getImageData(0, 0, canvas.width, canvas.height);\n      const data = imagedata.data;\n      for (let i = 0; i < data.length; i += 4) {\n        data[i + 0] = data[i + 0] * r;\n        data[i + 1] = data[i + 1] * g;\n        data[i + 2] = data[i + 2] * b;\n      }\n      context.putImageData(imagedata, 0, 0);\n    }\n    return canvas;\n  }\n}\n\n//\n\nconst PRECISION = 7;\nfunction buildHeader() {\n  return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n}\nfunction buildUSDFileAsString(dataToInsert) {\n  let output = buildHeader();\n  output += dataToInsert;\n  return fflate.strToU8(output);\n}\n\n// Xform\n\nfunction buildXform(object, geometry, material) {\n  const name = 'Object_' + object.id;\n  const transform = buildMatrix(object.matrixWorld);\n  if (object.matrixWorld.determinant() < 0) {\n    console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n  }\n  return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    rel material:binding = </Materials/Material_${material.id}>\n}\n\n`;\n}\nfunction buildMatrix(matrix) {\n  const array = matrix.elements;\n  return `( ${buildMatrixRow(array, 0)}, ${buildMatrixRow(array, 4)}, ${buildMatrixRow(array, 8)}, ${buildMatrixRow(array, 12)} )`;\n}\nfunction buildMatrixRow(array, offset) {\n  return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n}\n\n// Mesh\n\nfunction buildMeshObject(geometry) {\n  const mesh = buildMesh(geometry);\n  return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n}\nfunction buildMesh(geometry) {\n  const name = 'Geometry';\n  const attributes = geometry.attributes;\n  const count = attributes.position.count;\n  return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n}\nfunction buildMeshVertexCount(geometry) {\n  const count = geometry.index !== null ? geometry.index.count : geometry.attributes.position.count;\n  return Array(count / 3).fill(3).join(', ');\n}\nfunction buildMeshVertexIndices(geometry) {\n  const index = geometry.index;\n  const array = [];\n  if (index !== null) {\n    for (let i = 0; i < index.count; i++) {\n      array.push(index.getX(i));\n    }\n  } else {\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n  }\n  return array.join(', ');\n}\nfunction buildVector3Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: Normals missing.');\n    return Array(count).fill('(0, 0, 0)').join(', ');\n  }\n  const array = [];\n  for (let i = 0; i < attribute.count; i++) {\n    const x = attribute.getX(i);\n    const y = attribute.getY(i);\n    const z = attribute.getZ(i);\n    array.push(`(${x.toPrecision(PRECISION)}, ${y.toPrecision(PRECISION)}, ${z.toPrecision(PRECISION)})`);\n  }\n  return array.join(', ');\n}\nfunction buildVector2Array(attribute, count) {\n  if (attribute === undefined) {\n    console.warn('USDZExporter: UVs missing.');\n    return Array(count).fill('(0, 0)').join(', ');\n  }\n  const array = [];\n  for (let i = 0; i < attribute.count; i++) {\n    const x = attribute.getX(i);\n    const y = attribute.getY(i);\n    array.push(`(${x.toPrecision(PRECISION)}, ${1 - y.toPrecision(PRECISION)})`);\n  }\n  return array.join(', ');\n}\n\n// Materials\n\nfunction buildMaterials(materials, textures) {\n  const array = [];\n  for (const uuid in materials) {\n    const material = materials[uuid];\n    array.push(buildMaterial(material, textures));\n  }\n  return `def \"Materials\"\n{\n${array.join('')}\n}\n\n`;\n}\nfunction buildMaterial(material, textures) {\n  // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n  const pad = '            ';\n  const inputs = [];\n  const samplers = [];\n  function buildTexture(texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    textures[id] = texture;\n    return `\n        def Shader \"Transform2d_${mapType}\" (\n            sdrMetadata = {\n                string role = \"math\"\n            }\n        )\n        {\n            uniform token info:id = \"UsdTransform2d\"\n            float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n            float2 inputs:scale = ${buildVector2(texture.repeat)}\n            float2 inputs:translation = ${buildVector2(texture.offset)}\n            float2 outputs:result\n        }\n\n        def Shader \"Texture_${texture.id}_${mapType}\"\n        {\n            uniform token info:id = \"UsdUVTexture\"\n            asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n            float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n            token inputs:wrapS = \"repeat\"\n            token inputs:wrapT = \"repeat\"\n            float outputs:r\n            float outputs:g\n            float outputs:b\n            float3 outputs:rgb\n            ${material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : ''}\n        }`;\n  }\n  if (material.side === DoubleSide) {\n    console.warn('THREE.USDZExporter: USDZ does not support double sided materials', material);\n  }\n  if (material.map !== null) {\n    inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n    if (material.transparent) {\n      inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`);\n    } else if (material.alphaTest > 0.0) {\n      inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`);\n      inputs.push(`${pad}float inputs:opacityThreshold = ${material.alphaTest}`);\n    }\n    samplers.push(buildTexture(material.map, 'diffuse', material.color));\n  } else {\n    inputs.push(`${pad}color3f inputs:diffuseColor = ${buildColor(material.color)}`);\n  }\n  if (material.emissiveMap !== null) {\n    inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n    samplers.push(buildTexture(material.emissiveMap, 'emissive'));\n  } else if (material.emissive.getHex() > 0) {\n    inputs.push(`${pad}color3f inputs:emissiveColor = ${buildColor(material.emissive)}`);\n  }\n  if (material.normalMap !== null) {\n    inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n    samplers.push(buildTexture(material.normalMap, 'normal'));\n  }\n  if (material.aoMap !== null) {\n    inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n    samplers.push(buildTexture(material.aoMap, 'occlusion'));\n  }\n  if (material.roughnessMap !== null && material.roughness === 1) {\n    inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n    samplers.push(buildTexture(material.roughnessMap, 'roughness'));\n  } else {\n    inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n  }\n  if (material.metalnessMap !== null && material.metalness === 1) {\n    inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n    samplers.push(buildTexture(material.metalnessMap, 'metallic'));\n  } else {\n    inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n  }\n  if (material.alphaMap !== null) {\n    inputs.push(`${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>`);\n    inputs.push(`${pad}float inputs:opacityThreshold = 0.0001`);\n    samplers.push(buildTexture(material.alphaMap, 'opacity'));\n  } else {\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n  }\n  if (material.isMeshPhysicalMaterial) {\n    inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n    inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n    inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n  }\n  return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n\n${samplers.join('\\n')}\n\n    }\n`;\n}\nfunction buildColor(color) {\n  return `(${color.r}, ${color.g}, ${color.b})`;\n}\nfunction buildVector2(vector) {\n  return `(${vector.x}, ${vector.y})`;\n}\nfunction buildCamera(camera) {\n  const name = camera.name ? camera.name : 'Camera_' + camera.id;\n  const transform = buildMatrix(camera.matrixWorld);\n  if (camera.matrixWorld.determinant() < 0) {\n    console.warn('THREE.USDZExporter: USDZ does not support negative scales', camera);\n  }\n  if (camera.isOrthographicCamera) {\n    return `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${transform}\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\t\n\t\t\tfloat2 clippingRange = (${camera.near}, ${camera.far})\n\t\t\tfloat horizontalAperture = ${(Math.abs(camera.left) + Math.abs(camera.right)) * 10}\n\t\t\tfloat verticalAperture = ${(Math.abs(camera.top) + Math.abs(camera.bottom)) * 10}\n\t\t\ttoken projection = \"orthographic\"\n\t\t}\n\t\n\t`;\n  } else {\n    return `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${transform}\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\t\n\t\t\tfloat2 clippingRange = (${camera.near}, ${camera.far})\n\t\t\tfloat focalLength = ${camera.getFocalLength()}\n\t\t\tfloat focusDistance = ${camera.focus}\n\t\t\tfloat horizontalAperture = ${camera.getFilmWidth()}\n\t\t\ttoken projection = \"perspective\"\n\t\t\tfloat verticalAperture = ${camera.getFilmHeight()}\n\t\t}\n\t\n\t`;\n  }\n}\nexport { USDZExporter };","map":{"version":3,"names":["DoubleSide","fflate","USDZExporter","parse","scene","files","modelFileName","output","buildHeader","materials","textures","traverseVisible","object","isMesh","geometry","material","isMeshStandardMaterial","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","console","warn","isCamera","buildCamera","buildMaterials","strToU8","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","blob","Promise","resolve","toBlob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","zipSync","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","undefined","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","PRECISION","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","getX","attribute","x","y","getY","z","getZ","toPrecision","buildMaterial","pad","inputs","samplers","buildTexture","mapType","getHexString","buildVector2","repeat","transparent","alphaTest","side","map","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","alphaMap","opacity","isMeshPhysicalMaterial","clearcoat","clearcoatRoughness","ior","vector","camera","isOrthographicCamera","near","far","abs","left","right","top","bottom","getFocalLength","focus","getFilmWidth","getFilmHeight"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/three/examples/jsm/exporters/USDZExporter.js"],"sourcesContent":["import {\n\tDoubleSide\n} from 'three';\n\nimport * as fflate from '../libs/fflate.module.js';\n\nclass USDZExporter {\n\n\tasync parse( scene ) {\n\n\t\tconst files = {};\n\t\tconst modelFileName = 'model.usda';\n\n\t\t// model file should be first in USDZ archive so we init it here\n\t\tfiles[ modelFileName ] = null;\n\n\t\tlet output = buildHeader();\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tscene.traverseVisible( ( object ) => {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\tconst geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n\t\t\t\t\tif ( ! ( geometryFileName in files ) ) {\n\n\t\t\t\t\t\tconst meshObject = buildMeshObject( geometry );\n\t\t\t\t\t\tfiles[ geometryFileName ] = buildUSDFileAsString( meshObject );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( material.uuid in materials ) ) {\n\n\t\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutput += buildXform( object, geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)', object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isCamera ) {\n\t\t\t\t\n\t\t\t\toutput += buildCamera( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t\toutput += buildMaterials( materials, textures );\n\n\t\tfiles[ modelFileName ] = fflate.strToU8( output );\n\t\toutput = null;\n\n\t\tfor ( const id in textures ) {\n\n\t\t\tconst texture = textures[ id ];\n\t\t\tconst color = id.split( '_' )[ 1 ];\n\t\t\tconst isRGBA = texture.format === 1023;\n\n\t\t\tconst canvas = imageToCanvas( texture.image, color );\n\t\t\tconst blob = await new Promise( resolve => canvas.toBlob( resolve, isRGBA ? 'image/png' : 'image/jpeg', 1 ) );\n\n\t\t\tfiles[ `textures/Texture_${ id }.${ isRGBA ? 'png' : 'jpg' }` ] = new Uint8Array( await blob.arrayBuffer() );\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn fflate.zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nfunction imageToCanvas( image, color ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\tconst scale = 1024 / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\tif ( color !== undefined ) {\n\n\t\t\tconst hex = parseInt( color, 16 );\n\n\t\t\tconst r = ( hex >> 16 & 255 ) / 255;\n\t\t\tconst g = ( hex >> 8 & 255 ) / 255;\n\t\t\tconst b = ( hex & 255 ) / 255;\n\n\t\t\tconst imagedata = context.getImageData( 0, 0, canvas.width, canvas.height );\n\t\t\tconst data = imagedata.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i += 4 ) {\n\n\t\t\t\tdata[ i + 0 ] = data[ i + 0 ] * r;\n\t\t\t\tdata[ i + 1 ] = data[ i + 1 ] * g;\n\t\t\t\tdata[ i + 2 ] = data[ i + 2 ] * b;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imagedata, 0, 0 );\n\n\t\t}\n\n\t\treturn canvas;\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n\n}\n\nfunction buildUSDFileAsString( dataToInsert ) {\n\n\tlet output = buildHeader();\n\toutput += dataToInsert;\n\treturn fflate.strToU8( output );\n\n}\n\n// Xform\n\nfunction buildXform( object, geometry, material ) {\n\n\tconst name = 'Object_' + object.id;\n\tconst transform = buildMatrix( object.matrixWorld );\n\n\tif ( object.matrixWorld.determinant() < 0 ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support negative scales', object );\n\n\t}\n\n\treturn `def Xform \"${ name }\" (\n    prepend references = @./geometries/Geometry_${ geometry.id }.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${ transform }\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    rel material:binding = </Materials/Material_${ material.id }>\n}\n\n`;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${ buildMatrixRow( array, 0 ) }, ${ buildMatrixRow( array, 4 ) }, ${ buildMatrixRow( array, 8 ) }, ${ buildMatrixRow( array, 12 ) } )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${ array[ offset + 0 ] }, ${ array[ offset + 1 ] }, ${ array[ offset + 2 ] }, ${ array[ offset + 3 ] })`;\n\n}\n\n// Mesh\n\nfunction buildMeshObject( geometry ) {\n\n\tconst mesh = buildMesh( geometry );\n\treturn `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n\n}\n\nfunction buildMesh( geometry ) {\n\n\tconst name = 'Geometry';\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\treturn `\n    def Mesh \"${ name }\"\n    {\n        int[] faceVertexCounts = [${ buildMeshVertexCount( geometry ) }]\n        int[] faceVertexIndices = [${ buildMeshVertexIndices( geometry ) }]\n        normal3f[] normals = [${ buildVector3Array( attributes.normal, count )}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${ buildVector3Array( attributes.position, count )}]\n        float2[] primvars:st = [${ buildVector2Array( attributes.uv, count )}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count = geometry.index !== null ? geometry.index.count : geometry.attributes.position.count;\n\n\treturn Array( count / 3 ).fill( 3 ).join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tconst index = geometry.index;\n\tconst array = [];\n\n\tif ( index !== null ) {\n\n\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\tarray.push( index.getX( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst length = geometry.attributes.position.count;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tarray.push( i );\n\n\t\t}\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\t\tconst z = attribute.getZ( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ y.toPrecision( PRECISION ) }, ${ z.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: UVs missing.' );\n\t\treturn Array( count ).fill( '(0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ 1 - y.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\n// Materials\n\nfunction buildMaterials( materials, textures ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tarray.push( buildMaterial( material, textures ) );\n\n\t}\n\n\treturn `def \"Materials\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildMaterial( material, textures ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst pad = '            ';\n\tconst inputs = [];\n\tconst samplers = [];\n\n\tfunction buildTexture( texture, mapType, color ) {\n\n\t\tconst id = texture.id + ( color ? '_' + color.getHexString() : '' );\n\t\tconst isRGBA = texture.format === 1023;\n\n\t\ttextures[ id ] = texture;\n\n\t\treturn `\n        def Shader \"Transform2d_${ mapType }\" (\n            sdrMetadata = {\n                string role = \"math\"\n            }\n        )\n        {\n            uniform token info:id = \"UsdTransform2d\"\n            float2 inputs:in.connect = </Materials/Material_${ material.id }/uvReader_st.outputs:result>\n            float2 inputs:scale = ${ buildVector2( texture.repeat ) }\n            float2 inputs:translation = ${ buildVector2( texture.offset ) }\n            float2 outputs:result\n        }\n\n        def Shader \"Texture_${ texture.id }_${ mapType }\"\n        {\n            uniform token info:id = \"UsdUVTexture\"\n            asset inputs:file = @textures/Texture_${ id }.${ isRGBA ? 'png' : 'jpg' }@\n            float2 inputs:st.connect = </Materials/Material_${ material.id }/Transform2d_${ mapType }.outputs:result>\n            token inputs:wrapS = \"repeat\"\n            token inputs:wrapT = \"repeat\"\n            float outputs:r\n            float outputs:g\n            float outputs:b\n            float3 outputs:rgb\n            ${ material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : '' }\n        }`;\n\n\t}\n\n\n\tif ( material.side === DoubleSide ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support double sided materials', material );\n\n\t}\n\n\tif ( material.map !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:rgb>` );\n\n\t\tif ( material.transparent ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\n\t\t} else if ( material.alphaTest > 0.0 ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\t\t\tinputs.push( `${ pad }float inputs:opacityThreshold = ${material.alphaTest}` );\n\n\t\t}\n\n\t\tsamplers.push( buildTexture( material.map, 'diffuse', material.color ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor = ${ buildColor( material.color ) }` );\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor.connect = </Materials/Material_${ material.id }/Texture_${ material.emissiveMap.id }_emissive.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.emissiveMap, 'emissive' ) );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor = ${ buildColor( material.emissive ) }` );\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tinputs.push( `${ pad }normal3f inputs:normal.connect = </Materials/Material_${ material.id }/Texture_${ material.normalMap.id }_normal.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.normalMap, 'normal' ) );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:occlusion.connect = </Materials/Material_${ material.id }/Texture_${ material.aoMap.id }_occlusion.outputs:r>` );\n\n\t\tsamplers.push( buildTexture( material.aoMap, 'occlusion' ) );\n\n\t}\n\n\tif ( material.roughnessMap !== null && material.roughness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:roughness.connect = </Materials/Material_${ material.id }/Texture_${ material.roughnessMap.id }_roughness.outputs:g>` );\n\n\t\tsamplers.push( buildTexture( material.roughnessMap, 'roughness' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:roughness = ${ material.roughness }` );\n\n\t}\n\n\tif ( material.metalnessMap !== null && material.metalness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:metallic.connect = </Materials/Material_${ material.id }/Texture_${ material.metalnessMap.id }_metallic.outputs:b>` );\n\n\t\tsamplers.push( buildTexture( material.metalnessMap, 'metallic' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:metallic = ${ material.metalness }` );\n\n\t}\n\n\tif ( material.alphaMap !== null ) {\n\n\t\tinputs.push( `${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>` );\n\t\tinputs.push( `${pad}float inputs:opacityThreshold = 0.0001` );\n\n\t\tsamplers.push( buildTexture( material.alphaMap, 'opacity' ) );\n\n\t} else {\n\n\t\tinputs.push( `${pad}float inputs:opacity = ${material.opacity}` );\n\n\t}\n\n\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\tinputs.push( `${ pad }float inputs:clearcoat = ${ material.clearcoat }` );\n\t\tinputs.push( `${ pad }float inputs:clearcoatRoughness = ${ material.clearcoatRoughness }` );\n\t\tinputs.push( `${ pad }float inputs:ior = ${ material.ior }` );\n\n\t}\n\n\treturn `\n    def Material \"Material_${ material.id }\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${ inputs.join( '\\n' ) }\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n\n        token outputs:surface.connect = </Materials/Material_${ material.id }/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${ material.id }.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n\n${ samplers.join( '\\n' ) }\n\n    }\n`;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b })`;\n\n}\n\nfunction buildVector2( vector ) {\n\n\treturn `(${ vector.x }, ${ vector.y })`;\n\n}\n\n\nfunction buildCamera( camera ) {\n\n\tconst name = camera.name ? camera.name : 'Camera_' + camera.id;\n\n\tconst transform = buildMatrix( camera.matrixWorld );\n\n\tif ( camera.matrixWorld.determinant() < 0 ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support negative scales', camera );\n\n\t}\n\n\tif (camera.isOrthographicCamera) {\n\t\treturn `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${ transform }\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\t\n\t\t\tfloat2 clippingRange = (${camera.near}, ${camera.far})\n\t\t\tfloat horizontalAperture = ${(Math.abs(camera.left) + Math.abs(camera.right)) * 10}\n\t\t\tfloat verticalAperture = ${(Math.abs(camera.top) + Math.abs(camera.bottom)) * 10}\n\t\t\ttoken projection = \"orthographic\"\n\t\t}\n\t\n\t`;\n\t} else {\n\t\treturn `def Camera \"${name}\"\n\t\t{\n\t\t\tmatrix4d xformOp:transform = ${ transform }\n\t\t\tuniform token[] xformOpOrder = [\"xformOp:transform\"]\n\t\n\t\t\tfloat2 clippingRange = (${camera.near}, ${camera.far})\n\t\t\tfloat focalLength = ${camera.getFocalLength()}\n\t\t\tfloat focusDistance = ${camera.focus}\n\t\t\tfloat horizontalAperture = ${camera.getFilmWidth()}\n\t\t\ttoken projection = \"perspective\"\n\t\t\tfloat verticalAperture = ${camera.getFilmHeight()}\n\t\t}\n\t\n\t`;\n\t}\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}