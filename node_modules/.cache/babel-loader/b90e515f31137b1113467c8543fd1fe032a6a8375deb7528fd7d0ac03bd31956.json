{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\nconst constants_1 = require(\"./constants\");\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst version_1 = require(\"./version\");\nclass CoinbaseWalletSDK {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  constructor(options) {\n    var _a, _b, _c;\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    const linkAPIUrl = options.linkAPIUrl || constants_1.LINK_API_URL;\n    let uiConstructor;\n    if (!options.uiConstructor) {\n      uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._overrideIsCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    if (options.diagnosticLogger && options.eventListener) {\n      throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n    }\n    if (options.eventListener) {\n      this._diagnosticLogger = {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        log: options.eventListener.onEvent\n      };\n    } else {\n      this._diagnosticLogger = options.diagnosticLogger;\n    }\n    this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n    const url = new URL(linkAPIUrl);\n    const origin = `${url.protocol}//${url.host}`;\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n    if (this.walletExtension || this.coinbaseBrowser) {\n      return;\n    }\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl,\n      version: version_1.LIB_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      diagnosticLogger: this._diagnosticLogger,\n      reloadOnDisconnect: this._reloadOnDisconnect\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n  makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n    const extension = this.walletExtension;\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setProviderInfo(jsonRpcUrl, chainId);\n      }\n      if (this._reloadOnDisconnect === false && typeof extension.disableReloadOnDisconnect === \"function\") extension.disableReloadOnDisconnect();\n      return extension;\n    }\n    const dappBrowser = this.coinbaseBrowser;\n    if (dappBrowser) {\n      return dappBrowser;\n    }\n    const relay = this._relay;\n    if (!relay || !this._relayEventManager || !this._storage) {\n      throw new Error(\"Relay not initialized, should never happen\");\n    }\n    if (!jsonRpcUrl) relay.setConnectDisabled(true);\n    return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n      relayProvider: () => Promise.resolve(relay),\n      relayEventManager: this._relayEventManager,\n      storage: this._storage,\n      jsonRpcUrl,\n      chainId,\n      qrUrl: this.getQrUrl(),\n      diagnosticLogger: this._diagnosticLogger,\n      overrideIsMetaMask: this._overrideIsMetaMask,\n      overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n      overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n    });\n  }\n  /**\n   * Set application information\n   * @param appName Application name\n   * @param appLogoUrl Application logo image URL\n   */\n  setAppInfo(appName, appLogoUrl) {\n    var _a;\n    this._appName = appName || \"DApp\";\n    this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n    const extension = this.walletExtension;\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n    }\n  }\n  /**\n   * Disconnect. After disconnecting, this will reload the web page to ensure\n   * all potential stale state is cleared.\n   */\n  disconnect() {\n    var _a;\n    const extension = this.walletExtension;\n    if (extension) {\n      void extension.close();\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n    }\n  }\n  /**\n   * Return QR URL for mobile wallet connection, will return null if extension is installed\n   */\n  getQrUrl() {\n    var _a, _b;\n    return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n  }\n  /**\n   * Official Coinbase Wallet logo for developers to use on their frontend\n   * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n   * @param width Width of the logo (Optional)\n   * @returns SVG Data URI\n   */\n  getCoinbaseWalletLogo(type, width = 240) {\n    return (0, wallet_logo_1.walletLogo)(type, width);\n  }\n  get walletExtension() {\n    var _a;\n    return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n  }\n  get coinbaseBrowser() {\n    var _a, _b;\n    try {\n      // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n      const ethereum = (_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum;\n      if (!ethereum) {\n        return undefined;\n      }\n      if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n        return ethereum;\n      } else {\n        return undefined;\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  isCipherProvider(provider) {\n    // @ts-expect-error isCipher walletlink property\n    return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n  }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = version_1.LIB_VERSION;","map":{"version":3,"names":["Object","defineProperty","exports","value","CoinbaseWalletSDK","wallet_logo_1","require","constants_1","ScopedLocalStorage_1","CoinbaseWalletProvider_1","WalletSDKUI_1","WalletSDKRelay_1","WalletSDKRelayEventManager_1","util_1","version_1","constructor","options","_a","_b","_c","_appName","_appLogoUrl","_relay","_relayEventManager","linkAPIUrl","LINK_API_URL","uiConstructor","opts","WalletSDKUI","overrideIsMetaMask","_overrideIsMetaMask","_overrideIsCoinbaseWallet","overrideIsCoinbaseWallet","_overrideIsCoinbaseBrowser","overrideIsCoinbaseBrowser","diagnosticLogger","eventListener","Error","_diagnosticLogger","log","onEvent","_reloadOnDisconnect","reloadOnDisconnect","url","URL","origin","protocol","host","_storage","ScopedLocalStorage","setItem","VERSION","walletExtension","coinbaseBrowser","WalletSDKRelayEventManager","WalletSDKRelay","version","LIB_VERSION","darkMode","storage","relayEventManager","setAppInfo","appName","appLogoUrl","headlessMode","attachUI","makeWeb3Provider","jsonRpcUrl","chainId","extension","isCipherProvider","setProviderInfo","disableReloadOnDisconnect","dappBrowser","relay","setConnectDisabled","CoinbaseWalletProvider","relayProvider","Promise","resolve","qrUrl","getQrUrl","getFavicon","disconnect","close","resetAndReload","getQRCodeUrl","getCoinbaseWalletLogo","type","width","walletLogo","window","coinbaseWalletExtension","walletLinkExtension","ethereum","top","undefined","isCoinbaseBrowser","e","provider","isCipher"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@coinbase/wallet-sdk/dist/CoinbaseWalletSDK.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletSDK = void 0;\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\nconst constants_1 = require(\"./constants\");\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst version_1 = require(\"./version\");\nclass CoinbaseWalletSDK {\n    /**\n     * Constructor\n     * @param options Coinbase Wallet SDK constructor options\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        this._appName = \"\";\n        this._appLogoUrl = null;\n        this._relay = null;\n        this._relayEventManager = null;\n        const linkAPIUrl = options.linkAPIUrl || constants_1.LINK_API_URL;\n        let uiConstructor;\n        if (!options.uiConstructor) {\n            uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n        }\n        else {\n            uiConstructor = options.uiConstructor;\n        }\n        if (typeof options.overrideIsMetaMask === \"undefined\") {\n            this._overrideIsMetaMask = false;\n        }\n        else {\n            this._overrideIsMetaMask = options.overrideIsMetaMask;\n        }\n        this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this._overrideIsCoinbaseBrowser =\n            (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        if (options.diagnosticLogger && options.eventListener) {\n            throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n        }\n        if (options.eventListener) {\n            this._diagnosticLogger = {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                log: options.eventListener.onEvent,\n            };\n        }\n        else {\n            this._diagnosticLogger = options.diagnosticLogger;\n        }\n        this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n        const url = new URL(linkAPIUrl);\n        const origin = `${url.protocol}//${url.host}`;\n        this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n        this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n        if (this.walletExtension || this.coinbaseBrowser) {\n            return;\n        }\n        this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n        this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n            linkAPIUrl,\n            version: version_1.LIB_VERSION,\n            darkMode: !!options.darkMode,\n            uiConstructor,\n            storage: this._storage,\n            relayEventManager: this._relayEventManager,\n            diagnosticLogger: this._diagnosticLogger,\n            reloadOnDisconnect: this._reloadOnDisconnect,\n        });\n        this.setAppInfo(options.appName, options.appLogoUrl);\n        if (!!options.headlessMode)\n            return;\n        this._relay.attachUI();\n    }\n    /**\n     * Create a Web3 Provider object\n     * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n     * @param chainId Ethereum Chain ID (Default: 1)\n     * @returns A Web3 Provider\n     */\n    makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setProviderInfo(jsonRpcUrl, chainId);\n            }\n            if (this._reloadOnDisconnect === false &&\n                typeof extension.disableReloadOnDisconnect === \"function\")\n                extension.disableReloadOnDisconnect();\n            return extension;\n        }\n        const dappBrowser = this.coinbaseBrowser;\n        if (dappBrowser) {\n            return dappBrowser;\n        }\n        const relay = this._relay;\n        if (!relay || !this._relayEventManager || !this._storage) {\n            throw new Error(\"Relay not initialized, should never happen\");\n        }\n        if (!jsonRpcUrl)\n            relay.setConnectDisabled(true);\n        return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n            relayProvider: () => Promise.resolve(relay),\n            relayEventManager: this._relayEventManager,\n            storage: this._storage,\n            jsonRpcUrl,\n            chainId,\n            qrUrl: this.getQrUrl(),\n            diagnosticLogger: this._diagnosticLogger,\n            overrideIsMetaMask: this._overrideIsMetaMask,\n            overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n            overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser,\n        });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n    setAppInfo(appName, appLogoUrl) {\n        var _a;\n        this._appName = appName || \"DApp\";\n        this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setAppInfo(this._appName, this._appLogoUrl);\n            }\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n        }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n    disconnect() {\n        var _a;\n        const extension = this.walletExtension;\n        if (extension) {\n            void extension.close();\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n        }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n    getQrUrl() {\n        var _a, _b;\n        return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Official Coinbase Wallet logo for developers to use on their frontend\n     * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n     * @param width Width of the logo (Optional)\n     * @returns SVG Data URI\n     */\n    getCoinbaseWalletLogo(type, width = 240) {\n        return (0, wallet_logo_1.walletLogo)(type, width);\n    }\n    get walletExtension() {\n        var _a;\n        return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n    get coinbaseBrowser() {\n        var _a, _b;\n        try {\n            // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n            const ethereum = (_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum;\n            if (!ethereum) {\n                return undefined;\n            }\n            if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n                return ethereum;\n            }\n            else {\n                return undefined;\n            }\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    isCipherProvider(provider) {\n        // @ts-expect-error isCipher walletlink property\n        return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = version_1.LIB_VERSION;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}