{"ast":null,"code":"const EventEmitter = require('events');\nconst dev = process.env.NODE_ENV === 'development';\nclass ConnectionManager extends EventEmitter {\n  constructor(connections, targets, options) {\n    super();\n    this.targets = targets;\n    this.options = options;\n    this.connections = connections;\n    this.connected = false;\n    this.status = 'loading';\n    this.interval = options.interval || 5000;\n    this.name = options.name || 'default';\n    this.inSetup = true;\n    this.connect();\n  }\n  connect(index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`);\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider');\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied');\n    } else {\n      const {\n        protocol,\n        location\n      } = this.targets[index];\n      this.connection = this.connections[protocol](location, this.options);\n      const connectionErrorHandler = err => this.connectionError(index, err);\n      this.connection.once('error', connectionErrorHandler);\n      this.connection.on('connect', () => {\n        this.connection.off('error', connectionErrorHandler);\n        this.connection.once('error', err => this.onError(err));\n        this.connection.once('close', () => {\n          this.connected = false;\n          this.emitClose();\n          if (!this.closing) this.refresh();\n        });\n        this.connection.target = this.targets[index];\n        this.connection.index = index;\n        this.targets[index].status = this.connection.status;\n        this.connected = true;\n        this.inSetup = false;\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location);\n        this.emit('connect');\n      });\n      this.connection.on('data', data => this.emit('data', data));\n      this.connection.on('payload', payload => this.emit('payload', payload));\n    }\n  }\n  onError(err) {\n    if (this.listenerCount('error')) return this.emit('error', err);\n    console.warn('[eth-provider] Uncaught connection error: ' + err.message);\n  }\n  refresh(interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`);\n    clearTimeout(this.connectTimer);\n    this.connectTimer = setTimeout(() => this.connect(), interval);\n  }\n  connectionError(index, err) {\n    if (this.connection && this.connection.close) this.connection.close();\n    this.targets[index].status = err;\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false;\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets);\n      this.refresh();\n    } else {\n      // Not last target, move on the next connection option\n      this.connect(++index);\n    }\n  }\n  emitClose() {\n    this.emit('close');\n  }\n  close() {\n    this.closing = true;\n    if (this.connection && this.connection.close && !this.connection.closed) {\n      this.connection.close(); // Let event bubble from here\n    } else {\n      this.emit('close');\n    }\n    clearTimeout(this.connectTimer);\n    clearTimeout(this.setupTimer);\n  }\n  error(payload, message, code = -1) {\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n  send(payload) {\n    if (this.inSetup) {\n      this.setupTimer = setTimeout(() => this.send(payload), 100);\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected', 4900);\n    } else {\n      this.connection.send(payload);\n    }\n  }\n}\nmodule.exports = ConnectionManager;","map":{"version":3,"names":["EventEmitter","require","dev","process","env","NODE_ENV","ConnectionManager","constructor","connections","targets","options","connected","status","interval","name","inSetup","connect","index","console","log","connection","length","protocol","location","connectionErrorHandler","err","connectionError","once","on","off","onError","emitClose","closing","refresh","target","emit","data","payload","listenerCount","warn","message","toFixed","clearTimeout","connectTimer","setTimeout","close","closed","setupTimer","error","code","id","jsonrpc","send","module","exports"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/eth-provider/ConnectionManager/index.js"],"sourcesContent":["const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.options = options\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location, this.options)\n\n      const connectionErrorHandler = (err) => this.connectionError(index, err)\n\n      this.connection.once('error', connectionErrorHandler)\n\n      this.connection.on('connect', () => {\n        this.connection.off('error', connectionErrorHandler)\n        this.connection.once('error', (err) => this.onError(err))\n\n        this.connection.once('close', () => {\n          this.connected = false\n          this.emitClose()\n          if (!this.closing) this.refresh()\n        })\n\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  onError (err) {\n    if (this.listenerCount('error')) return this.emit('error', err)\n    console.warn('[eth-provider] Uncaught connection error: ' + err.message)\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    if (this.connection && this.connection.close) this.connection.close()\n\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  emitClose () {\n    this.emit('close')\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection && this.connection.close && !this.connection.closed) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n    clearTimeout(this.setupTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      this.setupTimer = setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected', 4900)\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}