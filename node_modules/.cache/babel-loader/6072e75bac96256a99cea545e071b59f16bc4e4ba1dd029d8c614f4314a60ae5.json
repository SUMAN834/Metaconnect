{"ast":null,"code":"/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport { CompressedTexture, CompressedArrayTexture, Data3DTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearEncoding, LinearFilter, LinearMipmapLinearFilter, Loader, RedFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBAFormat, RGFormat, sRGBEncoding, UnsignedByteType } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { read, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_TRANSFER_SRGB, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_UNDEFINED, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM } from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nconst _taskCache = new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js');\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n\n    //\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n\n    // Cache the task result.\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n}\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth;\n        mipHeight = levelInfo.origHeight;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  }\n\n  //\n\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  /** Concatenates N byte arrays. */\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (const array of arrays) {\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (const array of arrays) {\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n};\n\n//\n// DataTexture and Data3DTexture parsing.\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  //\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true;\n\n  //\n\n  return Promise.resolve(texture);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedTexture","CompressedArrayTexture","Data3DTexture","DataTexture","FileLoader","FloatType","HalfFloatType","LinearEncoding","LinearFilter","LinearMipmapLinearFilter","Loader","RedFormat","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGBAFormat","RGFormat","sRGBEncoding","UnsignedByteType","WorkerPool","read","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_TRANSFER_SRGB","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_UNDEFINED","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","hasAlpha","transcode","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","layers","getLayers","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","value","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","zstd","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/three/examples/jsm/loaders/KTX2Loader.js"],"sourcesContent":["/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n\tCompressedTexture,\n\tCompressedArrayTexture,\n\tData3DTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tRedFormat,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGBAFormat,\n\tRGFormat,\n\tsRGBEncoding,\n\tUnsignedByteType,\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport {\n\tread,\n\tKHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tKHR_SUPERCOMPRESSION_ZSTD,\n\tVK_FORMAT_UNDEFINED,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n} from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( num ) {\n\n\t\tthis.workerPool.setWorkerLimit( num );\n\n\t\treturn this;\n\n\t}\n\n\tdetectSupport( renderer ) {\n\n\t\tthis.workerConfig = {\n\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t};\n\n\n\t\tif ( renderer.capabilities.isWebGL2 ) {\n\n\t\t\t// https://github.com/mrdoob/three.js/pull/22928\n\t\t\tthis.workerConfig.etc1Supported = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( ( texture ) => onLoad ? onLoad( texture ) : null )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t_createTextureFrom( transcodeResult, container ) {\n\n\t\tconst { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n\n\t\tif ( type === 'error' ) return Promise.reject( error );\n\n\t\tconst texture = container.layerCount > 1\n\t\t\t? new CompressedArrayTexture( mipmaps, width, height, container.layerCount, format, UnsignedByteType )\n\t\t\t: new CompressedTexture( mipmaps, width, height, format, UnsignedByteType );\n\n\n\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\n\t\ttexture.needsUpdate = true;\n\t\ttexture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @param {ArrayBuffer} buffer\n\t * @param {object?} config\n\t * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n\t */\n\tasync _createTexture( buffer, config = {} ) {\n\n\t\tconst container = read( new Uint8Array( buffer ) );\n\n\t\tif ( container.vkFormat !== VK_FORMAT_UNDEFINED ) {\n\n\t\t\treturn createDataTexture( container );\n\n\t\t}\n\n\t\t//\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffer, taskConfig: taskConfig }, [ buffer ] );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data, container ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC_4x4: 1,\n};\n\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n};\n\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode( message.buffer );\n\n\t\t\t\t\t\tconst buffers = [];\n\n\t\t\t\t\t\tfor ( let i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tconst basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst layers = ktx2File.getLayers() || 1;\n\t\tconst levels = ktx2File.getLevels();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdTransferFn = ktx2File.getDFDTransferFunc();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst mipmaps = [];\n\n\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tconst layerMips = [];\n\n\t\t\tlet mipWidth, mipHeight;\n\n\t\t\tfor ( let layer = 0; layer < layers; layer ++ ) {\n\n\t\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, layer, 0 );\n\t\t\t\tmipWidth = levelInfo.origWidth;\n\t\t\t\tmipHeight = levelInfo.origHeight;\n\t\t\t\tconst dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, layer, 0, transcoderFormat ) );\n\t\t\t\tconst status = ktx2File.transcodeImage(\n\t\t\t\t\tdst,\n\t\t\t\t\tmip,\n\t\t\t\t\tlayer,\n\t\t\t\t\t0,\n\t\t\t\t\ttranscoderFormat,\n\t\t\t\t\t0,\n\t\t\t\t\t- 1,\n\t\t\t\t\t- 1,\n\t\t\t\t);\n\n\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\tcleanup();\n\t\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t\t}\n\n\t\t\t\tlayerMips.push( dst );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: concat( layerMips ), width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n\t// device capabilities, and texture dimensions. The list below ranks the formats separately\n\t// for ETC1S and UASTC.\n\t//\n\t// In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n\t// significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n\t// chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t];\n\n\tconst ETC1S_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityETC1S - b.priorityETC1S;\n\n\t} );\n\tconst UASTC_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityUASTC - b.priorityUASTC;\n\n\t} );\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tlet transcoderFormat;\n\t\tlet engineFormat;\n\n\t\tconst options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\ttranscoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tengineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat };\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.' );\n\n\t\ttranscoderFormat = TranscoderFormat.RGBA32;\n\t\tengineFormat = EngineFormat.RGBAFormat;\n\n\t\treturn { transcoderFormat, engineFormat };\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n\t/** Concatenates N byte arrays. */\n\tfunction concat( arrays ) {\n\n\t\tlet totalByteLength = 0;\n\n\t\tfor ( const array of arrays ) {\n\n\t\t\ttotalByteLength += array.byteLength;\n\n\t\t}\n\n\t\tconst result = new Uint8Array( totalByteLength );\n\n\t\tlet byteOffset = 0;\n\n\t\tfor ( const array of arrays ) {\n\n\t\t\tresult.set( array, byteOffset );\n\n\t\t\tbyteOffset += array.byteLength;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n};\n\n//\n// DataTexture and Data3DTexture parsing.\n\nconst FORMAT_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: RGBAFormat,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R8G8_UNORM ]: RGFormat,\n\t[ VK_FORMAT_R8G8_SRGB ]: RGFormat,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R16_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R8_SRGB ]: RedFormat,\n\t[ VK_FORMAT_R8_UNORM ]: RedFormat,\n\n};\n\nconst TYPE_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8_SRGB ]: UnsignedByteType,\n\t[ VK_FORMAT_R8_UNORM ]: UnsignedByteType,\n\n};\n\nconst ENCODING_MAP = {\n\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: sRGBEncoding,\n\t[ VK_FORMAT_R8G8_SRGB ]: sRGBEncoding,\n\t[ VK_FORMAT_R8_SRGB ]: sRGBEncoding,\n\n};\n\nasync function createDataTexture( container ) {\n\n\tconst { vkFormat, pixelWidth, pixelHeight, pixelDepth } = container;\n\n\tif ( FORMAT_MAP[ vkFormat ] === undefined ) {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported vkFormat.' );\n\n\t}\n\n\tconst level = container.levels[ 0 ];\n\n\tlet levelData;\n\tlet view;\n\n\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE ) {\n\n\t\tlevelData = level.levelData;\n\n\t} else if ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\tif ( ! _zstd ) {\n\n\t\t\t_zstd = new Promise( async ( resolve ) => {\n\n\t\t\t\tconst zstd = new ZSTDDecoder();\n\t\t\t\tawait zstd.init();\n\t\t\t\tresolve( zstd );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tlevelData = ( await _zstd ).decode( level.levelData, level.uncompressedByteLength );\n\n\t} else {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported supercompressionScheme.' );\n\n\t}\n\n\tif ( TYPE_MAP[ vkFormat ] === FloatType ) {\n\n\t\tview = new Float32Array(\n\n\t\t\tlevelData.buffer,\n\t\t\tlevelData.byteOffset,\n\t\t\tlevelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n\n\t\t);\n\n\t} else if ( TYPE_MAP[ vkFormat ] === HalfFloatType ) {\n\n\t\tview = new Uint16Array(\n\n\t\t\tlevelData.buffer,\n\t\t\tlevelData.byteOffset,\n\t\t\tlevelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n\n\t\t);\n\n\t} else {\n\n\t\tview = levelData;\n\n\t}\n\t//\n\n\tconst texture = pixelDepth === 0\n\t\t? new DataTexture( view, pixelWidth, pixelHeight )\n\t\t: new Data3DTexture( view, pixelWidth, pixelHeight, pixelDepth );\n\n\ttexture.type = TYPE_MAP[ vkFormat ];\n\ttexture.format = FORMAT_MAP[ vkFormat ];\n\ttexture.encoding = ENCODING_MAP[ vkFormat ] || LinearEncoding;\n\n\ttexture.needsUpdate = true;\n\n\t//\n\n\treturn Promise.resolve( texture );\n\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}