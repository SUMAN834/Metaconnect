{"ast":null,"code":"import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nvar _provider = /*#__PURE__*/new WeakMap();\nclass FrameConnector extends WagmiConnector {\n  constructor(_ref) {\n    let {\n      chains,\n      options: suppliedOptions,\n      connectorStorage\n    } = _ref;\n    const options = {\n      shimDisconnect: true,\n      ...suppliedOptions\n    };\n    super({\n      chains,\n      options\n    });\n    _defineProperty(this, \"id\", \"frame\");\n    _defineProperty(this, \"name\", \"Frame\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", () => {\n      this.emit(\"disconnect\");\n      // Remove shim signalling wallet is disconnected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    this.connectorStorage = connectorStorage;\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = utils.getAddress(accounts[0]);\n      // Switch to chain if provided\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (config?.chainId && id !== config?.chainId) {\n        const chain = await this.switchChain(config?.chainId);\n        id = chain.chainId;\n        unsupported = this.isChainUnsupported(id);\n      }\n\n      // Add shim to storage signalling wallet is connected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      return {\n        account,\n        provider,\n        chain: {\n          id,\n          unsupported\n        }\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (!this.isInjected()) {\n      provider.close();\n    }\n\n    // Remove shim signalling wallet is disconnected\n    if (this.options.shimDisconnect) {\n      this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    // return checksum address\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return normalizeChainId(chainId);\n  }\n  async getProvider() {\n    _classPrivateFieldSet(this, _provider, this.isInjected() ? this.injectedProvider() : await this.createProvider());\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !this.connectorStorage.getItem(this.shimDisconnectKey)) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      await Promise.all([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      }), new Promise(res => this.on(\"change\", _ref2 => {\n        let {\n          chain\n        } = _ref2;\n        if (chain?.id === chainId) {\n          res();\n        }\n      }))]);\n      return this.chains.find(x => x.chainId === chainId) ?? {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (switchChainError) {\n      const chain = this.chains.find(x => x.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // Indicates chain is not added to provider\n      if (switchChainError.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId) {\n            throw new UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n          }\n          return chain;\n        } catch (addChainError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addChainError)) {\n            throw new UserRejectedRequestError(addChainError);\n          }\n\n          // else other error\n          throw new AddChainError(addChainError.message);\n        }\n      }\n\n      // if user rejects request to switch chain\n      if (this.isUserRejectedRequestError(switchChainError)) {\n        throw new UserRejectedRequestError(switchChainError);\n      }\n\n      // else other error\n      throw new SwitchChainError(switchChainError);\n    }\n  }\n  async watchAsset(_ref3) {\n    let {\n      address,\n      decimals = 18,\n      image,\n      symbol\n    } = _ref3;\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n  injectedProvider() {\n    return window?.ethereum;\n  }\n  isInjected() {\n    return !!this.injectedProvider()?.isFrame;\n  }\n  async createProvider() {\n    const ethProvider = (await import('eth-provider')).default;\n    return ethProvider(\"frame\");\n  }\n}\nexport { FrameConnector };","map":{"version":3,"names":["_","_classPrivateFieldInitSpec","a","_classPrivateFieldSet","b","_classPrivateFieldGet","_defineProperty","utils","providers","g","getValidPublicRPCUrl","W","WagmiConnector","n","normalizeChainId","ConnectorNotFoundError","U","UserRejectedRequestError","R","ResourceUnavailableError","C","ChainNotConfiguredError","A","AddChainError","S","SwitchChainError","_provider","WeakMap","FrameConnector","constructor","_ref","chains","options","suppliedOptions","connectorStorage","shimDisconnect","id","writable","value","accounts","length","emit","account","getAddress","chainId","unsupported","isChainUnsupported","chain","removeItem","shimDisconnectKey","connect","config","provider","getProvider","setupListeners","type","request","method","getChainId","switchChain","setItem","error","isUserRejectedRequestError","code","disconnect","removeListener","onAccountsChanged","onChainChanged","onDisconnect","isInjected","close","getAccount","injectedProvider","createProvider","getSigner","arguments","undefined","Promise","all","Web3Provider","isAuthorized","getItem","chainIdHex","hexValue","params","res","on","_ref2","find","x","name","slug","nativeCurrency","decimals","symbol","rpc","shortName","testnet","switchChainError","connectorId","chainName","rpcUrls","blockExplorerUrls","getBlockExplorerUrls","currentChainId","Error","addChainError","message","watchAsset","_ref3","address","image","window","ethereum","isFrame","ethProvider","default"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nvar _provider = /*#__PURE__*/new WeakMap();\nclass FrameConnector extends WagmiConnector {\n  constructor(_ref) {\n    let {\n      chains,\n      options: suppliedOptions,\n      connectorStorage\n    } = _ref;\n    const options = {\n      shimDisconnect: true,\n      ...suppliedOptions\n    };\n    super({\n      chains,\n      options\n    });\n    _defineProperty(this, \"id\", \"frame\");\n    _defineProperty(this, \"name\", \"Frame\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", () => {\n      this.emit(\"disconnect\");\n      // Remove shim signalling wallet is disconnected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    this.connectorStorage = connectorStorage;\n  }\n  async connect(config) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = utils.getAddress(accounts[0]);\n      // Switch to chain if provided\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (config?.chainId && id !== config?.chainId) {\n        const chain = await this.switchChain(config?.chainId);\n        id = chain.chainId;\n        unsupported = this.isChainUnsupported(id);\n      }\n\n      // Add shim to storage signalling wallet is connected\n      if (this.options.shimDisconnect) {\n        this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      return {\n        account,\n        provider,\n        chain: {\n          id,\n          unsupported\n        }\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (!this.isInjected()) {\n      provider.close();\n    }\n\n    // Remove shim signalling wallet is disconnected\n    if (this.options.shimDisconnect) {\n      this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    // return checksum address\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainId = await provider.request({\n      method: \"eth_chainId\"\n    });\n    return normalizeChainId(chainId);\n  }\n  async getProvider() {\n    _classPrivateFieldSet(this, _provider, this.isInjected() ? this.injectedProvider() : await this.createProvider());\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !this.connectorStorage.getItem(this.shimDisconnectKey)) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      await Promise.all([provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      }), new Promise(res => this.on(\"change\", _ref2 => {\n        let {\n          chain\n        } = _ref2;\n        if (chain?.id === chainId) {\n          res();\n        }\n      }))]);\n      return this.chains.find(x => x.chainId === chainId) ?? {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (switchChainError) {\n      const chain = this.chains.find(x => x.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // Indicates chain is not added to provider\n      if (switchChainError.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          const currentChainId = await this.getChainId();\n          if (currentChainId !== chainId) {\n            throw new UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n          }\n          return chain;\n        } catch (addChainError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addChainError)) {\n            throw new UserRejectedRequestError(addChainError);\n          }\n\n          // else other error\n          throw new AddChainError(addChainError.message);\n        }\n      }\n\n      // if user rejects request to switch chain\n      if (this.isUserRejectedRequestError(switchChainError)) {\n        throw new UserRejectedRequestError(switchChainError);\n      }\n\n      // else other error\n      throw new SwitchChainError(switchChainError);\n    }\n  }\n  async watchAsset(_ref3) {\n    let {\n      address,\n      decimals = 18,\n      image,\n      symbol\n    } = _ref3;\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n  injectedProvider() {\n    return window?.ethereum;\n  }\n  isInjected() {\n    return !!this.injectedProvider()?.isFrame;\n  }\n  async createProvider() {\n    const ethProvider = (await import('eth-provider')).default;\n    return ethProvider(\"frame\");\n  }\n}\n\nexport { FrameConnector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}