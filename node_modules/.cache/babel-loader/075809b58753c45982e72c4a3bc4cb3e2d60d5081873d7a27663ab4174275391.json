{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nclass Connector extends EventEmitter {}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nclass WagmiAdapter extends Connector {\n  constructor(wagmiConnector) {\n    super();\n    this.wagmiConnector = wagmiConnector;\n  }\n  async connect(args) {\n    this.setupConnectorListeners();\n    const result = await this.wagmiConnector.connect(args);\n    return result.account;\n  }\n  disconnect() {\n    this.wagmiConnector.removeAllListeners(\"connect\");\n    this.wagmiConnector.removeAllListeners(\"change\");\n    return this.wagmiConnector.disconnect();\n  }\n  isConnected() {\n    return this.wagmiConnector.isAuthorized();\n  }\n  getAddress() {\n    return this.wagmiConnector.getAccount();\n  }\n  getSigner() {\n    return this.wagmiConnector.getSigner();\n  }\n  getProvider() {\n    return this.wagmiConnector.getProvider();\n  }\n  async switchChain(chainId) {\n    if (!this.wagmiConnector.switchChain) {\n      throw new Error(\"Switch chain not supported\");\n    }\n    await this.wagmiConnector.switchChain(chainId);\n  }\n  setupConnectorListeners() {\n    this.wagmiConnector.addListener(\"connect\", data => {\n      this.emit(\"connect\", data);\n    });\n    this.wagmiConnector.addListener(\"change\", data => {\n      this.emit(\"change\", data);\n    });\n    this.wagmiConnector.addListener(\"disconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n  async setupListeners() {\n    this.setupConnectorListeners();\n    await this.wagmiConnector.setupListeners();\n  }\n  updateChains(chains) {\n    this.wagmiConnector.updateChains(chains);\n  }\n}\nexport { Connector as C, WagmiAdapter as W };","map":{"version":3,"names":["EventEmitter","Connector","WagmiAdapter","constructor","wagmiConnector","connect","args","setupConnectorListeners","result","account","disconnect","removeAllListeners","isConnected","isAuthorized","getAddress","getAccount","getSigner","getProvider","switchChain","chainId","Error","addListener","data","emit","setupListeners","updateChains","chains","C","W"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/dist/connector-05689d68.browser.esm.js"],"sourcesContent":["import EventEmitter from 'eventemitter3';\n\nclass Connector extends EventEmitter {}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nclass WagmiAdapter extends Connector {\n  constructor(wagmiConnector) {\n    super();\n    this.wagmiConnector = wagmiConnector;\n  }\n  async connect(args) {\n    this.setupConnectorListeners();\n    const result = await this.wagmiConnector.connect(args);\n    return result.account;\n  }\n  disconnect() {\n    this.wagmiConnector.removeAllListeners(\"connect\");\n    this.wagmiConnector.removeAllListeners(\"change\");\n    return this.wagmiConnector.disconnect();\n  }\n  isConnected() {\n    return this.wagmiConnector.isAuthorized();\n  }\n  getAddress() {\n    return this.wagmiConnector.getAccount();\n  }\n  getSigner() {\n    return this.wagmiConnector.getSigner();\n  }\n  getProvider() {\n    return this.wagmiConnector.getProvider();\n  }\n  async switchChain(chainId) {\n    if (!this.wagmiConnector.switchChain) {\n      throw new Error(\"Switch chain not supported\");\n    }\n    await this.wagmiConnector.switchChain(chainId);\n  }\n  setupConnectorListeners() {\n    this.wagmiConnector.addListener(\"connect\", data => {\n      this.emit(\"connect\", data);\n    });\n    this.wagmiConnector.addListener(\"change\", data => {\n      this.emit(\"change\", data);\n    });\n    this.wagmiConnector.addListener(\"disconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n  async setupListeners() {\n    this.setupConnectorListeners();\n    await this.wagmiConnector.setupListeners();\n  }\n  updateChains(chains) {\n    this.wagmiConnector.updateChains(chains);\n  }\n}\n\nexport { Connector as C, WagmiAdapter as W };\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;AAExC,MAAMC,SAAS,SAASD,YAAY,CAAC;;AAErC;;AAEA,MAAME,YAAY,SAASD,SAAS,CAAC;EACnCE,WAAWA,CAACC,cAAc,EAAE;IAC1B,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC;EACA,MAAMC,OAAOA,CAACC,IAAI,EAAE;IAClB,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACJ,cAAc,CAACC,OAAO,CAACC,IAAI,CAAC;IACtD,OAAOE,MAAM,CAACC,OAAO;EACvB;EACAC,UAAUA,CAAA,EAAG;IACX,IAAI,CAACN,cAAc,CAACO,kBAAkB,CAAC,SAAS,CAAC;IACjD,IAAI,CAACP,cAAc,CAACO,kBAAkB,CAAC,QAAQ,CAAC;IAChD,OAAO,IAAI,CAACP,cAAc,CAACM,UAAU,CAAC,CAAC;EACzC;EACAE,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACR,cAAc,CAACS,YAAY,CAAC,CAAC;EAC3C;EACAC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACV,cAAc,CAACW,UAAU,CAAC,CAAC;EACzC;EACAC,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACZ,cAAc,CAACY,SAAS,CAAC,CAAC;EACxC;EACAC,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACb,cAAc,CAACa,WAAW,CAAC,CAAC;EAC1C;EACA,MAAMC,WAAWA,CAACC,OAAO,EAAE;IACzB,IAAI,CAAC,IAAI,CAACf,cAAc,CAACc,WAAW,EAAE;MACpC,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IACA,MAAM,IAAI,CAAChB,cAAc,CAACc,WAAW,CAACC,OAAO,CAAC;EAChD;EACAZ,uBAAuBA,CAAA,EAAG;IACxB,IAAI,CAACH,cAAc,CAACiB,WAAW,CAAC,SAAS,EAAEC,IAAI,IAAI;MACjD,IAAI,CAACC,IAAI,CAAC,SAAS,EAAED,IAAI,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,CAAClB,cAAc,CAACiB,WAAW,CAAC,QAAQ,EAAEC,IAAI,IAAI;MAChD,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;IAC3B,CAAC,CAAC;IACF,IAAI,CAAClB,cAAc,CAACiB,WAAW,CAAC,YAAY,EAAE,MAAM;MAClD,IAAI,CAACE,IAAI,CAAC,YAAY,CAAC;IACzB,CAAC,CAAC;EACJ;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI,CAACjB,uBAAuB,CAAC,CAAC;IAC9B,MAAM,IAAI,CAACH,cAAc,CAACoB,cAAc,CAAC,CAAC;EAC5C;EACAC,YAAYA,CAACC,MAAM,EAAE;IACnB,IAAI,CAACtB,cAAc,CAACqB,YAAY,CAACC,MAAM,CAAC;EAC1C;AACF;AAEA,SAASzB,SAAS,IAAI0B,CAAC,EAAEzB,YAAY,IAAI0B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}