{"ast":null,"code":"import { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-e41b240b.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { E as EmbeddedWalletSdk, U as UserStatus } from '../../../../dist/embedded-wallet-89e555d2.browser.esm.js';\nimport 'eventemitter3';\nimport '@paperxyz/sdk-common-utilities';\nimport 'ethers/lib/utils';\nvar _embeddedWalletSdk = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass EmbeddedWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Embedded Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _embeddedWalletSdk, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getEmbeddedWalletSDK() {\n    if (!_classPrivateFieldGet(this, _embeddedWalletSdk)) {\n      _classPrivateFieldSet(this, _embeddedWalletSdk, new EmbeddedWalletSdk({\n        clientId: this.options.clientId,\n        chain: \"Ethereum\",\n        styles: this.options.styles\n      }));\n    }\n    return _classPrivateFieldGet(this, _embeddedWalletSdk);\n  }\n  async connect(options) {\n    const thirdwebSDK = await this.getEmbeddedWalletSDK();\n    if (!thirdwebSDK) {\n      throw new Error(\"EmbeddedWallet SDK not initialized\");\n    }\n    const user = await thirdwebSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n          switch (options?.loginType) {\n            case \"headless_google_oauth\":\n              {\n                authResult = await thirdwebSDK.auth.loginWithGoogle({\n                  closeOpenedWindow: options.closeOpenedWindow,\n                  openedWindow: options.openedWindow\n                });\n                break;\n              }\n            case \"headless_email_otp_verification\":\n              {\n                authResult = await thirdwebSDK.auth.verifyEmailLoginOtp({\n                  email: options.email,\n                  otp: options.otp\n                });\n                break;\n              }\n            case \"ui_email_otp\":\n              {\n                authResult = await thirdwebSDK.auth.loginWithEmailOtp({\n                  email: options.email\n                });\n                break;\n              }\n            default:\n              {\n                authResult = await thirdwebSDK.auth.loginWithModal();\n                break;\n              }\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (options?.loginType === \"headless_google_oauth\") {\n            if (options.closeOpenedWindow && options.openedWindow) {\n              options.closeOpenedWindow(options.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await _classPrivateFieldGet(this, _embeddedWalletSdk);\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    _classPrivateFieldSet(this, _embeddedWalletSdk, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const embeddedWalletSdk = await this.getEmbeddedWalletSDK();\n      const user = await embeddedWalletSdk.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    // implicit call to set the user\n    await this.getSigner();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\nexport { EmbeddedWalletConnector };","map":{"version":3,"names":["_","_classPrivateFieldInitSpec","b","_classPrivateFieldGet","a","_classPrivateFieldSet","_defineProperty","utils","w","walletIds","C","Connector","n","normalizeChainId","E","EmbeddedWalletSdk","U","UserStatus","_embeddedWalletSdk","WeakMap","_signer","EmbeddedWalletConnector","constructor","options","paper","writable","value","accounts","length","onDisconnect","emit","account","getAddress","chainId","id","unsupported","chains","findIndex","c","chain","getEmbeddedWalletSDK","clientId","styles","connect","thirdwebSDK","Error","user","getUser","status","LOGGED_OUT","authResult","loginType","auth","loginWithGoogle","closeOpenedWindow","openedWindow","verifyEmailLoginOtp","email","otp","loginWithEmailOtp","loginWithModal","LOGGED_IN_WALLET_INITIALIZED","switchChain","setupListeners","disconnect","logout","undefined","signer","getSigner","isConnected","addr","e","getProvider","provider","embeddedWalletSdk","wallet","getEthersJsSigner","rpcEndpoint","rpc","isAuthorized","find","setChain","on","onAccountsChanged","onChainChanged","updateChains","getEmail","authDetails"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-e41b240b.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { E as EmbeddedWalletSdk, U as UserStatus } from '../../../../dist/embedded-wallet-89e555d2.browser.esm.js';\nimport 'eventemitter3';\nimport '@paperxyz/sdk-common-utilities';\nimport 'ethers/lib/utils';\n\nvar _embeddedWalletSdk = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass EmbeddedWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Embedded Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _embeddedWalletSdk, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getEmbeddedWalletSDK() {\n    if (!_classPrivateFieldGet(this, _embeddedWalletSdk)) {\n      _classPrivateFieldSet(this, _embeddedWalletSdk, new EmbeddedWalletSdk({\n        clientId: this.options.clientId,\n        chain: \"Ethereum\",\n        styles: this.options.styles\n      }));\n    }\n    return _classPrivateFieldGet(this, _embeddedWalletSdk);\n  }\n  async connect(options) {\n    const thirdwebSDK = await this.getEmbeddedWalletSDK();\n    if (!thirdwebSDK) {\n      throw new Error(\"EmbeddedWallet SDK not initialized\");\n    }\n    const user = await thirdwebSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n          switch (options?.loginType) {\n            case \"headless_google_oauth\":\n              {\n                authResult = await thirdwebSDK.auth.loginWithGoogle({\n                  closeOpenedWindow: options.closeOpenedWindow,\n                  openedWindow: options.openedWindow\n                });\n                break;\n              }\n            case \"headless_email_otp_verification\":\n              {\n                authResult = await thirdwebSDK.auth.verifyEmailLoginOtp({\n                  email: options.email,\n                  otp: options.otp\n                });\n                break;\n              }\n            case \"ui_email_otp\":\n              {\n                authResult = await thirdwebSDK.auth.loginWithEmailOtp({\n                  email: options.email\n                });\n                break;\n              }\n            default:\n              {\n                authResult = await thirdwebSDK.auth.loginWithModal();\n                break;\n              }\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (options?.loginType === \"headless_google_oauth\") {\n            if (options.closeOpenedWindow && options.openedWindow) {\n              options.closeOpenedWindow(options.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await _classPrivateFieldGet(this, _embeddedWalletSdk);\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    _classPrivateFieldSet(this, _embeddedWalletSdk, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const embeddedWalletSdk = await this.getEmbeddedWalletSDK();\n      const user = await embeddedWalletSdk.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    // implicit call to set the user\n    await this.getSigner();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { EmbeddedWalletConnector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}