{"ast":null,"code":"import { BigNumber } from 'ethers';\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nclass DropErc1155History {\n  constructor(events) {\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns - A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  async getAllClaimerAddresses(tokenId) {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter(e => e.data && BigNumber.isBigNumber(e.data.tokenId) ? e.data.tokenId.eq(tokenId) : false);\n    return Array.from(new Set(a.filter(b => typeof b.data?.claimer === \"string\").map(b => b.data.claimer)));\n  }\n}\nexport { DropErc1155History as D };","map":{"version":3,"names":["BigNumber","DropErc1155History","constructor","events","getAllClaimerAddresses","tokenId","a","getEvents","filter","e","data","isBigNumber","eq","Array","from","Set","b","claimer","map","D"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/drop-erc1155-history-bc8aed31.browser.esm.js"],"sourcesContent":["import { BigNumber } from 'ethers';\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nclass DropErc1155History {\n  constructor(events) {\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns - A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  async getAllClaimerAddresses(tokenId) {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter(e => e.data && BigNumber.isBigNumber(e.data.tokenId) ? e.data.tokenId.eq(tokenId) : false);\n    return Array.from(new Set(a.filter(b => typeof b.data?.claimer === \"string\").map(b => b.data.claimer)));\n  }\n}\n\nexport { DropErc1155History as D };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,QAAQ;;AAElC;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,sBAAsBA,CAACC,OAAO,EAAE;IACpC,MAAMC,CAAC,GAAG,CAAC,MAAM,IAAI,CAACH,MAAM,CAACI,SAAS,CAAC,eAAe,CAAC,EAAEC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,IAAIV,SAAS,CAACW,WAAW,CAACF,CAAC,CAACC,IAAI,CAACL,OAAO,CAAC,GAAGI,CAAC,CAACC,IAAI,CAACL,OAAO,CAACO,EAAE,CAACP,OAAO,CAAC,GAAG,KAAK,CAAC;IAC1J,OAAOQ,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACT,CAAC,CAACE,MAAM,CAACQ,CAAC,IAAI,OAAOA,CAAC,CAACN,IAAI,EAAEO,OAAO,KAAK,QAAQ,CAAC,CAACC,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACN,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;EACzG;AACF;AAEA,SAAShB,kBAAkB,IAAIkB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}