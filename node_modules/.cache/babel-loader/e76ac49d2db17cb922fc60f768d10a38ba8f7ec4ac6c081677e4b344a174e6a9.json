{"ast":null,"code":"import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { PaymasterAPI, calcPreVerificationGas } from '@account-abstraction/sdk';\nimport { ethers, utils, Signer, providers, BigNumber } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { deepHexlify, packUserOp, AddressZero } from '@account-abstraction/utils';\nimport { A as ACCOUNT_CORE_ABI, a as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-1ba9df2b.browser.esm.js';\nimport { getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\nfunction toJSON(op) {\n  return ethers.utils.resolveProperties(op).then(userOp => Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = ethers.utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {}));\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return ethers.BigNumber.from(ethers.utils.concat([hexString, \"0x0000000000000000\"]));\n};\nconst SIG_SIZE = 65;\nconst DUMMY_PAYMASTER_AND_DATA = \"0x0101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\";\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await toJSON(userOp), {\n          entryPoint: this.entryPoint\n        }]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (res.result) {\n      const result = res.result.paymasterAndData || res.result;\n      return result.toString();\n    } else {\n      throw new Error(`Paymaster returned no result from ${this.paymasterUrl}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, \"latest\");\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, batchData) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const userOperation = await this.smartAccountAPI.createSignedUserOp({\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, batchData);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n  async signMessage(message) {\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    return await this.originalSigner.signMessage(message);\n  }\n  async signTransaction(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transaction) {\n    throw new Error(\"not implemented\");\n  }\n}\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n\n  /**\n   * finish intializing the provider.\n   * MUST be called after construction, before using the provider.\n   */\n  async init() {\n    // await this.httpRpcClient.validateChainId()\n    this.initializedBlockNumber = await this.originalProvider.getBlockNumber();\n    await this.smartAccountAPI.init();\n    // await this.signer.init()\n    return this;\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // hijack this to estimate gas from the entrypoint instead\n      const {\n        callGasLimit\n      } = await this.smartAccountAPI.encodeUserOpCallDataAndGasLimit({\n        target: params.transaction.to,\n        data: params.transaction.data,\n        value: params.transaction.value,\n        gasLimit: params.transaction.gasLimit\n      });\n      return callGasLimit;\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitForUserOp();\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\nvar pkg = {\n  name: \"@thirdweb-dev/wallets\",\n  version: \"2.0.10\",\n  main: \"dist/thirdweb-dev-wallets.cjs.js\",\n  module: \"dist/thirdweb-dev-wallets.esm.js\",\n  types: \"dist/thirdweb-dev-wallets.cjs.d.ts\",\n  browser: {\n    \"./dist/thirdweb-dev-wallets.esm.js\": \"./dist/thirdweb-dev-wallets.browser.esm.js\"\n  },\n  exports: {\n    \".\": {\n      module: {\n        browser: \"./dist/thirdweb-dev-wallets.browser.esm.js\",\n        \"default\": \"./dist/thirdweb-dev-wallets.esm.js\"\n      },\n      \"default\": \"./dist/thirdweb-dev-wallets.cjs.js\"\n    },\n    \"./evm\": {\n      module: {\n        browser: \"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js\",\n        \"default\": \"./evm/dist/thirdweb-dev-wallets-evm.esm.js\"\n      },\n      \"default\": \"./evm/dist/thirdweb-dev-wallets-evm.cjs.js\"\n    },\n    \"./evm/wallets/okx\": {\n      module: {\n        browser: \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js\",\n        \"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js\"\n      },\n      \"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js\"\n    },\n    \"./evm/wallets/base\": {\n      module: {\n        browser: \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js\",\n        \"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js\"\n      },\n      \"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js\"\n    },\n    \"./evm/wallets/safe\": {\n      module: {\n        browser: \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js\",\n        \"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js\"\n      },\n      \"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js\"\n    },\n    \"./evm/wallets/async\": {\n      module: {\n        browser: \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js\",\n        \"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js\"\n      },\n      \"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js\"\n    },\n    \"./evm/wallets/frame\": {\n      module: {\n        browser: \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js\",\n        \"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js\"\n      },\n      \"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js\"\n    },\n    \"./evm/wallets/magic\": {\n      module: {\n        browser: \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js\",\n        \"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js\"\n      },\n      \"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js\"\n    },\n    \"./evm/wallets/trust\": {\n      module: {\n        browser: \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js\",\n        \"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js\"\n      },\n      \"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js\"\n    },\n    \"./evm/wallets/blocto\": {\n      module: {\n        browser: \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js\",\n        \"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js\"\n      },\n      \"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js\"\n    },\n    \"./evm/wallets/ethers\": {\n      module: {\n        browser: \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js\",\n        \"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js\"\n      },\n      \"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js\"\n    },\n    \"./evm/wallets/signer\": {\n      module: {\n        browser: \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js\",\n        \"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js\"\n      },\n      \"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js\"\n    },\n    \"./evm/wallets/zerion\": {\n      module: {\n        browser: \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js\",\n        \"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js\"\n      },\n      \"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js\"\n    },\n    \"./evm/wallets/aws-kms\": {\n      module: {\n        browser: \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js\",\n        \"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js\"\n      },\n      \"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js\"\n    },\n    \"./evm/wallets/gcp-kms\": {\n      module: {\n        browser: \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js\",\n        \"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js\"\n      },\n      \"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js\"\n    },\n    \"./evm/wallets/phantom\": {\n      module: {\n        browser: \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js\",\n        \"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js\"\n      },\n      \"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js\"\n    },\n    \"./evm/wallets/abstract\": {\n      module: {\n        browser: \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js\",\n        \"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js\"\n      },\n      \"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js\"\n    },\n    \"./evm/wallets/injected\": {\n      module: {\n        browser: \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js\",\n        \"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js\"\n      },\n      \"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js\"\n    },\n    \"./evm/wallets/metamask\": {\n      module: {\n        browser: \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js\",\n        \"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js\"\n      },\n      \"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js\"\n    },\n    \"./evm/wallets/private-key\": {\n      module: {\n        browser: \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js\",\n        \"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js\"\n      },\n      \"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js\"\n    },\n    \"./evm/connectors/okx\": {\n      module: {\n        browser: \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js\",\n        \"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js\"\n      },\n      \"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js\"\n    },\n    \"./evm/wallets/local-wallet\": {\n      module: {\n        browser: \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js\"\n    },\n    \"./evm/wallets/paper-wallet\": {\n      module: {\n        browser: \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js\"\n    },\n    \"./evm/wallets/smart-wallet\": {\n      module: {\n        browser: \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js\"\n    },\n    \"./evm/connectors/safe\": {\n      module: {\n        browser: \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js\",\n        \"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js\"\n      },\n      \"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js\"\n    },\n    \"./evm/connectors/frame\": {\n      module: {\n        browser: \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js\",\n        \"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js\"\n      },\n      \"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js\"\n    },\n    \"./evm/connectors/magic\": {\n      module: {\n        browser: \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js\",\n        \"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js\"\n      },\n      \"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js\"\n    },\n    \"./evm/connectors/paper\": {\n      module: {\n        browser: \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js\",\n        \"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js\"\n      },\n      \"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js\"\n    },\n    \"./evm/connectors/trust\": {\n      module: {\n        browser: \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js\",\n        \"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js\"\n      },\n      \"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js\"\n    },\n    \"./evm/wallets/rainbow-wallet\": {\n      module: {\n        browser: \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js\"\n    },\n    \"./evm/wallets/wallet-connect\": {\n      module: {\n        browser: \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js\",\n        \"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js\"\n      },\n      \"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js\"\n    },\n    \"./evm/connectors/blocto\": {\n      module: {\n        browser: \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\",\n        \"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js\"\n      },\n      \"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js\"\n    },\n    \"./evm/connectors/signer\": {\n      module: {\n        browser: \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js\",\n        \"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js\"\n      },\n      \"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js\"\n    },\n    \"./evm/connectors/zerion\": {\n      module: {\n        browser: \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js\",\n        \"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js\"\n      },\n      \"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js\"\n    },\n    \"./evm/wallets/coinbase-wallet\": {\n      module: {\n        browser: \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js\"\n    },\n    \"./evm/wallets/embedded-wallet\": {\n      module: {\n        browser: \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js\"\n    },\n    \"./evm/connectors/phantom\": {\n      module: {\n        browser: \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js\",\n        \"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js\"\n      },\n      \"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js\"\n    },\n    \"./evm/connectors/rainbow\": {\n      module: {\n        browser: \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js\",\n        \"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js\"\n      },\n      \"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js\"\n    },\n    \"./evm/connectors/injected\": {\n      module: {\n        browser: \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js\",\n        \"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js\"\n      },\n      \"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js\"\n    },\n    \"./evm/connectors/metamask\": {\n      module: {\n        browser: \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js\",\n        \"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js\"\n      },\n      \"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js\"\n    },\n    \"./evm/wallets/local-wallet-node\": {\n      module: {\n        browser: \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js\",\n        \"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js\"\n      },\n      \"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js\"\n    },\n    \"./evm/wallets/wallet-connect-v1\": {\n      module: {\n        browser: \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js\",\n        \"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js\"\n      },\n      \"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js\"\n    },\n    \"./evm/wallets/aws-secrets-manager\": {\n      module: {\n        browser: \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js\",\n        \"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js\"\n      },\n      \"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js\"\n    },\n    \"./evm/connectors/local-wallet\": {\n      module: {\n        browser: \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js\",\n        \"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js\"\n      },\n      \"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js\"\n    },\n    \"./evm/connectors/smart-wallet\": {\n      module: {\n        browser: \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\",\n        \"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js\"\n      },\n      \"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js\"\n    },\n    \"./evm/connectors/wallet-connect\": {\n      module: {\n        browser: \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\",\n        \"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js\"\n      },\n      \"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js\"\n    },\n    \"./evm/connectors/coinbase-wallet\": {\n      module: {\n        browser: \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js\",\n        \"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js\"\n      },\n      \"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js\"\n    },\n    \"./evm/connectors/embedded-wallet\": {\n      module: {\n        browser: \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\",\n        \"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js\"\n      },\n      \"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js\"\n    },\n    \"./evm/wallets/token-bound-smart-wallet\": {\n      module: {\n        browser: \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js\",\n        \"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js\"\n      },\n      \"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js\"\n    },\n    \"./evm/connectors/wallet-connect-v1\": {\n      module: {\n        browser: \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js\",\n        \"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js\"\n      },\n      \"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js\"\n    },\n    \"./evm/connectors/token-bound-smart-wallet\": {\n      module: {\n        browser: \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\",\n        \"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js\"\n      },\n      \"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js\"\n    },\n    \"./evm/connectors/embedded-wallet/implementations\": {\n      module: {\n        browser: \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js\",\n        \"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js\"\n      },\n      \"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  repository: \"https://github.com/thirdweb-dev/js/tree/main/packages/wallets\",\n  license: \"Apache-2.0\",\n  bugs: {\n    url: \"https://github.com/thirdweb-dev/js/issues\"\n  },\n  author: \"thirdweb eng <eng@thirdweb.com>\",\n  files: [\"dist/\", \"evm/\"],\n  preconstruct: {\n    entrypoints: [\"index.ts\", \"evm/index.ts\", \"evm/connectors/*/index.ts\", \"evm/connectors/embedded-wallet/implementations/index.ts\", \"evm/wallets/**\"],\n    exports: {\n      envConditions: [\"browser\"]\n    }\n  },\n  sideEffects: false,\n  dependencies: {\n    \"@account-abstraction/contracts\": \"^0.5.0\",\n    \"@account-abstraction/sdk\": \"^0.5.0\",\n    \"@account-abstraction/utils\": \"^0.5.0\",\n    \"@blocto/sdk\": \"^0.5.4\",\n    \"@coinbase/wallet-sdk\": \"^3.7.1\",\n    \"@google-cloud/kms\": \"3.0.1\",\n    \"@magic-ext/connect\": \"^6.7.2\",\n    \"@magic-ext/oauth\": \"^7.6.2\",\n    \"@magic-sdk/provider\": \"^13.6.2\",\n    \"@metamask/eth-sig-util\": \"^4.0.0\",\n    \"@paperxyz/embedded-wallet-service-sdk\": \"^1.2.5\",\n    \"@paperxyz/sdk-common-utilities\": \"^0.1.0\",\n    \"@safe-global/safe-core-sdk\": \"^3.3.4\",\n    \"@safe-global/safe-ethers-adapters\": \"0.1.0-alpha.17\",\n    \"@safe-global/safe-ethers-lib\": \"^1.9.4\",\n    \"@thirdweb-dev/chains\": \"workspace:*\",\n    \"@thirdweb-dev/contracts-js\": \"workspace:*\",\n    \"@thirdweb-dev/sdk\": \"workspace:*\",\n    \"@walletconnect/core\": \"^2.9.1\",\n    \"@walletconnect/ethereum-provider\": \"^2.9.1\",\n    \"@walletconnect/jsonrpc-utils\": \"^1.0.8\",\n    \"@walletconnect/modal\": \"^2.6.1\",\n    \"@walletconnect/types\": \"^2.9.1\",\n    \"@walletconnect/utils\": \"^2.10.2\",\n    \"@walletconnect/web3wallet\": \"^1.8.7\",\n    \"asn1.js\": \"5.4.1\",\n    \"bn.js\": \"5.2.0\",\n    buffer: \"^6.0.3\",\n    \"crypto-js\": \"^4.1.1\",\n    \"eth-provider\": \"^0.13.6\",\n    \"ethereumjs-util\": \"^7.1.3\",\n    eventemitter3: \"^5.0.1\",\n    \"key-encoder\": \"2.0.3\",\n    \"magic-sdk\": \"^13.6.2\",\n    \"web3-core\": \"1.5.2\"\n  },\n  peerDependencies: {\n    \"@aws-sdk/client-secrets-manager\": \"^3.256.0\",\n    \"@noble/ed25519\": \"^1.7.1\",\n    bs58: \"^5.0.0\",\n    ethers: \"^5.7.2\",\n    \"ethers-aws-kms-signer\": \"^1.3.2\",\n    tweetnacl: \"^1.0.3\"\n  },\n  peerDependenciesMeta: {\n    tweetnacl: {\n      optional: true\n    },\n    \"@aws-sdk/client-secrets-manager\": {\n      optional: true\n    },\n    \"ethers-aws-kms-signer\": {\n      optional: true\n    },\n    \"@noble/ed25519\": {\n      optional: true\n    },\n    bs58: {\n      optional: true\n    },\n    ethers: {\n      optional: true\n    }\n  },\n  devDependencies: {\n    \"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n    \"@babel/plugin-proposal-class-properties\": \"7.18.6\",\n    \"@babel/plugin-transform-flow-strip-types\": \"^7.22.5\",\n    \"@babel/plugin-transform-private-methods\": \"7.22.5\",\n    \"@noble/ed25519\": \"^1.7.1\",\n    \"@preconstruct/cli\": \"2.7.0\",\n    \"@thirdweb-dev/tsconfig\": \"workspace:*\",\n    \"@types/bn.js\": \"^5.1.1\",\n    \"@types/crypto-js\": \"^4.1.1\",\n    abitype: \"^0.2.5\",\n    \"babel-plugin-transform-inline-environment-variables\": \"^0.4.4\",\n    bs58: \"^5.0.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint-config-thirdweb\": \"workspace:*\",\n    \"eslint-plugin-better-tree-shaking\": \"0.0.4\",\n    \"ethereum-provider\": \"^0.7.7\",\n    ethers: \"^5.7.2\",\n    \"ethers-aws-kms-signer\": \"^1.3.2\",\n    rimraf: \"^3.0.2\",\n    tweetnacl: \"^1.0.3\",\n    typedoc: \"^0.25.2\",\n    typescript: \"^5.1.6\"\n  },\n  scripts: {\n    format: \"prettier --write 'src/**/*'\",\n    lint: \"eslint src/\",\n    fix: \"eslint src/ --fix\",\n    clean: \"rm -rf dist/\",\n    build: \"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build\",\n    \"preconstruct:fix\": \"preconstruct fix\",\n    push: \"yalc push\",\n    typedoc: \"rimraf typedoc && node typedoc.js\"\n  },\n  engines: {\n    node: \">=18\"\n  }\n};\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : window.bridge !== undefined ? \"webGL\" : \"browser\";\n    }\n    this.userOpJsonRpcProvider = new providers.JsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1\n   * @return userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = deepHexlify(await utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = deepHexlify(await utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider the normal provider\n * @param config see ClientConfig for more info\n * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nasync function create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return await new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi).init();\n}\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.overheads = params.overheads;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n  async init() {\n    if ((await this.provider.getCode(this.entryPointAddress)) === \"0x\") {\n      throw new Error(`entryPoint not deployed at ${this.entryPointAddress}`);\n    }\n    await this.getAccountAddress();\n    return this;\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target\n   * @param value\n   * @param data\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n  async getCounterFactualAddress() {\n    const initCode = this.getAccountInitCode();\n    // use entryPoint to query account address (factory can provide a helper method to do the same, but\n    // this method attempts to be generic\n    try {\n      await this.entryPointView.callStatic.getSenderAddress(initCode);\n    } catch (e) {\n      return e.errorArgs.sender;\n    }\n    throw new Error(\"must handle revert\");\n  }\n\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * should cover cost of putting calldata on-chain, and some overhead.\n   * actual overhead depends on the expected bundle size\n   */\n  async getPreVerificationGas(userOp) {\n    const p = await utils.resolveProperties(userOp);\n    return calcPreVerificationGas(p, this.overheads);\n  }\n\n  /**\n   * ABI-encode a user operation. used for calldata cost estimation\n   */\n  packUserOp(userOp) {\n    return packUserOp(userOp, false);\n  }\n  async encodeUserOpCallDataAndGasLimit(detailsForUserOp, batchData) {\n    const value = parseNumber(detailsForUserOp.value) ?? BigNumber.from(0);\n    const callData = batchData ? detailsForUserOp.data : await this.prepareExecute(detailsForUserOp.target, value, detailsForUserOp.data).then(tx => tx.encode());\n    let callGasLimit;\n    const isPhantom = await this.checkAccountPhantom();\n    if (isPhantom) {\n      // when the account is not deployed yet, we simulate the call to the target contract directly\n      if (batchData) {\n        const limits = await Promise.all(batchData.targets.map((_, i) => this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: batchData.targets[i],\n          data: batchData.data[i]\n        })));\n        callGasLimit = limits.reduce((a, b) => a.add(b), BigNumber.from(0));\n      } else {\n        callGasLimit = await this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: detailsForUserOp.target,\n          data: detailsForUserOp.data\n        });\n      }\n\n      // add 20% overhead for entrypoint checks\n      callGasLimit = callGasLimit.mul(120).div(100);\n      // if the estimation is too low, we use a fixed value of 500k\n      if (callGasLimit.lt(30000)) {\n        callGasLimit = BigNumber.from(500000);\n      }\n    } else {\n      callGasLimit = parseNumber(detailsForUserOp.gasLimit) ?? (await this.provider.estimateGas({\n        from: this.entryPointAddress,\n        to: this.getAccountAddress(),\n        data: callData\n      }));\n    }\n    return {\n      callData,\n      callGasLimit\n    };\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n\n  /**\n   * create a UserOperation, filling all details (except signature)\n   * - if account is not yet created, add initCode to deploy it.\n   * - if gas or nonce are missing, read them from the chain (note that we can't fill gaslimit before the account is created)\n   * @param info\n   */\n  async createUnsignedUserOp(info, batchData) {\n    const {\n      callData,\n      callGasLimit\n    } = await this.encodeUserOpCallDataAndGasLimit(info, batchData);\n    const initCode = await this.getInitCode();\n    const initGas = await this.estimateCreationGas(initCode);\n    const verificationGasLimit = BigNumber.from(await this.getVerificationGasLimit()).add(initGas);\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      const feeData = await getDynamicFeeData(this.provider);\n      if (!maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n      }\n      if (!maxFeePerGas) {\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n        const network = await this.provider.getNetwork();\n        const chainId = network.chainId;\n        if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n          maxPriorityFeePerGas = maxFeePerGas;\n        }\n      }\n    }\n    const partialUserOp = {\n      sender: this.getAccountAddress(),\n      nonce: info.nonce ?? this.getNonce(),\n      initCode,\n      callData,\n      callGasLimit,\n      verificationGasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      paymasterAndData: \"0x\"\n    };\n    let paymasterAndData;\n    let userOp = partialUserOp;\n    if (this.paymasterAPI) {\n      // fill (partial) preVerificationGas (all except the cost of the generated paymasterAndData)\n      try {\n        // userOp.preVerificationGas contains a promise that will resolve to an error.\n        await ethers.utils.resolveProperties(userOp);\n        // eslint-disable-next-line no-empty\n      } catch (_) {}\n      const pmOp = {\n        sender: userOp.sender,\n        nonce: userOp.nonce,\n        initCode: userOp.initCode,\n        callData: userOp.callData,\n        callGasLimit: userOp.callGasLimit,\n        verificationGasLimit: userOp.verificationGasLimit,\n        maxFeePerGas: userOp.maxFeePerGas,\n        maxPriorityFeePerGas: userOp.maxPriorityFeePerGas,\n        // A dummy value here is required in order to calculate a correct preVerificationGas value.\n        paymasterAndData: DUMMY_PAYMASTER_AND_DATA,\n        signature: ethers.utils.hexlify(Buffer.alloc(SIG_SIZE, 1))\n      };\n      userOp = await ethers.utils.resolveProperties(pmOp);\n      const preVerificationGas = calcPreVerificationGas(userOp);\n      userOp.preVerificationGas = preVerificationGas;\n      paymasterAndData = await this.paymasterAPI.getPaymasterAndData(userOp);\n      if (paymasterAndData === \"0x\") {\n        paymasterAndData = undefined;\n      }\n    }\n    if (paymasterAndData) {\n      userOp.paymasterAndData = paymasterAndData;\n      return {\n        ...userOp,\n        signature: \"\"\n      };\n    } else {\n      const modifiedOp = {\n        ...userOp,\n        paymasterAndData: \"0x\"\n      };\n      modifiedOp.preVerificationGas = await this.getPreVerificationGas(modifiedOp);\n      return {\n        ...modifiedOp,\n        signature: \"\"\n      };\n    }\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp the UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * helper method: create and sign a user operation.\n   * @param info transaction details for the userOp\n   */\n  async createSignedUserOp(info, batchData) {\n    return await this.signUserOp(await this.createUnsignedUserOp(info, batchData));\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout stop waiting after this timeout\n   * @param interval time to wait between polls.\n   * @return the transactionHash this userOp was mined, or null if not found.\n   */\n  async getUserOpReceipt(userOpHash) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n      if (events[0]) {\n        return events[0].transactionHash;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return null;\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    console.log(\"Deploying smart wallet via factory\");\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    try {\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n    } catch (e) {\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\n    }\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n}\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.gasless ? this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey) : undefined,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = await create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction the transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transactions\n   * @returns the awaitable transaction\n   */\n  async send(transaction) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async execute(transaction) {\n    const tx = await this.send(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, batchData);\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async executeBatch(transactions) {\n    const tx = await this.sendBatch(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction);\n  }\n  async executeRaw(transaction) {\n    const tx = await this.sendRaw(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, batch.batchData // batched tx flag\n    );\n  }\n\n  async executeBatchRaw(transactions) {\n    const tx = await this.sendBatchRaw(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n  async estimateRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0)\n    });\n  }\n  async estimateBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n  async estimateBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deploy() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      targets: [],\n      data: []\n    } // batched tx flag to avoid hitting the Router fallback method\n    );\n\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy();\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns the account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n    }\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress());\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns the account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        try {\n          return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n        } catch (e) {\n          console.log(\"Falling back to old factory\");\n          // TODO remove after a few versions\n          return factory.call(\"getAddress\", [owner]);\n        }\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, batchData) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [{\n      callGasLimit: transactionGasLimit\n    }, gasPrice] = await Promise.all([this.accountApi.encodeUserOpCallDataAndGasLimit(tx, batchData), getGasPrice(provider)]);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data\n      }\n    };\n  }\n}\nexport { SmartWalletConnector };","map":{"version":3,"names":["C","Connector","PaymasterAPI","calcPreVerificationGas","ethers","utils","Signer","providers","BigNumber","i","isTwUrl","EntryPoint__factory","_","_defineProperty","deepHexlify","packUserOp","AddressZero","A","ACCOUNT_CORE_ABI","a","ENTRYPOINT_ADDRESS","getDynamicFeeData","ThirdwebSDK","LOCAL_NODE_PKEY","getChainProvider","getGasPrice","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","toJSON","op","resolveProperties","then","userOp","Object","keys","map","key","val","startsWith","hexValue","reduce","set","_ref","k","v","getUserOpHashV06","entryPoint","chainId","hashedUserOp","sender","nonce","initCodeHash","keccak256","initCode","callDataHash","callData","callGasLimit","verificationGasLimit","preVerificationGas","maxFeePerGas","maxPriorityFeePerGas","paymasterAndDataHash","paymasterAndData","userOpType","components","type","name","encoded","defaultAbiCoder","encode","userOpHash","enc","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","randomNonce","hexString","toString","length","from","concat","SIG_SIZE","DUMMY_PAYMASTER_AND_DATA","VerifyingPaymasterAPI","constructor","paymasterUrl","clientId","secretKey","getPaymasterAndData","headers","Error","globalThis","APP_BUNDLE_ID","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","response","fetch","method","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","result","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","timeout","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","console","log","parseInt","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","message","revertReason","decode","substring","ERC4337EthersSigner","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","defineReadOnly","sendTransaction","transaction","batchData","tx","verifyAllNecessaryFields","multidimensionalNonce","userOperation","createSignedUserOp","target","to","data","value","gasLimit","transactionResponse","constructUserOpTransactionResponse","sendUserOpToBundler","unwrapError","errorIn","errorMsg","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","isNotDeployed","checkAccountPhantom","wait","signTransaction","ERC4337EthersProvider","BaseProvider","originalProvider","signer","init","initializedBlockNumber","getBlockNumber","getSigner","perform","encodeUserOpCallDataAndGasLimit","getTransaction","transactionHash","Promise","getAccountAddress","waitForTransaction","confirmations","listener","undefined","userOp1","getUserOpHash","waitForUserOp","hash","detectNetwork","pkg","version","main","module","types","browser","exports","repository","license","bugs","url","author","files","preconstruct","entrypoints","envConditions","sideEffects","dependencies","buffer","eventemitter3","peerDependencies","bs58","tweetnacl","peerDependenciesMeta","optional","devDependencies","abitype","rimraf","typedoc","typescript","scripts","format","lint","fix","clean","build","push","engines","node","HttpRpcClient","bundlerUrl","entryPointAddress","bundleId","window","bridge","userOpJsonRpcProvider","JsonRpcProvider","initializing","validateChainId","chain","send","bundlerChain","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","create4337Provider","accountApi","localSigner","BaseAccountAPI","overheads","accountAddress","paymasterAPI","entryPointView","constants","getCode","isPhantom","senderAddressCode","getCounterFactualAddress","getAccountInitCode","callStatic","getSenderAddress","e","errorArgs","getInitCode","getVerificationGasLimit","getPreVerificationGas","p","detailsForUserOp","parseNumber","prepareExecute","limits","all","targets","estimateGas","b","add","mul","div","lt","getNetwork","net","senderAddress","estimateCreationGas","deployerAddress","deployerCallData","createUnsignedUserOp","info","initGas","feeData","network","partialUserOp","getNonce","pmOp","signature","hexlify","Buffer","alloc","modifiedOp","signUserOp","signUserOpHash","getUserOpReceipt","interval","endtime","Date","now","events","AccountAPI","sdk","fromPrivateKey","getChainId","n","getAccountContract","accountContract","accountInfo","abi","getContract","factory","getFactoryContract","factoryInfo","createAccount","estimateGasCost","ether","hexConcat","factoryContract","factoryAddress","execute","prepareExecuteBatch","values","datas","prepare","arrayify","isAcountDeployed","SmartWalletConnector","initialize","personalWallet","providerConfig","gasless","defaultFactoryInfo","defaultAccountInfo","aaProvider","connectionArgs","getProvider","isConnected","disconnect","switchChain","currentChainId","setupListeners","updateChains","chains","hasPermissionToExecute","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","estimateRaw","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","fromSigner","owner","toUtf8Bytes","call","deployGasLimit","estimateDeploymentGasLimit","transactionGasLimit","gasPrice","transactionCost","deployCost","totalCost","formatEther","wei","details","resolvedTxs"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { PaymasterAPI, calcPreVerificationGas } from '@account-abstraction/sdk';\nimport { ethers, utils, Signer, providers, BigNumber } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { deepHexlify, packUserOp, AddressZero } from '@account-abstraction/utils';\nimport { A as ACCOUNT_CORE_ABI, a as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-1ba9df2b.browser.esm.js';\nimport { getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction toJSON(op) {\n  return ethers.utils.resolveProperties(op).then(userOp => Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = ethers.utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {}));\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return ethers.BigNumber.from(ethers.utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst SIG_SIZE = 65;\nconst DUMMY_PAYMASTER_AND_DATA = \"0x0101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\";\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await toJSON(userOp), {\n          entryPoint: this.entryPoint\n        }]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (res.result) {\n      const result = res.result.paymasterAndData || res.result;\n      return result.toString();\n    } else {\n      throw new Error(`Paymaster returned no result from ${this.paymasterUrl}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, \"latest\");\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, batchData) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const userOperation = await this.smartAccountAPI.createSignedUserOp({\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, batchData);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n  async signMessage(message) {\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    return await this.originalSigner.signMessage(message);\n  }\n  async signTransaction(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transaction) {\n    throw new Error(\"not implemented\");\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n\n  /**\n   * finish intializing the provider.\n   * MUST be called after construction, before using the provider.\n   */\n  async init() {\n    // await this.httpRpcClient.validateChainId()\n    this.initializedBlockNumber = await this.originalProvider.getBlockNumber();\n    await this.smartAccountAPI.init();\n    // await this.signer.init()\n    return this;\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // hijack this to estimate gas from the entrypoint instead\n      const {\n        callGasLimit\n      } = await this.smartAccountAPI.encodeUserOpCallDataAndGasLimit({\n        target: params.transaction.to,\n        data: params.transaction.data,\n        value: params.transaction.value,\n        gasLimit: params.transaction.gasLimit\n      });\n      return callGasLimit;\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitForUserOp();\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\nvar pkg = {\n\tname: \"@thirdweb-dev/wallets\",\n\tversion: \"2.0.10\",\n\tmain: \"dist/thirdweb-dev-wallets.cjs.js\",\n\tmodule: \"dist/thirdweb-dev-wallets.esm.js\",\n\ttypes: \"dist/thirdweb-dev-wallets.cjs.d.ts\",\n\tbrowser: {\n\t\t\"./dist/thirdweb-dev-wallets.esm.js\": \"./dist/thirdweb-dev-wallets.browser.esm.js\"\n\t},\n\texports: {\n\t\t\".\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./dist/thirdweb-dev-wallets.browser.esm.js\",\n\t\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.cjs.js\"\n\t\t},\n\t\t\"./evm\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/base\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/async\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/ethers\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/gcp-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/abstract\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/private-key\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/paper-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/paper\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/rainbow-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/rainbow\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet-node\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-secrets-manager\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet/implementations\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js\"\n\t\t},\n\t\t\"./package.json\": \"./package.json\"\n\t},\n\trepository: \"https://github.com/thirdweb-dev/js/tree/main/packages/wallets\",\n\tlicense: \"Apache-2.0\",\n\tbugs: {\n\t\turl: \"https://github.com/thirdweb-dev/js/issues\"\n\t},\n\tauthor: \"thirdweb eng <eng@thirdweb.com>\",\n\tfiles: [\n\t\t\"dist/\",\n\t\t\"evm/\"\n\t],\n\tpreconstruct: {\n\t\tentrypoints: [\n\t\t\t\"index.ts\",\n\t\t\t\"evm/index.ts\",\n\t\t\t\"evm/connectors/*/index.ts\",\n\t\t\t\"evm/connectors/embedded-wallet/implementations/index.ts\",\n\t\t\t\"evm/wallets/**\"\n\t\t],\n\t\texports: {\n\t\t\tenvConditions: [\n\t\t\t\t\"browser\"\n\t\t\t]\n\t\t}\n\t},\n\tsideEffects: false,\n\tdependencies: {\n\t\t\"@account-abstraction/contracts\": \"^0.5.0\",\n\t\t\"@account-abstraction/sdk\": \"^0.5.0\",\n\t\t\"@account-abstraction/utils\": \"^0.5.0\",\n\t\t\"@blocto/sdk\": \"^0.5.4\",\n\t\t\"@coinbase/wallet-sdk\": \"^3.7.1\",\n\t\t\"@google-cloud/kms\": \"3.0.1\",\n\t\t\"@magic-ext/connect\": \"^6.7.2\",\n\t\t\"@magic-ext/oauth\": \"^7.6.2\",\n\t\t\"@magic-sdk/provider\": \"^13.6.2\",\n\t\t\"@metamask/eth-sig-util\": \"^4.0.0\",\n\t\t\"@paperxyz/embedded-wallet-service-sdk\": \"^1.2.5\",\n\t\t\"@paperxyz/sdk-common-utilities\": \"^0.1.0\",\n\t\t\"@safe-global/safe-core-sdk\": \"^3.3.4\",\n\t\t\"@safe-global/safe-ethers-adapters\": \"0.1.0-alpha.17\",\n\t\t\"@safe-global/safe-ethers-lib\": \"^1.9.4\",\n\t\t\"@thirdweb-dev/chains\": \"workspace:*\",\n\t\t\"@thirdweb-dev/contracts-js\": \"workspace:*\",\n\t\t\"@thirdweb-dev/sdk\": \"workspace:*\",\n\t\t\"@walletconnect/core\": \"^2.9.1\",\n\t\t\"@walletconnect/ethereum-provider\": \"^2.9.1\",\n\t\t\"@walletconnect/jsonrpc-utils\": \"^1.0.8\",\n\t\t\"@walletconnect/modal\": \"^2.6.1\",\n\t\t\"@walletconnect/types\": \"^2.9.1\",\n\t\t\"@walletconnect/utils\": \"^2.10.2\",\n\t\t\"@walletconnect/web3wallet\": \"^1.8.7\",\n\t\t\"asn1.js\": \"5.4.1\",\n\t\t\"bn.js\": \"5.2.0\",\n\t\tbuffer: \"^6.0.3\",\n\t\t\"crypto-js\": \"^4.1.1\",\n\t\t\"eth-provider\": \"^0.13.6\",\n\t\t\"ethereumjs-util\": \"^7.1.3\",\n\t\teventemitter3: \"^5.0.1\",\n\t\t\"key-encoder\": \"2.0.3\",\n\t\t\"magic-sdk\": \"^13.6.2\",\n\t\t\"web3-core\": \"1.5.2\"\n\t},\n\tpeerDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.256.0\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\tbs58: \"^5.0.0\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\ttweetnacl: \"^1.0.3\"\n\t},\n\tpeerDependenciesMeta: {\n\t\ttweetnacl: {\n\t\t\toptional: true\n\t\t},\n\t\t\"@aws-sdk/client-secrets-manager\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"ethers-aws-kms-signer\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@noble/ed25519\": {\n\t\t\toptional: true\n\t\t},\n\t\tbs58: {\n\t\t\toptional: true\n\t\t},\n\t\tethers: {\n\t\t\toptional: true\n\t\t}\n\t},\n\tdevDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n\t\t\"@babel/plugin-proposal-class-properties\": \"7.18.6\",\n\t\t\"@babel/plugin-transform-flow-strip-types\": \"^7.22.5\",\n\t\t\"@babel/plugin-transform-private-methods\": \"7.22.5\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\t\"@preconstruct/cli\": \"2.7.0\",\n\t\t\"@thirdweb-dev/tsconfig\": \"workspace:*\",\n\t\t\"@types/bn.js\": \"^5.1.1\",\n\t\t\"@types/crypto-js\": \"^4.1.1\",\n\t\tabitype: \"^0.2.5\",\n\t\t\"babel-plugin-transform-inline-environment-variables\": \"^0.4.4\",\n\t\tbs58: \"^5.0.0\",\n\t\t\"cross-env\": \"^7.0.3\",\n\t\t\"eslint-config-thirdweb\": \"workspace:*\",\n\t\t\"eslint-plugin-better-tree-shaking\": \"0.0.4\",\n\t\t\"ethereum-provider\": \"^0.7.7\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\trimraf: \"^3.0.2\",\n\t\ttweetnacl: \"^1.0.3\",\n\t\ttypedoc: \"^0.25.2\",\n\t\ttypescript: \"^5.1.6\"\n\t},\n\tscripts: {\n\t\tformat: \"prettier --write 'src/**/*'\",\n\t\tlint: \"eslint src/\",\n\t\tfix: \"eslint src/ --fix\",\n\t\tclean: \"rm -rf dist/\",\n\t\tbuild: \"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build\",\n\t\t\"preconstruct:fix\": \"preconstruct fix\",\n\t\tpush: \"yalc push\",\n\t\ttypedoc: \"rimraf typedoc && node typedoc.js\"\n\t},\n\tengines: {\n\t\tnode: \">=18\"\n\t}\n};\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : window.bridge !== undefined ? \"webGL\" : \"browser\" ;\n    }\n    this.userOpJsonRpcProvider = new providers.JsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1\n   * @return userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = deepHexlify(await utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = deepHexlify(await utils.resolveProperties(userOp1));\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider the normal provider\n * @param config see ClientConfig for more info\n * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nasync function create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return await new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi).init();\n}\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.overheads = params.overheads;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n  async init() {\n    if ((await this.provider.getCode(this.entryPointAddress)) === \"0x\") {\n      throw new Error(`entryPoint not deployed at ${this.entryPointAddress}`);\n    }\n    await this.getAccountAddress();\n    return this;\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target\n   * @param value\n   * @param data\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n  async getCounterFactualAddress() {\n    const initCode = this.getAccountInitCode();\n    // use entryPoint to query account address (factory can provide a helper method to do the same, but\n    // this method attempts to be generic\n    try {\n      await this.entryPointView.callStatic.getSenderAddress(initCode);\n    } catch (e) {\n      return e.errorArgs.sender;\n    }\n    throw new Error(\"must handle revert\");\n  }\n\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * should cover cost of putting calldata on-chain, and some overhead.\n   * actual overhead depends on the expected bundle size\n   */\n  async getPreVerificationGas(userOp) {\n    const p = await utils.resolveProperties(userOp);\n    return calcPreVerificationGas(p, this.overheads);\n  }\n\n  /**\n   * ABI-encode a user operation. used for calldata cost estimation\n   */\n  packUserOp(userOp) {\n    return packUserOp(userOp, false);\n  }\n  async encodeUserOpCallDataAndGasLimit(detailsForUserOp, batchData) {\n    const value = parseNumber(detailsForUserOp.value) ?? BigNumber.from(0);\n    const callData = batchData ? detailsForUserOp.data : await this.prepareExecute(detailsForUserOp.target, value, detailsForUserOp.data).then(tx => tx.encode());\n    let callGasLimit;\n    const isPhantom = await this.checkAccountPhantom();\n    if (isPhantom) {\n      // when the account is not deployed yet, we simulate the call to the target contract directly\n      if (batchData) {\n        const limits = await Promise.all(batchData.targets.map((_, i) => this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: batchData.targets[i],\n          data: batchData.data[i]\n        })));\n        callGasLimit = limits.reduce((a, b) => a.add(b), BigNumber.from(0));\n      } else {\n        callGasLimit = await this.provider.estimateGas({\n          from: this.getAccountAddress(),\n          to: detailsForUserOp.target,\n          data: detailsForUserOp.data\n        });\n      }\n\n      // add 20% overhead for entrypoint checks\n      callGasLimit = callGasLimit.mul(120).div(100);\n      // if the estimation is too low, we use a fixed value of 500k\n      if (callGasLimit.lt(30000)) {\n        callGasLimit = BigNumber.from(500000);\n      }\n    } else {\n      callGasLimit = parseNumber(detailsForUserOp.gasLimit) ?? (await this.provider.estimateGas({\n        from: this.entryPointAddress,\n        to: this.getAccountAddress(),\n        data: callData\n      }));\n    }\n    return {\n      callData,\n      callGasLimit\n    };\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n\n  /**\n   * create a UserOperation, filling all details (except signature)\n   * - if account is not yet created, add initCode to deploy it.\n   * - if gas or nonce are missing, read them from the chain (note that we can't fill gaslimit before the account is created)\n   * @param info\n   */\n  async createUnsignedUserOp(info, batchData) {\n    const {\n      callData,\n      callGasLimit\n    } = await this.encodeUserOpCallDataAndGasLimit(info, batchData);\n    const initCode = await this.getInitCode();\n    const initGas = await this.estimateCreationGas(initCode);\n    const verificationGasLimit = BigNumber.from(await this.getVerificationGasLimit()).add(initGas);\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      const feeData = await getDynamicFeeData(this.provider);\n      if (!maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n      }\n      if (!maxFeePerGas) {\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n        const network = await this.provider.getNetwork();\n        const chainId = network.chainId;\n        if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n          maxPriorityFeePerGas = maxFeePerGas;\n        }\n      }\n    }\n    const partialUserOp = {\n      sender: this.getAccountAddress(),\n      nonce: info.nonce ?? this.getNonce(),\n      initCode,\n      callData,\n      callGasLimit,\n      verificationGasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      paymasterAndData: \"0x\"\n    };\n    let paymasterAndData;\n    let userOp = partialUserOp;\n    if (this.paymasterAPI) {\n      // fill (partial) preVerificationGas (all except the cost of the generated paymasterAndData)\n      try {\n        // userOp.preVerificationGas contains a promise that will resolve to an error.\n        await ethers.utils.resolveProperties(userOp);\n        // eslint-disable-next-line no-empty\n      } catch (_) {}\n      const pmOp = {\n        sender: userOp.sender,\n        nonce: userOp.nonce,\n        initCode: userOp.initCode,\n        callData: userOp.callData,\n        callGasLimit: userOp.callGasLimit,\n        verificationGasLimit: userOp.verificationGasLimit,\n        maxFeePerGas: userOp.maxFeePerGas,\n        maxPriorityFeePerGas: userOp.maxPriorityFeePerGas,\n        // A dummy value here is required in order to calculate a correct preVerificationGas value.\n        paymasterAndData: DUMMY_PAYMASTER_AND_DATA,\n        signature: ethers.utils.hexlify(Buffer.alloc(SIG_SIZE, 1))\n      };\n      userOp = await ethers.utils.resolveProperties(pmOp);\n      const preVerificationGas = calcPreVerificationGas(userOp);\n      userOp.preVerificationGas = preVerificationGas;\n      paymasterAndData = await this.paymasterAPI.getPaymasterAndData(userOp);\n      if (paymasterAndData === \"0x\") {\n        paymasterAndData = undefined;\n      }\n    }\n    if (paymasterAndData) {\n      userOp.paymasterAndData = paymasterAndData;\n      return {\n        ...userOp,\n        signature: \"\"\n      };\n    } else {\n      const modifiedOp = {\n        ...userOp,\n        paymasterAndData: \"0x\"\n      };\n      modifiedOp.preVerificationGas = await this.getPreVerificationGas(modifiedOp);\n      return {\n        ...modifiedOp,\n        signature: \"\"\n      };\n    }\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp the UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * helper method: create and sign a user operation.\n   * @param info transaction details for the userOp\n   */\n  async createSignedUserOp(info, batchData) {\n    return await this.signUserOp(await this.createUnsignedUserOp(info, batchData));\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout stop waiting after this timeout\n   * @param interval time to wait between polls.\n   * @return the transactionHash this userOp was mined, or null if not found.\n   */\n  async getUserOpReceipt(userOpHash) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n      if (events[0]) {\n        return events[0].transactionHash;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return null;\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    console.log(\"Deploying smart wallet via factory\");\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    try {\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n    } catch (e) {\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\n    }\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.gasless ? this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey) : undefined,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = await create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction the transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transactions\n   * @returns the awaitable transaction\n   */\n  async send(transaction) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async execute(transaction) {\n    const tx = await this.send(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, batchData);\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async executeBatch(transactions) {\n    const tx = await this.sendBatch(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction);\n  }\n  async executeRaw(transaction) {\n    const tx = await this.sendRaw(transaction);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, batch.batchData // batched tx flag\n    );\n  }\n\n  async executeBatchRaw(transactions) {\n    const tx = await this.sendBatchRaw(transactions);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    });\n  }\n  async estimateRaw(transaction) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0)\n    });\n  }\n  async estimateBatch(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n  async estimateBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue()\n    }, batchData);\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deploy() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      targets: [],\n      data: []\n    } // batched tx flag to avoid hitting the Router fallback method\n    );\n\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy();\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns the account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n    }\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress());\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns the account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        try {\n          return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n        } catch (e) {\n          console.log(\"Falling back to old factory\");\n          // TODO remove after a few versions\n          return factory.call(\"getAddress\", [owner]);\n        }\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, batchData) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [{\n      callGasLimit: transactionGasLimit\n    }, gasPrice] = await Promise.all([this.accountApi.encodeUserOpCallDataAndGasLimit(tx, batchData), getGasPrice(provider)]);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}