{"ast":null,"code":"import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };","map":{"version":3,"names":["_","_defineProperty","RpcError","Error","constructor","message","options","cause","code","data","Number","isInteger","JSON","stringify","ProviderRpcError","AddChainError","arguments","ChainNotConfiguredError","_ref","chainId","connectorId","ConnectorNotFoundError","ResourceUnavailableError","SwitchChainError","UserRejectedRequestError","A","C","P","R","S","U","a"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/dist/errors-d961f852.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}