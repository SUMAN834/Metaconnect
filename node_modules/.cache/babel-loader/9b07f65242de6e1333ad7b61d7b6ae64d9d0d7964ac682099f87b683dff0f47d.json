{"ast":null,"code":"function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nexport { _classPrivateFieldInitSpec as _, _classPrivateFieldSet as a, _classPrivateFieldGet as b, _checkPrivateRedeclaration as c };","map":{"version":3,"names":["_checkPrivateRedeclaration","obj","privateCollection","has","TypeError","_classPrivateFieldInitSpec","privateMap","value","set","_classApplyDescriptorGet","receiver","descriptor","get","call","_classExtractFieldDescriptor","action","_classPrivateFieldGet","_classApplyDescriptorSet","writable","_classPrivateFieldSet","_","a","b","c"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/dist/classPrivateFieldSet-a5db7c83.browser.esm.js"],"sourcesContent":["function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n\nexport { _classPrivateFieldInitSpec as _, _classPrivateFieldSet as a, _classPrivateFieldGet as b, _checkPrivateRedeclaration as c };\n"],"mappings":"AAAA,SAASA,0BAA0BA,CAACC,GAAG,EAAEC,iBAAiB,EAAE;EAC1D,IAAIA,iBAAiB,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE;IAC9B,MAAM,IAAIG,SAAS,CAAC,gEAAgE,CAAC;EACvF;AACF;AAEA,SAASC,0BAA0BA,CAACJ,GAAG,EAAEK,UAAU,EAAEC,KAAK,EAAE;EAC1DP,0BAA0B,CAACC,GAAG,EAAEK,UAAU,CAAC;EAC3CA,UAAU,CAACE,GAAG,CAACP,GAAG,EAAEM,KAAK,CAAC;AAC5B;AAEA,SAASE,wBAAwBA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EACtD,IAAIA,UAAU,CAACC,GAAG,EAAE;IAClB,OAAOD,UAAU,CAACC,GAAG,CAACC,IAAI,CAACH,QAAQ,CAAC;EACtC;EACA,OAAOC,UAAU,CAACJ,KAAK;AACzB;AAEA,SAASO,4BAA4BA,CAACJ,QAAQ,EAAEJ,UAAU,EAAES,MAAM,EAAE;EAClE,IAAI,CAACT,UAAU,CAACH,GAAG,CAACO,QAAQ,CAAC,EAAE;IAC7B,MAAM,IAAIN,SAAS,CAAC,eAAe,GAAGW,MAAM,GAAG,gCAAgC,CAAC;EAClF;EACA,OAAOT,UAAU,CAACM,GAAG,CAACF,QAAQ,CAAC;AACjC;AAEA,SAASM,qBAAqBA,CAACN,QAAQ,EAAEJ,UAAU,EAAE;EACnD,IAAIK,UAAU,GAAGG,4BAA4B,CAACJ,QAAQ,EAAEJ,UAAU,EAAE,KAAK,CAAC;EAC1E,OAAOG,wBAAwB,CAACC,QAAQ,EAAEC,UAAU,CAAC;AACvD;AAEA,SAASM,wBAAwBA,CAACP,QAAQ,EAAEC,UAAU,EAAEJ,KAAK,EAAE;EAC7D,IAAII,UAAU,CAACH,GAAG,EAAE;IAClBG,UAAU,CAACH,GAAG,CAACK,IAAI,CAACH,QAAQ,EAAEH,KAAK,CAAC;EACtC,CAAC,MAAM;IACL,IAAI,CAACI,UAAU,CAACO,QAAQ,EAAE;MACxB,MAAM,IAAId,SAAS,CAAC,0CAA0C,CAAC;IACjE;IACAO,UAAU,CAACJ,KAAK,GAAGA,KAAK;EAC1B;AACF;AAEA,SAASY,qBAAqBA,CAACT,QAAQ,EAAEJ,UAAU,EAAEC,KAAK,EAAE;EAC1D,IAAII,UAAU,GAAGG,4BAA4B,CAACJ,QAAQ,EAAEJ,UAAU,EAAE,KAAK,CAAC;EAC1EW,wBAAwB,CAACP,QAAQ,EAAEC,UAAU,EAAEJ,KAAK,CAAC;EACrD,OAAOA,KAAK;AACd;AAEA,SAASF,0BAA0B,IAAIe,CAAC,EAAED,qBAAqB,IAAIE,CAAC,EAAEL,qBAAqB,IAAIM,CAAC,EAAEtB,0BAA0B,IAAIuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}