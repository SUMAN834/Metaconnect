{"ast":null,"code":"import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { Contract, providers, utils } from 'ethers';\nimport EventEmitter from 'eventemitter3';\nimport { isNativeToken, fetchCurrencyValue, normalizePriceValue, NATIVE_TOKEN_ADDRESS } from '@thirdweb-dev/sdk';\nconst ERC20WithDecimalsAbi = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Transfer\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"who\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transfer\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transferFrom\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    internalType: \"uint8\",\n    name: \"\",\n    type: \"uint8\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nfunction createErc20(provider, currencyAddress) {\n  return new Contract(currencyAddress, ERC20WithDecimalsAbi, provider);\n}\n\n// TODO improve this\nfunction chainIdToThirdwebRpc(chainId, clientId) {\n  return `https://${chainId}.rpc.thirdweb.com${clientId ? `/${clientId}` : \"\"}${typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? `?bundleId=${globalThis.APP_BUNDLE_ID}` : \"\"}`;\n}\nconst EIP1271_ABI = [\"function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)\"];\nconst EIP1271_MAGICVALUE = \"0x1626ba7e\";\nasync function checkContractWalletSignature(message, signature, address, chainId) {\n  //TODO:  A provider should be passed in instead of creating a new one here.\n  const provider = new providers.JsonRpcProvider(chainIdToThirdwebRpc(chainId));\n  const walletContract = new Contract(address, EIP1271_ABI, provider);\n  const _hashMessage = utils.hashMessage(message);\n  try {\n    const res = await walletContract.isValidSignature(_hashMessage, signature);\n    return res === EIP1271_MAGICVALUE;\n  } catch {\n    return false;\n  }\n}\nclass AbstractWallet extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"type\", \"evm\");\n  }\n  /**\n   * @returns the account address from connected wallet\n   */\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n\n  /**\n   * @returns the native token balance of the connected wallet\n   */\n  async getBalance() {\n    let currencyAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NATIVE_TOKEN_ADDRESS;\n    const signer = await this.getSigner();\n    const address = await this.getAddress();\n    if (!signer.provider) {\n      throw new Error(\"Please connect a provider\");\n    }\n    let balance;\n    if (isNativeToken(currencyAddress)) {\n      balance = await signer.provider.getBalance(address);\n    } else {\n      const erc20 = createErc20(signer, currencyAddress);\n      balance = await erc20.balanceOf(address);\n    }\n\n    // Note: assumes that the native currency decimals is 18, which isn't always correct\n    return await fetchCurrencyValue(signer.provider, currencyAddress, balance);\n  }\n\n  /**\n   * @returns the chain id from connected wallet\n   */\n  async getChainId() {\n    const signer = await this.getSigner();\n    return signer.getChainId();\n  }\n  async transfer(to, amount) {\n    let currencyAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NATIVE_TOKEN_ADDRESS;\n    const signer = await this.getSigner();\n    const from = await this.getAddress();\n    if (!signer.provider) {\n      throw new Error(\"Please connect a provider\");\n    }\n    const value = await normalizePriceValue(signer.provider, amount, currencyAddress);\n    if (isNativeToken(currencyAddress)) {\n      const tx = await signer.sendTransaction({\n        from,\n        to,\n        value\n      });\n      return {\n        receipt: await tx.wait()\n      };\n    } else {\n      const erc20 = createErc20(signer, currencyAddress);\n      const tx = await erc20.transfer(to, value);\n      return {\n        receipt: await tx.wait()\n      };\n    }\n  }\n\n  /**\n   * @returns the signature of the message\n   */\n  async signMessage(message) {\n    const signer = await this.getSigner();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * verify the signature of a message\n   * @returns `true` if the signature is valid, `false` otherwise\n   */\n  async verifySignature(message, signature, address, chainId) {\n    try {\n      const messageHash = utils.hashMessage(message);\n      const messageHashBytes = utils.arrayify(messageHash);\n      const recoveredAddress = utils.recoverAddress(messageHashBytes, signature);\n      if (recoveredAddress === address) {\n        return true;\n      }\n    } catch {\n      // no-op\n    }\n\n    // Check if the address is a smart contract wallet\n    if (chainId !== undefined) {\n      try {\n        const isValid = await checkContractWalletSignature(message, signature, address, chainId || 1);\n        return isValid;\n      } catch {\n        // no-op\n      }\n    }\n    return false;\n  }\n}\nexport { AbstractWallet, checkContractWalletSignature };","map":{"version":3,"names":["_","_defineProperty","Contract","providers","utils","EventEmitter","isNativeToken","fetchCurrencyValue","normalizePriceValue","NATIVE_TOKEN_ADDRESS","ERC20WithDecimalsAbi","anonymous","inputs","indexed","internalType","name","type","outputs","stateMutability","createErc20","provider","currencyAddress","chainIdToThirdwebRpc","chainId","clientId","globalThis","APP_BUNDLE_ID","EIP1271_ABI","EIP1271_MAGICVALUE","checkContractWalletSignature","message","signature","address","JsonRpcProvider","walletContract","_hashMessage","hashMessage","res","isValidSignature","AbstractWallet","constructor","arguments","getAddress","signer","getSigner","getBalance","length","undefined","Error","balance","erc20","balanceOf","getChainId","transfer","to","amount","from","value","tx","sendTransaction","receipt","wait","signMessage","verifySignature","messageHash","messageHashBytes","arrayify","recoveredAddress","recoverAddress","isValid"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { Contract, providers, utils } from 'ethers';\nimport EventEmitter from 'eventemitter3';\nimport { isNativeToken, fetchCurrencyValue, normalizePriceValue, NATIVE_TOKEN_ADDRESS } from '@thirdweb-dev/sdk';\n\nconst ERC20WithDecimalsAbi = [{\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Transfer\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"who\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transfer\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transferFrom\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    internalType: \"uint8\",\n    name: \"\",\n    type: \"uint8\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nfunction createErc20(provider, currencyAddress) {\n  return new Contract(currencyAddress, ERC20WithDecimalsAbi, provider);\n}\n\n// TODO improve this\nfunction chainIdToThirdwebRpc(chainId, clientId) {\n  return `https://${chainId}.rpc.thirdweb.com${clientId ? `/${clientId}` : \"\"}${typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? `?bundleId=${globalThis.APP_BUNDLE_ID}` : \"\"}`;\n}\nconst EIP1271_ABI = [\"function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)\"];\nconst EIP1271_MAGICVALUE = \"0x1626ba7e\";\nasync function checkContractWalletSignature(message, signature, address, chainId) {\n  //TODO:  A provider should be passed in instead of creating a new one here.\n  const provider = new providers.JsonRpcProvider(chainIdToThirdwebRpc(chainId));\n  const walletContract = new Contract(address, EIP1271_ABI, provider);\n  const _hashMessage = utils.hashMessage(message);\n  try {\n    const res = await walletContract.isValidSignature(_hashMessage, signature);\n    return res === EIP1271_MAGICVALUE;\n  } catch {\n    return false;\n  }\n}\nclass AbstractWallet extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"type\", \"evm\");\n  }\n  /**\n   * @returns the account address from connected wallet\n   */\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n\n  /**\n   * @returns the native token balance of the connected wallet\n   */\n  async getBalance() {\n    let currencyAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NATIVE_TOKEN_ADDRESS;\n    const signer = await this.getSigner();\n    const address = await this.getAddress();\n    if (!signer.provider) {\n      throw new Error(\"Please connect a provider\");\n    }\n    let balance;\n    if (isNativeToken(currencyAddress)) {\n      balance = await signer.provider.getBalance(address);\n    } else {\n      const erc20 = createErc20(signer, currencyAddress);\n      balance = await erc20.balanceOf(address);\n    }\n\n    // Note: assumes that the native currency decimals is 18, which isn't always correct\n    return await fetchCurrencyValue(signer.provider, currencyAddress, balance);\n  }\n\n  /**\n   * @returns the chain id from connected wallet\n   */\n  async getChainId() {\n    const signer = await this.getSigner();\n    return signer.getChainId();\n  }\n  async transfer(to, amount) {\n    let currencyAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NATIVE_TOKEN_ADDRESS;\n    const signer = await this.getSigner();\n    const from = await this.getAddress();\n    if (!signer.provider) {\n      throw new Error(\"Please connect a provider\");\n    }\n    const value = await normalizePriceValue(signer.provider, amount, currencyAddress);\n    if (isNativeToken(currencyAddress)) {\n      const tx = await signer.sendTransaction({\n        from,\n        to,\n        value\n      });\n      return {\n        receipt: await tx.wait()\n      };\n    } else {\n      const erc20 = createErc20(signer, currencyAddress);\n      const tx = await erc20.transfer(to, value);\n      return {\n        receipt: await tx.wait()\n      };\n    }\n  }\n\n  /**\n   * @returns the signature of the message\n   */\n  async signMessage(message) {\n    const signer = await this.getSigner();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * verify the signature of a message\n   * @returns `true` if the signature is valid, `false` otherwise\n   */\n  async verifySignature(message, signature, address, chainId) {\n    try {\n      const messageHash = utils.hashMessage(message);\n      const messageHashBytes = utils.arrayify(messageHash);\n      const recoveredAddress = utils.recoverAddress(messageHashBytes, signature);\n      if (recoveredAddress === address) {\n        return true;\n      }\n    } catch {\n      // no-op\n    }\n\n    // Check if the address is a smart contract wallet\n    if (chainId !== undefined) {\n      try {\n        const isValid = await checkContractWalletSignature(message, signature, address, chainId || 1);\n        return isValid;\n      } catch {\n        // no-op\n      }\n    }\n    return false;\n  }\n}\n\nexport { AbstractWallet, checkContractWalletSignature };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}