{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport const dataUrlToBlob = async base64DataUrl => {\n  return new Promise((resolve, reject) => {\n    const sliceSize = 512;\n    const typeMatch = base64DataUrl.match(/data:(.*);/);\n    if (!typeMatch) {\n      return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n    }\n    const type = typeMatch[1];\n    const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    resolve(new Blob(byteArrays, {\n      type\n    }));\n  });\n};","map":{"version":3,"names":["dataUrlToBlob","base64DataUrl","Promise","resolve","reject","sliceSize","typeMatch","match","Error","type","base64","replace","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob"],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@google\\model-viewer\\src\\utilities\\data-conversion.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport const dataUrlToBlob = async(base64DataUrl: string): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    const sliceSize = 512;\n    const typeMatch = base64DataUrl.match(/data:(.*);/);\n\n    if (!typeMatch) {\n      return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n    }\n\n    const type = typeMatch[1];\n    const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    resolve(new Blob(byteArrays, {type}));\n  });\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA;;;;AAIA,OAAO,MAAMA,aAAa,GAAG,MAAMC,aAAqB,IAAmB;EACzE,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACrC,MAAMC,SAAS,GAAG,GAAG;IACrB,MAAMC,SAAS,GAAGL,aAAa,CAACM,KAAK,CAAC,YAAY,CAAC;IAEnD,IAAI,CAACD,SAAS,EAAE;MACd,OAAOF,MAAM,CAAC,IAAII,KAAK,CAAC,GAAGP,aAAa,0BAA0B,CAAC,CAAC;;IAGtE,MAAMQ,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;IACzB,MAAMI,MAAM,GAAGT,aAAa,CAACU,OAAO,CAAC,yBAAyB,EAAE,EAAE,CAAC;IAEnE,MAAMC,cAAc,GAAGC,IAAI,CAACH,MAAM,CAAC;IACnC,MAAMI,UAAU,GAAG,EAAE;IAErB,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGH,cAAc,CAACI,MAAM,EAAED,MAAM,IAAIV,SAAS,EAAE;MACxE,MAAMY,KAAK,GAAGL,cAAc,CAACK,KAAK,CAACF,MAAM,EAAEA,MAAM,GAAGV,SAAS,CAAC;MAE9D,MAAMa,WAAW,GAAG,IAAIC,KAAK,CAACF,KAAK,CAACD,MAAM,CAAC;MAC3C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACD,MAAM,EAAEI,CAAC,EAAE,EAAE;QACrCF,WAAW,CAACE,CAAC,CAAC,GAAGH,KAAK,CAACI,UAAU,CAACD,CAAC,CAAC;;MAGtC,MAAME,SAAS,GAAG,IAAIC,UAAU,CAACL,WAAW,CAAC;MAC7CJ,UAAU,CAACU,IAAI,CAACF,SAAS,CAAC;;IAG5BnB,OAAO,CAAC,IAAIsB,IAAI,CAACX,UAAU,EAAE;MAACL;IAAI,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}