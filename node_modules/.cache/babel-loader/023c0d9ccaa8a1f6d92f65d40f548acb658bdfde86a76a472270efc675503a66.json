{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Filter, Wrap } from '../../three-components/gltf-instance/gltf-2.0.js';\nimport { $correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst isMinFilter = (() => {\n  const minFilterValues = [Filter.Nearest, Filter.Linear, Filter.NearestMipmapNearest, Filter.LinearMipmapLinear, Filter.NearestMipmapLinear, Filter.LinearMipmapLinear];\n  return value => minFilterValues.indexOf(value) > -1;\n})();\nconst isMagFilter = (() => {\n  const magFilterValues = [Filter.Nearest, Filter.Linear];\n  return value => magFilterValues.indexOf(value) > -1;\n})();\nconst isWrapMode = (() => {\n  const wrapModes = [Wrap.ClampToEdge, Wrap.MirroredRepeat, Wrap.Repeat];\n  return value => wrapModes.indexOf(value) > -1;\n})();\nconst isValidSamplerValue = (property, value) => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement {\n  get [$threeTextures]() {\n    console.assert(this[$correlatedObjects] != null && this[$correlatedObjects].size > 0, 'Sampler correlated object is undefined');\n    return this[$correlatedObjects];\n  }\n  get [$sourceSampler]() {\n    console.assert(this[$sourceObject] != null, 'Sampler source is undefined');\n    return this[$sourceObject];\n  }\n  constructor(onUpdate, texture, gltfSampler) {\n    gltfSampler = gltfSampler !== null && gltfSampler !== void 0 ? gltfSampler : {};\n    // These defaults represent a convergence of glTF defaults for wrap mode and\n    // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n    // its own defaults for filters.\n    // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n    // @see https://threejs.org/docs/#api/en/textures/Texture\n    if (gltfSampler.minFilter == null) {\n      gltfSampler.minFilter = texture ? texture.minFilter : Filter.LinearMipmapLinear;\n    }\n    if (gltfSampler.magFilter == null) {\n      gltfSampler.magFilter = texture ? texture.magFilter : Filter.Linear;\n    }\n    if (gltfSampler.wrapS == null) {\n      gltfSampler.wrapS = texture ? texture.wrapS : Wrap.Repeat;\n    }\n    if (gltfSampler.wrapT == null) {\n      gltfSampler.wrapT = texture ? texture.wrapT : Wrap.Repeat;\n    }\n    super(onUpdate, gltfSampler, new Set(texture ? [texture] : []));\n  }\n  get name() {\n    return this[$sourceObject].name || '';\n  }\n  get minFilter() {\n    return this[$sourceSampler].minFilter;\n  }\n  get magFilter() {\n    return this[$sourceSampler].magFilter;\n  }\n  get wrapS() {\n    return this[$sourceSampler].wrapS;\n  }\n  get wrapT() {\n    return this[$sourceSampler].wrapT;\n  }\n  setMinFilter(filter) {\n    this[$setProperty]('minFilter', filter);\n  }\n  setMagFilter(filter) {\n    this[$setProperty]('magFilter', filter);\n  }\n  setWrapS(mode) {\n    this[$setProperty]('wrapS', mode);\n  }\n  setWrapT(mode) {\n    this[$setProperty]('wrapT', mode);\n  }\n  [$setProperty](property, value) {\n    const sampler = this[$sourceSampler];\n    if (sampler != null) {\n      if (isValidSamplerValue(property, value)) {\n        sampler[property] = value;\n        for (const texture of this[$threeTextures]) {\n          texture[property] = value;\n          texture.needsUpdate = true;\n        }\n      }\n      this[$onUpdate]();\n    }\n  }\n}","map":{"version":3,"names":["Filter","Wrap","$correlatedObjects","$onUpdate","$sourceObject","ThreeDOMElement","isMinFilter","minFilterValues","Nearest","Linear","NearestMipmapNearest","LinearMipmapLinear","NearestMipmapLinear","value","indexOf","isMagFilter","magFilterValues","isWrapMode","wrapModes","ClampToEdge","MirroredRepeat","Repeat","isValidSamplerValue","property","Error","$threeTextures","Symbol","$setProperty","$sourceSampler","Sampler","console","assert","size","constructor","onUpdate","texture","gltfSampler","minFilter","magFilter","wrapS","wrapT","Set","name","setMinFilter","filter","setMagFilter","setWrapS","mode","setWrapT","sampler","needsUpdate"],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@google\\model-viewer\\src\\features\\scene-graph\\sampler.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {Filter, MagFilter, MinFilter, Sampler as GLTFSampler, Wrap, WrapMode} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Sampler as DefaultedSampler} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {Sampler as SamplerInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst isMinFilter = (() => {\n  const minFilterValues: Array<MinFilter> = [\n    Filter.Nearest,\n    Filter.Linear,\n    Filter.NearestMipmapNearest,\n    Filter.LinearMipmapLinear,\n    Filter.NearestMipmapLinear,\n    Filter.LinearMipmapLinear\n  ];\n  return (value: unknown): value is MinFilter =>\n             minFilterValues.indexOf(value as MinFilter) > -1;\n})();\n\nconst isMagFilter = (() => {\n  const magFilterValues: Array<MagFilter> = [Filter.Nearest, Filter.Linear];\n  return (value: unknown): value is MagFilter =>\n             magFilterValues.indexOf(value as MagFilter) > -1;\n})();\n\nconst isWrapMode = (() => {\n  const wrapModes: Array<WrapMode> =\n      [Wrap.ClampToEdge, Wrap.MirroredRepeat, Wrap.Repeat];\n  return (value: unknown): value is WrapMode =>\n             wrapModes.indexOf(value as WrapMode) > -1;\n})();\n\nconst isValidSamplerValue = <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n    property: P, value: unknown): value is DefaultedSampler[P] => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\n\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTextures]() {\n    console.assert(\n        this[$correlatedObjects] != null && this[$correlatedObjects]!.size > 0,\n        'Sampler correlated object is undefined');\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  private get[$sourceSampler]() {\n    console.assert(this[$sourceObject] != null, 'Sampler source is undefined');\n    return (this[$sourceObject] as DefaultedSampler);\n  }\n\n  constructor(\n      onUpdate: () => void, texture: ThreeTexture|null,\n      gltfSampler: GLTFSampler|null) {\n    gltfSampler = gltfSampler ?? {} as GLTFSampler;\n    // These defaults represent a convergence of glTF defaults for wrap mode and\n    // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n    // its own defaults for filters.\n    // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n    // @see https://threejs.org/docs/#api/en/textures/Texture\n    if (gltfSampler.minFilter == null) {\n      gltfSampler.minFilter =\n          texture ? texture.minFilter as MinFilter : Filter.LinearMipmapLinear;\n    }\n    if (gltfSampler.magFilter == null) {\n      gltfSampler.magFilter =\n          texture ? texture.magFilter as MagFilter : Filter.Linear;\n    }\n    if (gltfSampler.wrapS == null) {\n      gltfSampler.wrapS = texture ? texture.wrapS as WrapMode : Wrap.Repeat;\n    }\n    if (gltfSampler.wrapT == null) {\n      gltfSampler.wrapT = texture ? texture.wrapT as WrapMode : Wrap.Repeat;\n    }\n\n    super(\n        onUpdate, gltfSampler, new Set<ThreeTexture>(texture ? [texture] : []));\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as Sampler).name || '';\n  }\n\n  get minFilter(): MinFilter {\n    return this[$sourceSampler].minFilter;\n  }\n\n  get magFilter(): MagFilter {\n    return this[$sourceSampler].magFilter;\n  }\n\n  get wrapS(): WrapMode {\n    return this[$sourceSampler].wrapS;\n  }\n\n  get wrapT(): WrapMode {\n    return this[$sourceSampler].wrapT;\n  }\n\n  setMinFilter(filter: MinFilter) {\n    this[$setProperty]('minFilter', filter);\n  }\n\n  setMagFilter(filter: MagFilter) {\n    this[$setProperty]('magFilter', filter);\n  }\n\n  setWrapS(mode: WrapMode) {\n    this[$setProperty]('wrapS', mode);\n  }\n\n  setWrapT(mode: WrapMode) {\n    this[$setProperty]('wrapT', mode);\n  }\n\n  private[$setProperty]<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n      property: P, value: MinFilter|MagFilter|WrapMode) {\n    const sampler = this[$sourceSampler];\n    if (sampler != null) {\n      if (isValidSamplerValue(property, value)) {\n        sampler[property] = value;\n\n        for (const texture of this[$threeTextures]) {\n          (texture[property] as MinFilter | MagFilter | WrapMode) = value;\n          texture.needsUpdate = true;\n        }\n      }\n      this[$onUpdate]();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}