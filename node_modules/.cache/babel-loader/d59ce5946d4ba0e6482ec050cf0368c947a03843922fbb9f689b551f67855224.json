{"ast":null,"code":"import { constants, BigNumber } from 'ethers';\nimport { a as fetchCurrencyValue } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\nexport { TokenERC20History as T };","map":{"version":3,"names":["constants","BigNumber","a","fetchCurrencyValue","TokenERC20History","constructor","contractWrapper","events","getAllHolderBalances","getEvents","txns","map","b","data","balances","forEach","item","from","to","amount","value","AddressZero","sub","add","entries","Object","results","Promise","all","_ref","getProvider","address","_ref2","index","addr","holder","balance","T"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/erc-20-history-aaf3a654.browser.esm.js"],"sourcesContent":["import { constants, BigNumber } from 'ethers';\nimport { a as fetchCurrencyValue } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    const entries = Object.entries(balances);\n    const results = await Promise.all(entries.map(_ref => {\n      let [, value] = _ref;\n      return fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, value);\n    }));\n    return entries.map((_ref2, index) => {\n      let [addr] = _ref2;\n      return {\n        holder: addr,\n        balance: results[index]\n      };\n    });\n  }\n}\n\nexport { TokenERC20History as T };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,QAAQ;AAC7C,SAASC,CAAC,IAAIC,kBAAkB,QAAQ,0CAA0C;;AAElF;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACtBC,WAAWA,CAACC,eAAe,EAAEC,MAAM,EAAE;IACnC,IAAI,CAACD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,oBAAoBA,CAAA,EAAG;IAC3B,MAAMN,CAAC,GAAG,MAAM,IAAI,CAACK,MAAM,CAACE,SAAS,CAAC,UAAU,CAAC;IACjD,MAAMC,IAAI,GAAGR,CAAC,CAACS,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;IAC/B,MAAMC,QAAQ,GAAG,CAAC,CAAC;IACnBJ,IAAI,CAACK,OAAO,CAACC,IAAI,IAAI;MACnB,MAAMC,IAAI,GAAGD,IAAI,EAAEC,IAAI;MACvB,MAAMC,EAAE,GAAGF,IAAI,EAAEE,EAAE;MACnB,MAAMC,MAAM,GAAGH,IAAI,EAAEI,KAAK;MAC1B,IAAI,EAAEH,IAAI,KAAKjB,SAAS,CAACqB,WAAW,CAAC,EAAE;QACrC,IAAI,EAAEJ,IAAI,IAAIH,QAAQ,CAAC,EAAE;UACvBA,QAAQ,CAACG,IAAI,CAAC,GAAGhB,SAAS,CAACgB,IAAI,CAAC,CAAC,CAAC;QACpC;QACAH,QAAQ,CAACG,IAAI,CAAC,GAAGH,QAAQ,CAACG,IAAI,CAAC,CAACK,GAAG,CAACH,MAAM,CAAC;MAC7C;MACA,IAAI,EAAED,EAAE,KAAKlB,SAAS,CAACqB,WAAW,CAAC,EAAE;QACnC,IAAI,EAAEH,EAAE,IAAIJ,QAAQ,CAAC,EAAE;UACrBA,QAAQ,CAACI,EAAE,CAAC,GAAGjB,SAAS,CAACgB,IAAI,CAAC,CAAC,CAAC;QAClC;QACAH,QAAQ,CAACI,EAAE,CAAC,GAAGJ,QAAQ,CAACI,EAAE,CAAC,CAACK,GAAG,CAACJ,MAAM,CAAC;MACzC;IACF,CAAC,CAAC;IACF,MAAMK,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACV,QAAQ,CAAC;IACxC,MAAMY,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACb,GAAG,CAACkB,IAAI,IAAI;MACpD,IAAI,GAAGT,KAAK,CAAC,GAAGS,IAAI;MACpB,OAAO1B,kBAAkB,CAAC,IAAI,CAACG,eAAe,CAACwB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxB,eAAe,CAACyB,OAAO,EAAEX,KAAK,CAAC;IACpG,CAAC,CAAC,CAAC;IACH,OAAOI,OAAO,CAACb,GAAG,CAAC,CAACqB,KAAK,EAAEC,KAAK,KAAK;MACnC,IAAI,CAACC,IAAI,CAAC,GAAGF,KAAK;MAClB,OAAO;QACLG,MAAM,EAAED,IAAI;QACZE,OAAO,EAAEV,OAAO,CAACO,KAAK;MACxB,CAAC;IACH,CAAC,CAAC;EACJ;AACF;AAEA,SAAS7B,iBAAiB,IAAIiC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}