{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Color } from 'three';\nimport { TextureInfo, TextureUsage } from './texture-info.js';\nimport { $correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n  constructor(onUpdate, gltf, pbrMetallicRoughness, correlatedMaterials) {\n    super(onUpdate, pbrMetallicRoughness, correlatedMaterials);\n    // Assign glTF default values\n    if (pbrMetallicRoughness.baseColorFactor == null) {\n      pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n    }\n    if (pbrMetallicRoughness.roughnessFactor == null) {\n      pbrMetallicRoughness.roughnessFactor = 1;\n    }\n    if (pbrMetallicRoughness.metallicFactor == null) {\n      pbrMetallicRoughness.metallicFactor = 1;\n    }\n    const {\n      baseColorTexture: gltfBaseColorTexture,\n      metallicRoughnessTexture: gltfMetallicRoughnessTexture\n    } = pbrMetallicRoughness;\n    const {\n      map,\n      metalnessMap\n    } = correlatedMaterials.values().next().value;\n    this[$baseColorTexture] = new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials, gltf, gltfBaseColorTexture ? gltfBaseColorTexture : null);\n    this[$metallicRoughnessTexture] = new TextureInfo(onUpdate, TextureUsage.MetallicRoughness, metalnessMap, correlatedMaterials, gltf, gltfMetallicRoughnessTexture ? gltfMetallicRoughnessTexture : null);\n  }\n  get [$threeMaterials]() {\n    return this[$correlatedObjects];\n  }\n  get baseColorFactor() {\n    return this[$sourceObject].baseColorFactor;\n  }\n  get metallicFactor() {\n    return this[$sourceObject].metallicFactor;\n  }\n  get roughnessFactor() {\n    return this[$sourceObject].roughnessFactor;\n  }\n  get baseColorTexture() {\n    return this[$baseColorTexture];\n  }\n  get metallicRoughnessTexture() {\n    return this[$metallicRoughnessTexture];\n  }\n  setBaseColorFactor(rgba) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba).convertSRGBToLinear();\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array) {\n        material.opacity = rgba[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    const pbrMetallicRoughness = this[$sourceObject];\n    pbrMetallicRoughness.baseColorFactor = rgba;\n    this[$onUpdate]();\n  }\n  setMetallicFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    const pbrMetallicRoughness = this[$sourceObject];\n    pbrMetallicRoughness.metallicFactor = value;\n    this[$onUpdate]();\n  }\n  setRoughnessFactor(value) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    const pbrMetallicRoughness = this[$sourceObject];\n    pbrMetallicRoughness.roughnessFactor = value;\n    this[$onUpdate]();\n  }\n}","map":{"version":3,"names":["Color","TextureInfo","TextureUsage","$correlatedObjects","$onUpdate","$sourceObject","ThreeDOMElement","$threeMaterials","Symbol","$baseColorTexture","$metallicRoughnessTexture","PBRMetallicRoughness","constructor","onUpdate","gltf","pbrMetallicRoughness","correlatedMaterials","baseColorFactor","roughnessFactor","metallicFactor","baseColorTexture","gltfBaseColorTexture","metallicRoughnessTexture","gltfMetallicRoughnessTexture","map","metalnessMap","values","next","value","Base","MetallicRoughness","setBaseColorFactor","rgba","color","Array","fromArray","set","convertSRGBToLinear","material","opacity","toArray","setMetallicFactor","metalness","setRoughnessFactor","roughness"],"sources":["C:\\Users\\SUMAN K\\meta_transfer\\node_modules\\@google\\model-viewer\\src\\features\\scene-graph\\pbr-metallic-roughness.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Color, MeshStandardMaterial} from 'three';\n\nimport {GLTF, PBRMetallicRoughness as GLTFPBRMetallicRoughness} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {PBRMetallicRoughness as DefaultedPBRMetallicRoughness} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA} from './api.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private[$baseColorTexture]: TextureInfo;\n  private[$metallicRoughnessTexture]: TextureInfo;\n\n  private get[$threeMaterials](): Set<MeshStandardMaterial> {\n    return this[$correlatedObjects] as Set<MeshStandardMaterial>;\n  }\n\n  constructor(\n      onUpdate: () => void, gltf: GLTF,\n      pbrMetallicRoughness: GLTFPBRMetallicRoughness,\n      correlatedMaterials: Set<MeshStandardMaterial>) {\n    super(onUpdate, pbrMetallicRoughness, correlatedMaterials);\n\n    // Assign glTF default values\n    if (pbrMetallicRoughness.baseColorFactor == null) {\n      pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n    }\n    if (pbrMetallicRoughness.roughnessFactor == null) {\n      pbrMetallicRoughness.roughnessFactor = 1;\n    }\n    if (pbrMetallicRoughness.metallicFactor == null) {\n      pbrMetallicRoughness.metallicFactor = 1;\n    }\n\n    const {\n      baseColorTexture: gltfBaseColorTexture,\n      metallicRoughnessTexture: gltfMetallicRoughnessTexture\n    } = pbrMetallicRoughness;\n\n    const {map, metalnessMap} = correlatedMaterials.values().next().value;\n\n    this[$baseColorTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Base,\n        map,\n        correlatedMaterials,\n        gltf,\n        gltfBaseColorTexture ? gltfBaseColorTexture : null);\n\n    this[$metallicRoughnessTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.MetallicRoughness,\n        metalnessMap,\n        correlatedMaterials,\n        gltf,\n        gltfMetallicRoughnessTexture ? gltfMetallicRoughnessTexture : null);\n  }\n\n\n  get baseColorFactor(): RGBA {\n    return (this[$sourceObject] as DefaultedPBRMetallicRoughness)\n        .baseColorFactor;\n  }\n\n  get metallicFactor(): number {\n    return (this[$sourceObject] as DefaultedPBRMetallicRoughness)\n        .metallicFactor;\n  }\n\n  get roughnessFactor(): number {\n    return (this[$sourceObject] as DefaultedPBRMetallicRoughness)\n        .roughnessFactor;\n  }\n\n  get baseColorTexture(): TextureInfo {\n    return this[$baseColorTexture];\n  }\n\n  get metallicRoughnessTexture(): TextureInfo {\n    return this[$metallicRoughnessTexture];\n  }\n\n  setBaseColorFactor(rgba: RGBA|string) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba).convertSRGBToLinear();\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array) {\n        material.opacity = (rgba)[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as DefaultedPBRMetallicRoughness;\n    pbrMetallicRoughness.baseColorFactor = rgba as RGBA;\n    this[$onUpdate]();\n  }\n\n  setMetallicFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as DefaultedPBRMetallicRoughness;\n    pbrMetallicRoughness.metallicFactor = value;\n    this[$onUpdate]();\n  }\n\n  setRoughnessFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as DefaultedPBRMetallicRoughness;\n    pbrMetallicRoughness.roughnessFactor = value;\n    this[$onUpdate]();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}