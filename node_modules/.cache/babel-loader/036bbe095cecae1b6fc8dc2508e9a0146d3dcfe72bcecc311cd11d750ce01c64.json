{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveHexlify = exports.deepHexlify = exports.rethrowError = exports.decodeErrorReason = exports.getUserOpHash = exports.packUserOp = exports.AddressZero = void 0;\nconst utils_1 = require(\"ethers/lib/utils\");\nconst IEntryPoint_json_1 = require(\"@account-abstraction/contracts/artifacts/IEntryPoint.json\");\nconst ethers_1 = require(\"ethers\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)('aa.utils');\n// UserOperation is the first parameter of validateUseOp\nconst validateUserOpMethod = 'simulateValidation';\nconst UserOpType = (_a = IEntryPoint_json_1.abi.find(entry => entry.name === validateUserOpMethod)) === null || _a === void 0 ? void 0 : _a.inputs[0];\nif (UserOpType == null) {\n  throw new Error(`unable to find method ${validateUserOpMethod} in EP ${IEntryPoint_json_1.abi.filter(x => x.type === 'function').map(x => x.name).join(',')}`);\n}\nexports.AddressZero = ethers_1.ethers.constants.AddressZero;\nfunction encode(typevalues, forSignature) {\n  const types = typevalues.map(typevalue => typevalue.type === 'bytes' && forSignature ? 'bytes32' : typevalue.type);\n  const values = typevalues.map(typevalue => typevalue.type === 'bytes' && forSignature ? (0, utils_1.keccak256)(typevalue.val) : typevalue.val);\n  return utils_1.defaultAbiCoder.encode(types, values);\n}\n/**\n * pack the userOperation\n * @param op\n * @param forSignature \"true\" if the hash is needed to calculate the getUserOpHash()\n *  \"false\" to pack entire UserOp, for calculating the calldata cost of putting it on-chain.\n */\nfunction packUserOp(op, forSignature = true) {\n  if (forSignature) {\n    // lighter signature scheme (must match UserOperation#pack): do encode a zero-length signature, but strip afterwards the appended zero-length value\n    const userOpType = {\n      components: [{\n        type: 'address',\n        name: 'sender'\n      }, {\n        type: 'uint256',\n        name: 'nonce'\n      }, {\n        type: 'bytes',\n        name: 'initCode'\n      }, {\n        type: 'bytes',\n        name: 'callData'\n      }, {\n        type: 'uint256',\n        name: 'callGasLimit'\n      }, {\n        type: 'uint256',\n        name: 'verificationGasLimit'\n      }, {\n        type: 'uint256',\n        name: 'preVerificationGas'\n      }, {\n        type: 'uint256',\n        name: 'maxFeePerGas'\n      }, {\n        type: 'uint256',\n        name: 'maxPriorityFeePerGas'\n      }, {\n        type: 'bytes',\n        name: 'paymasterAndData'\n      }, {\n        type: 'bytes',\n        name: 'signature'\n      }],\n      name: 'userOp',\n      type: 'tuple'\n    };\n    // console.log('hard-coded userOpType', userOpType)\n    // console.log('from ABI userOpType', UserOpType)\n    let encoded = utils_1.defaultAbiCoder.encode([userOpType], [Object.assign(Object.assign({}, op), {\n      signature: '0x'\n    })]);\n    // remove leading word (total length) and trailing word (zero-length signature)\n    encoded = '0x' + encoded.slice(66, encoded.length - 64);\n    return encoded;\n  }\n  const typevalues = UserOpType.components.map(c => ({\n    type: c.type,\n    val: op[c.name]\n  }));\n  return encode(typevalues, forSignature);\n}\nexports.packUserOp = packUserOp;\n/**\n * calculate the userOpHash of a given userOperation.\n * The userOpHash is a hash of all UserOperation fields, except the \"signature\" field.\n * The entryPoint uses this value in the emitted UserOperationEvent.\n * A wallet may use this value as the hash to sign (the SampleWallet uses this method)\n * @param op\n * @param entryPoint\n * @param chainId\n */\nfunction getUserOpHash(op, entryPoint, chainId) {\n  const userOpHash = (0, utils_1.keccak256)(packUserOp(op, true));\n  const enc = utils_1.defaultAbiCoder.encode(['bytes32', 'address', 'uint256'], [userOpHash, entryPoint, chainId]);\n  return (0, utils_1.keccak256)(enc);\n}\nexports.getUserOpHash = getUserOpHash;\nconst ErrorSig = (0, utils_1.keccak256)(Buffer.from('Error(string)')).slice(0, 10); // 0x08c379a0\nconst FailedOpSig = (0, utils_1.keccak256)(Buffer.from('FailedOp(uint256,string)')).slice(0, 10); // 0x220266b6\n/**\n * decode bytes thrown by revert as Error(message) or FailedOp(opIndex,paymaster,message)\n */\nfunction decodeErrorReason(error) {\n  debug('decoding', error);\n  if (error.startsWith(ErrorSig)) {\n    const [message] = utils_1.defaultAbiCoder.decode(['string'], '0x' + error.substring(10));\n    return {\n      message\n    };\n  } else if (error.startsWith(FailedOpSig)) {\n    let [opIndex, message] = utils_1.defaultAbiCoder.decode(['uint256', 'string'], '0x' + error.substring(10));\n    message = `FailedOp: ${message}`;\n    return {\n      message,\n      opIndex\n    };\n  }\n}\nexports.decodeErrorReason = decodeErrorReason;\n/**\n * update thrown Error object with our custom FailedOp message, and re-throw it.\n * updated both \"message\" and inner encoded \"data\"\n * tested on geth, hardhat-node\n * usage: entryPoint.handleOps().catch(decodeError)\n */\nfunction rethrowError(e) {\n  let error = e;\n  let parent = e;\n  if ((error === null || error === void 0 ? void 0 : error.error) != null) {\n    error = error.error;\n  }\n  while ((error === null || error === void 0 ? void 0 : error.data) != null) {\n    parent = error;\n    error = error.data;\n  }\n  const decoded = typeof error === 'string' && error.length > 2 ? decodeErrorReason(error) : undefined;\n  if (decoded != null) {\n    e.message = decoded.message;\n    if (decoded.opIndex != null) {\n      // helper for chai: convert our FailedOp error into \"Error(msg)\"\n      const errorWithMsg = (0, utils_1.hexConcat)([ErrorSig, utils_1.defaultAbiCoder.encode(['string'], [decoded.message])]);\n      // modify in-place the error object:\n      parent.data = errorWithMsg;\n    }\n  }\n  throw e;\n}\nexports.rethrowError = rethrowError;\n/**\n * hexlify all members of object, recursively\n * @param obj\n */\nfunction deepHexlify(obj) {\n  if (typeof obj === 'function') {\n    return undefined;\n  }\n  if (obj == null || typeof obj === 'string' || typeof obj === 'boolean') {\n    return obj;\n  } else if (obj._isBigNumber != null || typeof obj !== 'object') {\n    return (0, utils_1.hexlify)(obj).replace(/^0x0/, '0x');\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(member => deepHexlify(member));\n  }\n  return Object.keys(obj).reduce((set, key) => Object.assign(Object.assign({}, set), {\n    [key]: deepHexlify(obj[key])\n  }), {});\n}\nexports.deepHexlify = deepHexlify;\n// resolve all property and hexlify.\n// (UserOpMethodHandler receives data from the network, so we need to pack our generated values)\nasync function resolveHexlify(a) {\n  return deepHexlify(await (0, utils_1.resolveProperties)(a));\n}\nexports.resolveHexlify = resolveHexlify;","map":{"version":3,"names":["utils_1","require","IEntryPoint_json_1","ethers_1","debug_1","__importDefault","debug","default","validateUserOpMethod","UserOpType","_a","abi","find","entry","name","inputs","Error","filter","x","type","map","join","exports","AddressZero","ethers","constants","encode","typevalues","forSignature","types","typevalue","values","keccak256","val","defaultAbiCoder","packUserOp","op","userOpType","components","encoded","Object","assign","signature","slice","length","c","getUserOpHash","entryPoint","chainId","userOpHash","enc","ErrorSig","Buffer","from","FailedOpSig","decodeErrorReason","error","startsWith","message","decode","substring","opIndex","rethrowError","e","parent","data","decoded","undefined","errorWithMsg","hexConcat","deepHexlify","obj","_isBigNumber","hexlify","replace","Array","isArray","member","keys","reduce","set","key","resolveHexlify","a","resolveProperties"],"sources":["../../src/ERC4337Utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}