{"ast":null,"code":"import { a1 as Erc721, bW as resolveAddress, eb as buildTransactionFunction, ak as Transaction } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\nexport { StandardErc721 as S };","map":{"version":3,"names":["a1","Erc721","bW","resolveAddress","eb","buildTransactionFunction","ak","Transaction","StandardErc721","chainId","_chainId","constructor","contractWrapper","storage","erc721","onNetworkUpdated","network","updateSignerOrProvider","getAddress","address","getAll","queryParams","getOwned","walletAddress","getOwnedTokenIds","totalSupply","totalCirculatingSupply","get","tokenId","ownerOf","balanceOf","balance","isApproved","operator","transfer","to","prepare","setApprovalForAll","approved","setApprovalForToken","fromContractWrapper","method","args","S"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-4e1150dd.browser.esm.js"],"sourcesContent":["import { a1 as Erc721, bW as resolveAddress, eb as buildTransactionFunction, ak as Transaction } from './smart-contract-40473f5e.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress, queryParams) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress, queryParams);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}