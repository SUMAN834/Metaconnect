{"ast":null,"code":"import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from './classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from './classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { defaultChains, updateChainRPCs } from '@thirdweb-dev/chains';\nimport { AbstractWallet } from '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nconst PREFIX = \"__TW__\";\nclass AsyncLocalStorage {\n  constructor(name) {\n    this.name = name;\n  }\n  getItem(key) {\n    return new Promise(res => {\n      res(localStorage.getItem(`${PREFIX}/${this.name}/${key}`));\n    });\n  }\n  setItem(key, value) {\n    return new Promise((res, rej) => {\n      try {\n        localStorage.setItem(`${PREFIX}/${this.name}/${key}`, value);\n        res();\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n  removeItem(key) {\n    return new Promise(res => {\n      localStorage.removeItem(`${PREFIX}/${this.name}/${key}`);\n      res();\n    });\n  }\n}\nfunction createAsyncLocalStorage(name) {\n  return new AsyncLocalStorage(name);\n}\nconst DEFAULT_DAPP_META = {\n  name: \"thirdweb powered dApp\",\n  url: \"https://thirdweb.com\",\n  description: \"thirdweb powered dApp\",\n  logoUrl: \"https://thirdweb.com/favicon.ico\",\n  isDarkMode: true\n};\nlet walletAnalyticsEnabled = true;\nfunction isWalletAnalyticsEnabled() {\n  return walletAnalyticsEnabled;\n}\nfunction setWalletAnalyticsEnabled(enabled) {\n  walletAnalyticsEnabled = enabled;\n}\nconst ANALYTICS_ENDPOINT = \"https://c.thirdweb.com/event\";\nfunction track(args) {\n  if (!isWalletAnalyticsEnabled()) {\n    return;\n  }\n  const {\n    clientId,\n    walletType,\n    walletAddress,\n    source,\n    action\n  } = args;\n  const body = {\n    source,\n    action,\n    walletAddress,\n    walletType\n  };\n  // don't block on analytic calls\n  fetch(ANALYTICS_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-client-id\": clientId\n    },\n    body: JSON.stringify(body)\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nvar _connectParams = /*#__PURE__*/new WeakMap();\nvar _connect = /*#__PURE__*/new WeakSet();\nvar _trackConnection = /*#__PURE__*/new WeakSet();\nvar _subscribeToEvents = /*#__PURE__*/new WeakSet();\nclass AbstractClientWallet extends AbstractWallet {\n  getMeta() {\n    return this.constructor.meta;\n  }\n  constructor(walletId, options) {\n    super();\n    _classPrivateMethodInitSpec(this, _subscribeToEvents);\n    _classPrivateMethodInitSpec(this, _trackConnection);\n    _classPrivateMethodInitSpec(this, _connect);\n    _classPrivateFieldInitSpec(this, _connectParams, {\n      writable: true,\n      value: void 0\n    });\n    this.walletId = walletId;\n    this.options = options;\n    this.chains = (options?.chains || defaultChains).map(c => updateChainRPCs(c, options?.clientId));\n    this.dappMetadata = options?.dappMetadata || DEFAULT_DAPP_META;\n    this.walletStorage = options?.walletStorage || createAsyncLocalStorage(this.walletId);\n  }\n  /**\n   * tries to auto connect to the wallet\n   */\n  async autoConnect(connectOptions) {\n    // remove chainId when autoconnecting to prevent switch-network popup on page load\n    const options = connectOptions ? {\n      ...connectOptions,\n      chainId: undefined\n    } : undefined;\n    return _classPrivateMethodGet(this, _connect, _connect2).call(this, true, options);\n  }\n\n  /**\n   * connect to the wallet\n   */\n  async connect(connectOptions) {\n    _classPrivateFieldSet(this, _connectParams, connectOptions);\n    const address = await _classPrivateMethodGet(this, _connect, _connect2).call(this, false, connectOptions);\n    if (!address) {\n      throw new Error(\"Failed to connect to the wallet.\");\n    }\n    return address;\n  }\n  getConnectParams() {\n    return _classPrivateFieldGet(this, _connectParams);\n  }\n  async getSigner() {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return await connector.getSigner();\n  }\n  async disconnect() {\n    const connector = await this.getConnector();\n    if (connector) {\n      await connector.disconnect();\n      this.emit(\"disconnect\");\n      connector.removeAllListeners();\n    }\n  }\n  async switchChain(chainId) {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    if (!connector.switchChain) {\n      throw new Error(\"Wallet does not support switching chains\");\n    }\n    return await connector.switchChain(chainId);\n  }\n  async updateChains(chains) {\n    this.chains = chains.map(c => {\n      return updateChainRPCs(c, this.options?.clientId);\n    });\n    const connector = await this.getConnector();\n    connector.updateChains(this.chains);\n  }\n\n  /**\n   * If the wallet uses a personal wallet under the hood, return it\n   */\n  getPersonalWallet() {\n    return undefined;\n  }\n}\nasync function _connect2(isAutoConnect, connectOptions) {\n  const connector = await this.getConnector();\n  _classPrivateMethodGet(this, _subscribeToEvents, _subscribeToEvents2).call(this, connector);\n  const isConnected = await connector.isConnected();\n\n  // if already connected, return the address and setup listeners\n  if (isConnected) {\n    const address = await connector.getAddress();\n    connector.setupListeners();\n\n    // ensure that connector is connected to the correct chain\n    if (connectOptions?.chainId) {\n      await connector.switchChain(connectOptions?.chainId);\n    }\n    this.emit(\"connect\", {\n      address,\n      chainId: await this.getChainId()\n    });\n    _classPrivateMethodGet(this, _trackConnection, _trackConnection2).call(this, address);\n    return address;\n  }\n  if (isAutoConnect) {\n    throw new Error(\"Failed to auto connect to the wallet.\");\n  }\n  try {\n    const address = await connector.connect(connectOptions);\n    _classPrivateMethodGet(this, _trackConnection, _trackConnection2).call(this, address);\n    return address;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\nfunction _trackConnection2(address) {\n  track({\n    clientId: this.options?.clientId || \"\",\n    source: \"connectWallet\",\n    action: \"connect\",\n    walletType: this.walletId,\n    walletAddress: address\n  });\n}\nasync function _subscribeToEvents2(connector) {\n  // subscribe to connector for events\n  connector.on(\"connect\", data => {\n    this.emit(\"connect\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"change\", data => {\n    this.emit(\"change\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"message\", data => {\n    this.emit(\"message\", data);\n  });\n  connector.on(\"disconnect\", async () => {\n    this.emit(\"disconnect\");\n  });\n  connector.on(\"error\", error => this.emit(\"error\", error));\n}\nexport { AsyncLocalStorage as A, DEFAULT_DAPP_META as D, AbstractClientWallet as a, createAsyncLocalStorage as c, isWalletAnalyticsEnabled as i, setWalletAnalyticsEnabled as s };","map":{"version":3,"names":["_","_classPrivateMethodInitSpec","a","_classPrivateMethodGet","_classPrivateFieldInitSpec","_classPrivateFieldSet","b","_classPrivateFieldGet","defaultChains","updateChainRPCs","AbstractWallet","PREFIX","AsyncLocalStorage","constructor","name","getItem","key","Promise","res","localStorage","setItem","value","rej","e","removeItem","createAsyncLocalStorage","DEFAULT_DAPP_META","url","description","logoUrl","isDarkMode","walletAnalyticsEnabled","isWalletAnalyticsEnabled","setWalletAnalyticsEnabled","enabled","ANALYTICS_ENDPOINT","track","args","clientId","walletType","walletAddress","source","action","body","fetch","method","headers","JSON","stringify","_connectParams","WeakMap","_connect","WeakSet","_trackConnection","_subscribeToEvents","AbstractClientWallet","getMeta","meta","walletId","options","writable","chains","map","c","dappMetadata","walletStorage","autoConnect","connectOptions","chainId","undefined","_connect2","call","connect","address","Error","getConnectParams","getSigner","connector","getConnector","disconnect","emit","removeAllListeners","switchChain","updateChains","getPersonalWallet","isAutoConnect","_subscribeToEvents2","isConnected","getAddress","setupListeners","getChainId","_trackConnection2","error","message","on","data","account","chain","id","A","D","i","s"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/wallets/dist/base-eec23f27.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from './classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from './classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { defaultChains, updateChainRPCs } from '@thirdweb-dev/chains';\nimport { AbstractWallet } from '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\n\nconst PREFIX = \"__TW__\";\nclass AsyncLocalStorage {\n  constructor(name) {\n    this.name = name;\n  }\n  getItem(key) {\n    return new Promise(res => {\n      res(localStorage.getItem(`${PREFIX}/${this.name}/${key}`));\n    });\n  }\n  setItem(key, value) {\n    return new Promise((res, rej) => {\n      try {\n        localStorage.setItem(`${PREFIX}/${this.name}/${key}`, value);\n        res();\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n  removeItem(key) {\n    return new Promise(res => {\n      localStorage.removeItem(`${PREFIX}/${this.name}/${key}`);\n      res();\n    });\n  }\n}\nfunction createAsyncLocalStorage(name) {\n  return new AsyncLocalStorage(name);\n}\n\nconst DEFAULT_DAPP_META = {\n  name: \"thirdweb powered dApp\",\n  url: \"https://thirdweb.com\",\n  description: \"thirdweb powered dApp\",\n  logoUrl: \"https://thirdweb.com/favicon.ico\",\n  isDarkMode: true\n};\n\nlet walletAnalyticsEnabled = true;\nfunction isWalletAnalyticsEnabled() {\n  return walletAnalyticsEnabled;\n}\nfunction setWalletAnalyticsEnabled(enabled) {\n  walletAnalyticsEnabled = enabled;\n}\n\nconst ANALYTICS_ENDPOINT = \"https://c.thirdweb.com/event\";\nfunction track(args) {\n  if (!isWalletAnalyticsEnabled()) {\n    return;\n  }\n  const {\n    clientId,\n    walletType,\n    walletAddress,\n    source,\n    action\n  } = args;\n  const body = {\n    source,\n    action,\n    walletAddress,\n    walletType\n  };\n  // don't block on analytic calls\n  fetch(ANALYTICS_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-client-id\": clientId\n    },\n    body: JSON.stringify(body)\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nvar _connectParams = /*#__PURE__*/new WeakMap();\nvar _connect = /*#__PURE__*/new WeakSet();\nvar _trackConnection = /*#__PURE__*/new WeakSet();\nvar _subscribeToEvents = /*#__PURE__*/new WeakSet();\nclass AbstractClientWallet extends AbstractWallet {\n  getMeta() {\n    return this.constructor.meta;\n  }\n  constructor(walletId, options) {\n    super();\n    _classPrivateMethodInitSpec(this, _subscribeToEvents);\n    _classPrivateMethodInitSpec(this, _trackConnection);\n    _classPrivateMethodInitSpec(this, _connect);\n    _classPrivateFieldInitSpec(this, _connectParams, {\n      writable: true,\n      value: void 0\n    });\n    this.walletId = walletId;\n    this.options = options;\n    this.chains = (options?.chains || defaultChains).map(c => updateChainRPCs(c, options?.clientId));\n    this.dappMetadata = options?.dappMetadata || DEFAULT_DAPP_META;\n    this.walletStorage = options?.walletStorage || createAsyncLocalStorage(this.walletId);\n  }\n  /**\n   * tries to auto connect to the wallet\n   */\n  async autoConnect(connectOptions) {\n    // remove chainId when autoconnecting to prevent switch-network popup on page load\n    const options = connectOptions ? {\n      ...connectOptions,\n      chainId: undefined\n    } : undefined;\n    return _classPrivateMethodGet(this, _connect, _connect2).call(this, true, options);\n  }\n\n  /**\n   * connect to the wallet\n   */\n  async connect(connectOptions) {\n    _classPrivateFieldSet(this, _connectParams, connectOptions);\n    const address = await _classPrivateMethodGet(this, _connect, _connect2).call(this, false, connectOptions);\n    if (!address) {\n      throw new Error(\"Failed to connect to the wallet.\");\n    }\n    return address;\n  }\n  getConnectParams() {\n    return _classPrivateFieldGet(this, _connectParams);\n  }\n  async getSigner() {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return await connector.getSigner();\n  }\n  async disconnect() {\n    const connector = await this.getConnector();\n    if (connector) {\n      await connector.disconnect();\n      this.emit(\"disconnect\");\n      connector.removeAllListeners();\n    }\n  }\n  async switchChain(chainId) {\n    const connector = await this.getConnector();\n    if (!connector) {\n      throw new Error(\"Wallet not connected\");\n    }\n    if (!connector.switchChain) {\n      throw new Error(\"Wallet does not support switching chains\");\n    }\n    return await connector.switchChain(chainId);\n  }\n  async updateChains(chains) {\n    this.chains = chains.map(c => {\n      return updateChainRPCs(c, this.options?.clientId);\n    });\n    const connector = await this.getConnector();\n    connector.updateChains(this.chains);\n  }\n\n  /**\n   * If the wallet uses a personal wallet under the hood, return it\n   */\n  getPersonalWallet() {\n    return undefined;\n  }\n}\nasync function _connect2(isAutoConnect, connectOptions) {\n  const connector = await this.getConnector();\n  _classPrivateMethodGet(this, _subscribeToEvents, _subscribeToEvents2).call(this, connector);\n  const isConnected = await connector.isConnected();\n\n  // if already connected, return the address and setup listeners\n  if (isConnected) {\n    const address = await connector.getAddress();\n    connector.setupListeners();\n\n    // ensure that connector is connected to the correct chain\n    if (connectOptions?.chainId) {\n      await connector.switchChain(connectOptions?.chainId);\n    }\n    this.emit(\"connect\", {\n      address,\n      chainId: await this.getChainId()\n    });\n    _classPrivateMethodGet(this, _trackConnection, _trackConnection2).call(this, address);\n    return address;\n  }\n  if (isAutoConnect) {\n    throw new Error(\"Failed to auto connect to the wallet.\");\n  }\n  try {\n    const address = await connector.connect(connectOptions);\n    _classPrivateMethodGet(this, _trackConnection, _trackConnection2).call(this, address);\n    return address;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\nfunction _trackConnection2(address) {\n  track({\n    clientId: this.options?.clientId || \"\",\n    source: \"connectWallet\",\n    action: \"connect\",\n    walletType: this.walletId,\n    walletAddress: address\n  });\n}\nasync function _subscribeToEvents2(connector) {\n  // subscribe to connector for events\n  connector.on(\"connect\", data => {\n    this.emit(\"connect\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"change\", data => {\n    this.emit(\"change\", {\n      address: data.account,\n      chainId: data.chain?.id\n    });\n  });\n  connector.on(\"message\", data => {\n    this.emit(\"message\", data);\n  });\n  connector.on(\"disconnect\", async () => {\n    this.emit(\"disconnect\");\n  });\n  connector.on(\"error\", error => this.emit(\"error\", error));\n}\n\nexport { AsyncLocalStorage as A, DEFAULT_DAPP_META as D, AbstractClientWallet as a, createAsyncLocalStorage as c, isWalletAnalyticsEnabled as i, setWalletAnalyticsEnabled as s };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,2BAA2B,EAAEC,CAAC,IAAIC,sBAAsB,QAAQ,iDAAiD;AAC/H,SAASH,CAAC,IAAII,0BAA0B,EAAEF,CAAC,IAAIG,qBAAqB,EAAEC,CAAC,IAAIC,qBAAqB,QAAQ,gDAAgD;AACxJ,SAASC,aAAa,EAAEC,eAAe,QAAQ,sBAAsB;AACrE,SAASC,cAAc,QAAQ,uFAAuF;AAEtH,MAAMC,MAAM,GAAG,QAAQ;AACvB,MAAMC,iBAAiB,CAAC;EACtBC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EACAC,OAAOA,CAACC,GAAG,EAAE;IACX,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAI;MACxBA,GAAG,CAACC,YAAY,CAACJ,OAAO,CAAE,GAAEJ,MAAO,IAAG,IAAI,CAACG,IAAK,IAAGE,GAAI,EAAC,CAAC,CAAC;IAC5D,CAAC,CAAC;EACJ;EACAI,OAAOA,CAACJ,GAAG,EAAEK,KAAK,EAAE;IAClB,OAAO,IAAIJ,OAAO,CAAC,CAACC,GAAG,EAAEI,GAAG,KAAK;MAC/B,IAAI;QACFH,YAAY,CAACC,OAAO,CAAE,GAAET,MAAO,IAAG,IAAI,CAACG,IAAK,IAAGE,GAAI,EAAC,EAAEK,KAAK,CAAC;QAC5DH,GAAG,CAAC,CAAC;MACP,CAAC,CAAC,OAAOK,CAAC,EAAE;QACVD,GAAG,CAACC,CAAC,CAAC;MACR;IACF,CAAC,CAAC;EACJ;EACAC,UAAUA,CAACR,GAAG,EAAE;IACd,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAI;MACxBC,YAAY,CAACK,UAAU,CAAE,GAAEb,MAAO,IAAG,IAAI,CAACG,IAAK,IAAGE,GAAI,EAAC,CAAC;MACxDE,GAAG,CAAC,CAAC;IACP,CAAC,CAAC;EACJ;AACF;AACA,SAASO,uBAAuBA,CAACX,IAAI,EAAE;EACrC,OAAO,IAAIF,iBAAiB,CAACE,IAAI,CAAC;AACpC;AAEA,MAAMY,iBAAiB,GAAG;EACxBZ,IAAI,EAAE,uBAAuB;EAC7Ba,GAAG,EAAE,sBAAsB;EAC3BC,WAAW,EAAE,uBAAuB;EACpCC,OAAO,EAAE,kCAAkC;EAC3CC,UAAU,EAAE;AACd,CAAC;AAED,IAAIC,sBAAsB,GAAG,IAAI;AACjC,SAASC,wBAAwBA,CAAA,EAAG;EAClC,OAAOD,sBAAsB;AAC/B;AACA,SAASE,yBAAyBA,CAACC,OAAO,EAAE;EAC1CH,sBAAsB,GAAGG,OAAO;AAClC;AAEA,MAAMC,kBAAkB,GAAG,8BAA8B;AACzD,SAASC,KAAKA,CAACC,IAAI,EAAE;EACnB,IAAI,CAACL,wBAAwB,CAAC,CAAC,EAAE;IAC/B;EACF;EACA,MAAM;IACJM,QAAQ;IACRC,UAAU;IACVC,aAAa;IACbC,MAAM;IACNC;EACF,CAAC,GAAGL,IAAI;EACR,MAAMM,IAAI,GAAG;IACXF,MAAM;IACNC,MAAM;IACNF,aAAa;IACbD;EACF,CAAC;EACD;EACAK,KAAK,CAACT,kBAAkB,EAAE;IACxBU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,aAAa,EAAER;IACjB,CAAC;IACDK,IAAI,EAAEI,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;AACJ;;AAEA;AACA,IAAIM,cAAc,GAAG,aAAa,IAAIC,OAAO,CAAC,CAAC;AAC/C,IAAIC,QAAQ,GAAG,aAAa,IAAIC,OAAO,CAAC,CAAC;AACzC,IAAIC,gBAAgB,GAAG,aAAa,IAAID,OAAO,CAAC,CAAC;AACjD,IAAIE,kBAAkB,GAAG,aAAa,IAAIF,OAAO,CAAC,CAAC;AACnD,MAAMG,oBAAoB,SAAS7C,cAAc,CAAC;EAChD8C,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC3C,WAAW,CAAC4C,IAAI;EAC9B;EACA5C,WAAWA,CAAC6C,QAAQ,EAAEC,OAAO,EAAE;IAC7B,KAAK,CAAC,CAAC;IACP1D,2BAA2B,CAAC,IAAI,EAAEqD,kBAAkB,CAAC;IACrDrD,2BAA2B,CAAC,IAAI,EAAEoD,gBAAgB,CAAC;IACnDpD,2BAA2B,CAAC,IAAI,EAAEkD,QAAQ,CAAC;IAC3C/C,0BAA0B,CAAC,IAAI,EAAE6C,cAAc,EAAE;MAC/CW,QAAQ,EAAE,IAAI;MACdvC,KAAK,EAAE,KAAK;IACd,CAAC,CAAC;IACF,IAAI,CAACqC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,MAAM,GAAG,CAACF,OAAO,EAAEE,MAAM,IAAIrD,aAAa,EAAEsD,GAAG,CAACC,CAAC,IAAItD,eAAe,CAACsD,CAAC,EAAEJ,OAAO,EAAErB,QAAQ,CAAC,CAAC;IAChG,IAAI,CAAC0B,YAAY,GAAGL,OAAO,EAAEK,YAAY,IAAItC,iBAAiB;IAC9D,IAAI,CAACuC,aAAa,GAAGN,OAAO,EAAEM,aAAa,IAAIxC,uBAAuB,CAAC,IAAI,CAACiC,QAAQ,CAAC;EACvF;EACA;AACF;AACA;EACE,MAAMQ,WAAWA,CAACC,cAAc,EAAE;IAChC;IACA,MAAMR,OAAO,GAAGQ,cAAc,GAAG;MAC/B,GAAGA,cAAc;MACjBC,OAAO,EAAEC;IACX,CAAC,GAAGA,SAAS;IACb,OAAOlE,sBAAsB,CAAC,IAAI,EAAEgD,QAAQ,EAAEmB,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEZ,OAAO,CAAC;EACpF;;EAEA;AACF;AACA;EACE,MAAMa,OAAOA,CAACL,cAAc,EAAE;IAC5B9D,qBAAqB,CAAC,IAAI,EAAE4C,cAAc,EAAEkB,cAAc,CAAC;IAC3D,MAAMM,OAAO,GAAG,MAAMtE,sBAAsB,CAAC,IAAI,EAAEgD,QAAQ,EAAEmB,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAEJ,cAAc,CAAC;IACzG,IAAI,CAACM,OAAO,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,OAAOD,OAAO;EAChB;EACAE,gBAAgBA,CAAA,EAAG;IACjB,OAAOpE,qBAAqB,CAAC,IAAI,EAAE0C,cAAc,CAAC;EACpD;EACA,MAAM2B,SAASA,CAAA,EAAG;IAChB,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3C,IAAI,CAACD,SAAS,EAAE;MACd,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,OAAO,MAAMG,SAAS,CAACD,SAAS,CAAC,CAAC;EACpC;EACA,MAAMG,UAAUA,CAAA,EAAG;IACjB,MAAMF,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3C,IAAID,SAAS,EAAE;MACb,MAAMA,SAAS,CAACE,UAAU,CAAC,CAAC;MAC5B,IAAI,CAACC,IAAI,CAAC,YAAY,CAAC;MACvBH,SAAS,CAACI,kBAAkB,CAAC,CAAC;IAChC;EACF;EACA,MAAMC,WAAWA,CAACd,OAAO,EAAE;IACzB,MAAMS,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3C,IAAI,CAACD,SAAS,EAAE;MACd,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,IAAI,CAACG,SAAS,CAACK,WAAW,EAAE;MAC1B,MAAM,IAAIR,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACA,OAAO,MAAMG,SAAS,CAACK,WAAW,CAACd,OAAO,CAAC;EAC7C;EACA,MAAMe,YAAYA,CAACtB,MAAM,EAAE;IACzB,IAAI,CAACA,MAAM,GAAGA,MAAM,CAACC,GAAG,CAACC,CAAC,IAAI;MAC5B,OAAOtD,eAAe,CAACsD,CAAC,EAAE,IAAI,CAACJ,OAAO,EAAErB,QAAQ,CAAC;IACnD,CAAC,CAAC;IACF,MAAMuC,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3CD,SAAS,CAACM,YAAY,CAAC,IAAI,CAACtB,MAAM,CAAC;EACrC;;EAEA;AACF;AACA;EACEuB,iBAAiBA,CAAA,EAAG;IAClB,OAAOf,SAAS;EAClB;AACF;AACA,eAAeC,SAASA,CAACe,aAAa,EAAElB,cAAc,EAAE;EACtD,MAAMU,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;EAC3C3E,sBAAsB,CAAC,IAAI,EAAEmD,kBAAkB,EAAEgC,mBAAmB,CAAC,CAACf,IAAI,CAAC,IAAI,EAAEM,SAAS,CAAC;EAC3F,MAAMU,WAAW,GAAG,MAAMV,SAAS,CAACU,WAAW,CAAC,CAAC;;EAEjD;EACA,IAAIA,WAAW,EAAE;IACf,MAAMd,OAAO,GAAG,MAAMI,SAAS,CAACW,UAAU,CAAC,CAAC;IAC5CX,SAAS,CAACY,cAAc,CAAC,CAAC;;IAE1B;IACA,IAAItB,cAAc,EAAEC,OAAO,EAAE;MAC3B,MAAMS,SAAS,CAACK,WAAW,CAACf,cAAc,EAAEC,OAAO,CAAC;IACtD;IACA,IAAI,CAACY,IAAI,CAAC,SAAS,EAAE;MACnBP,OAAO;MACPL,OAAO,EAAE,MAAM,IAAI,CAACsB,UAAU,CAAC;IACjC,CAAC,CAAC;IACFvF,sBAAsB,CAAC,IAAI,EAAEkD,gBAAgB,EAAEsC,iBAAiB,CAAC,CAACpB,IAAI,CAAC,IAAI,EAAEE,OAAO,CAAC;IACrF,OAAOA,OAAO;EAChB;EACA,IAAIY,aAAa,EAAE;IACjB,MAAM,IAAIX,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EACA,IAAI;IACF,MAAMD,OAAO,GAAG,MAAMI,SAAS,CAACL,OAAO,CAACL,cAAc,CAAC;IACvDhE,sBAAsB,CAAC,IAAI,EAAEkD,gBAAgB,EAAEsC,iBAAiB,CAAC,CAACpB,IAAI,CAAC,IAAI,EAAEE,OAAO,CAAC;IACrF,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACd,MAAM,IAAIlB,KAAK,CAACkB,KAAK,CAACC,OAAO,CAAC;EAChC;AACF;AACA,SAASF,iBAAiBA,CAAClB,OAAO,EAAE;EAClCrC,KAAK,CAAC;IACJE,QAAQ,EAAE,IAAI,CAACqB,OAAO,EAAErB,QAAQ,IAAI,EAAE;IACtCG,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,SAAS;IACjBH,UAAU,EAAE,IAAI,CAACmB,QAAQ;IACzBlB,aAAa,EAAEiC;EACjB,CAAC,CAAC;AACJ;AACA,eAAea,mBAAmBA,CAACT,SAAS,EAAE;EAC5C;EACAA,SAAS,CAACiB,EAAE,CAAC,SAAS,EAAEC,IAAI,IAAI;IAC9B,IAAI,CAACf,IAAI,CAAC,SAAS,EAAE;MACnBP,OAAO,EAAEsB,IAAI,CAACC,OAAO;MACrB5B,OAAO,EAAE2B,IAAI,CAACE,KAAK,EAAEC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;EACFrB,SAAS,CAACiB,EAAE,CAAC,QAAQ,EAAEC,IAAI,IAAI;IAC7B,IAAI,CAACf,IAAI,CAAC,QAAQ,EAAE;MAClBP,OAAO,EAAEsB,IAAI,CAACC,OAAO;MACrB5B,OAAO,EAAE2B,IAAI,CAACE,KAAK,EAAEC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;EACFrB,SAAS,CAACiB,EAAE,CAAC,SAAS,EAAEC,IAAI,IAAI;IAC9B,IAAI,CAACf,IAAI,CAAC,SAAS,EAAEe,IAAI,CAAC;EAC5B,CAAC,CAAC;EACFlB,SAAS,CAACiB,EAAE,CAAC,YAAY,EAAE,YAAY;IACrC,IAAI,CAACd,IAAI,CAAC,YAAY,CAAC;EACzB,CAAC,CAAC;EACFH,SAAS,CAACiB,EAAE,CAAC,OAAO,EAAEF,KAAK,IAAI,IAAI,CAACZ,IAAI,CAAC,OAAO,EAAEY,KAAK,CAAC,CAAC;AAC3D;AAEA,SAAShF,iBAAiB,IAAIuF,CAAC,EAAEzE,iBAAiB,IAAI0E,CAAC,EAAE7C,oBAAoB,IAAIrD,CAAC,EAAEuB,uBAAuB,IAAIsC,CAAC,EAAE/B,wBAAwB,IAAIqE,CAAC,EAAEpE,yBAAyB,IAAIqE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}