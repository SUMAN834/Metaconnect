{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst hash_1 = require(\"@ethersproject/hash\");\nconst adapters_1 = require(\"./adapters\");\nexports.eip712Types = {\n  Transaction: [{\n    name: 'txType',\n    type: 'uint256'\n  }, {\n    name: 'from',\n    type: 'uint256'\n  }, {\n    name: 'to',\n    type: 'uint256'\n  }, {\n    name: 'gasLimit',\n    type: 'uint256'\n  }, {\n    name: 'gasPerPubdataByteLimit',\n    type: 'uint256'\n  }, {\n    name: 'maxFeePerGas',\n    type: 'uint256'\n  }, {\n    name: 'maxPriorityFeePerGas',\n    type: 'uint256'\n  }, {\n    name: 'paymaster',\n    type: 'uint256'\n  }, {\n    name: 'nonce',\n    type: 'uint256'\n  }, {\n    name: 'value',\n    type: 'uint256'\n  }, {\n    name: 'data',\n    type: 'bytes'\n  }, {\n    name: 'factoryDeps',\n    type: 'bytes32[]'\n  }, {\n    name: 'paymasterInput',\n    type: 'bytes'\n  }]\n};\nclass EIP712Signer {\n  constructor(ethSigner, chainId) {\n    this.ethSigner = ethSigner;\n    this.eip712Domain = Promise.resolve(chainId).then(chainId => ({\n      name: 'zkSync',\n      version: '2',\n      chainId\n    }));\n  }\n  static getSignInput(transaction) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;\n    const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n    const signInput = {\n      txType: transaction.type,\n      from: transaction.from,\n      to: transaction.to,\n      gasLimit: transaction.gasLimit,\n      gasPerPubdataByteLimit: gasPerPubdataByteLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,\n      nonce: transaction.nonce,\n      value: transaction.value,\n      data: transaction.data,\n      factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map(dep => (0, utils_1.hashBytecode)(dep))) || [],\n      paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || '0x'\n    };\n    return signInput;\n  }\n  async sign(transaction) {\n    return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n  }\n  static getSignedDigest(transaction) {\n    if (!transaction.chainId) {\n      throw Error(\"Transaction chainId isn't set\");\n    }\n    const domain = {\n      name: 'zkSync',\n      version: '2',\n      chainId: transaction.chainId\n    };\n    return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n  }\n}\nexports.EIP712Signer = EIP712Signer;\n// This class is to be used on the frontend, with metamask injection.\n// It only contains L2 operations. For L1 operations, see L1Signer.\n// Sample usage:\n// const provider = new zkweb3.Web3Provider(window.ethereum);\n// const signer = provider.getSigner();\n// const tx = await signer.sendTransaction({ ... });\nclass Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {\n  _signerL2() {\n    return this;\n  }\n  _providerL2() {\n    return this.provider;\n  }\n  static from(signer) {\n    const newSigner = Object.setPrototypeOf(signer, Signer.prototype);\n    // @ts-ignore\n    newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());\n    return newSigner;\n  }\n  // an alias with a better name\n  async getNonce(blockTag) {\n    return await this.getTransactionCount(blockTag);\n  }\n  async sendTransaction(transaction) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (transaction.customData == null && transaction.type == null) {\n      // use legacy txs by default\n      transaction.type = 0;\n    }\n    if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n      return await super.sendTransaction(transaction);\n    } else {\n      const address = await this.getAddress();\n      (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = address;\n      if (transaction.from.toLowerCase() != address.toLowerCase()) {\n        throw new Error('Transaction `from` address mismatch');\n      }\n      transaction.type = utils_1.EIP712_TX_TYPE;\n      (_b = transaction.value) !== null && _b !== void 0 ? _b : transaction.value = 0;\n      (_c = transaction.data) !== null && _c !== void 0 ? _c : transaction.data = '0x';\n      (_d = transaction.nonce) !== null && _d !== void 0 ? _d : transaction.nonce = await this.getNonce();\n      transaction.customData = this._fillCustomData(transaction.customData);\n      (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : transaction.gasPrice = await this.provider.getGasPrice();\n      (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : transaction.gasLimit = await this.provider.estimateGas(transaction);\n      (_g = transaction.chainId) !== null && _g !== void 0 ? _g : transaction.chainId = (await this.provider.getNetwork()).chainId;\n      transaction.customData.customSignature = await this.eip712.sign(transaction);\n      const txBytes = (0, utils_1.serialize)(transaction);\n      return await this.provider.sendTransaction(txBytes);\n    }\n  }\n}\nexports.Signer = Signer;\n// This class is to be used on the frontend with metamask injection.\n// It only contains L1 operations. For L2 operations, see Signer.\n// Sample usage:\n// const provider = new ethers.Web3Provider(window.ethereum);\n// const zksyncProvider = new zkweb3.Provider('<rpc_url>');\n// const signer = zkweb3.L1Signer.from(provider.getSigner(), zksyncProvider);\n// const tx = await signer.deposit({ ... });\nclass L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {\n  _providerL2() {\n    return this.providerL2;\n  }\n  _providerL1() {\n    return this.provider;\n  }\n  _signerL1() {\n    return this;\n  }\n  static from(signer, zksyncProvider) {\n    const newSigner = Object.setPrototypeOf(signer, L1Signer.prototype);\n    newSigner.providerL2 = zksyncProvider;\n    return newSigner;\n  }\n  connectToL2(provider) {\n    this.providerL2 = provider;\n    return this;\n  }\n}\nexports.L1Signer = L1Signer;","map":{"version":3,"names":["Object","defineProperty","exports","value","L1Signer","Signer","EIP712Signer","eip712Types","ethers_1","require","utils_1","hash_1","adapters_1","Transaction","name","type","constructor","ethSigner","chainId","eip712Domain","Promise","resolve","then","version","getSignInput","transaction","_a","_b","_c","_d","_e","_f","_g","maxFeePerGas","gasPrice","maxPriorityFeePerGas","gasPerPubdataByteLimit","customData","gasPerPubdata","DEFAULT_GAS_PER_PUBDATA_LIMIT","signInput","txType","from","to","gasLimit","paymaster","paymasterParams","ethers","constants","AddressZero","nonce","data","factoryDeps","map","dep","hashBytecode","paymasterInput","sign","_signTypedData","getSignedDigest","Error","domain","_TypedDataEncoder","hash","AdapterL2","providers","JsonRpcSigner","_signerL2","_providerL2","provider","signer","newSigner","setPrototypeOf","prototype","eip712","getChainId","getNonce","blockTag","getTransactionCount","sendTransaction","EIP712_TX_TYPE","address","getAddress","toLowerCase","_fillCustomData","getGasPrice","estimateGas","getNetwork","customSignature","txBytes","serialize","AdapterL1","providerL2","_providerL1","_signerL1","zksyncProvider","connectToL2"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/zksync-web3/build/src/signer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst hash_1 = require(\"@ethersproject/hash\");\nconst adapters_1 = require(\"./adapters\");\nexports.eip712Types = {\n    Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' }\n    ]\n};\nclass EIP712Signer {\n    constructor(ethSigner, chainId) {\n        this.ethSigner = ethSigner;\n        this.eip712Domain = Promise.resolve(chainId).then((chainId) => ({\n            name: 'zkSync',\n            version: '2',\n            chainId\n        }));\n    }\n    static getSignInput(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;\n        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n        const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n        const signInput = {\n            txType: transaction.type,\n            from: transaction.from,\n            to: transaction.to,\n            gasLimit: transaction.gasLimit,\n            gasPerPubdataByteLimit: gasPerPubdataByteLimit,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,\n            nonce: transaction.nonce,\n            value: transaction.value,\n            data: transaction.data,\n            factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map((dep) => (0, utils_1.hashBytecode)(dep))) || [],\n            paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || '0x'\n        };\n        return signInput;\n    }\n    async sign(transaction) {\n        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n    static getSignedDigest(transaction) {\n        if (!transaction.chainId) {\n            throw Error(\"Transaction chainId isn't set\");\n        }\n        const domain = {\n            name: 'zkSync',\n            version: '2',\n            chainId: transaction.chainId\n        };\n        return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n}\nexports.EIP712Signer = EIP712Signer;\n// This class is to be used on the frontend, with metamask injection.\n// It only contains L2 operations. For L1 operations, see L1Signer.\n// Sample usage:\n// const provider = new zkweb3.Web3Provider(window.ethereum);\n// const signer = provider.getSigner();\n// const tx = await signer.sendTransaction({ ... });\nclass Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _signerL2() {\n        return this;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    static from(signer) {\n        const newSigner = Object.setPrototypeOf(signer, Signer.prototype);\n        // @ts-ignore\n        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());\n        return newSigner;\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    async sendTransaction(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (transaction.customData == null && transaction.type == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return (await super.sendTransaction(transaction));\n        }\n        else {\n            const address = await this.getAddress();\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = address);\n            if (transaction.from.toLowerCase() != address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.type = utils_1.EIP712_TX_TYPE;\n            (_b = transaction.value) !== null && _b !== void 0 ? _b : (transaction.value = 0);\n            (_c = transaction.data) !== null && _c !== void 0 ? _c : (transaction.data = '0x');\n            (_d = transaction.nonce) !== null && _d !== void 0 ? _d : (transaction.nonce = await this.getNonce());\n            transaction.customData = this._fillCustomData(transaction.customData);\n            (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : (transaction.gasPrice = await this.provider.getGasPrice());\n            (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : (transaction.gasLimit = await this.provider.estimateGas(transaction));\n            (_g = transaction.chainId) !== null && _g !== void 0 ? _g : (transaction.chainId = (await this.provider.getNetwork()).chainId);\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            const txBytes = (0, utils_1.serialize)(transaction);\n            return await this.provider.sendTransaction(txBytes);\n        }\n    }\n}\nexports.Signer = Signer;\n// This class is to be used on the frontend with metamask injection.\n// It only contains L1 operations. For L2 operations, see Signer.\n// Sample usage:\n// const provider = new ethers.Web3Provider(window.ethereum);\n// const zksyncProvider = new zkweb3.Provider('<rpc_url>');\n// const signer = zkweb3.L1Signer.from(provider.getSigner(), zksyncProvider);\n// const tx = await signer.deposit({ ... });\nclass L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _providerL2() {\n        return this.providerL2;\n    }\n    _providerL1() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this;\n    }\n    static from(signer, zksyncProvider) {\n        const newSigner = Object.setPrototypeOf(signer, L1Signer.prototype);\n        newSigner.providerL2 = zksyncProvider;\n        return newSigner;\n    }\n    connectToL2(provider) {\n        this.providerL2 = provider;\n        return this;\n    }\n}\nexports.L1Signer = L1Signer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}