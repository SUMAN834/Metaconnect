{"ast":null,"code":"import { BigNumber, utils, constants } from 'ethers';\nimport { eC as FEATURE_PACK_VRF, e9 as ContractWrapper, af as ContractEvents, eb as buildTransactionFunction, ak as Transaction, f as fetchCurrencyMetadata, bW as resolveAddress, c8 as LINK_TOKEN_ADDRESS, R as Erc20, eD as PACK_CONTRACT_ROLES, bm as assertEnabled, cG as AbiSchema, z as ContractMetadata, dL as PackContractSchema, aq as ContractAppURI, A as ContractRoles, B as ContractRoyalty, y as ContractEncoder, ae as GasCostEstimator, ag as ContractInterceptor, aj as ContractOwner, aS as getRoleHash, n as normalizePriceValue, eo as isTokenApprovedForTransfer, bn as detectContractFeature, eA as uploadOrExtractURI } from './smart-contract-40473f5e.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-67c22215.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-29044916.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { c as PackRewardsOutputSchema, d as PackMetadataInputSchema } from './pack-588a5211.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/chains';\nimport 'bn.js';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'uuid';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nclass PackVRF {\n  featureName = FEATURE_PACK_VRF.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks Open a pack using Chainlink VRFs random number generation\n   * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns the balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  static contractRoles = PACK_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), PackRewardsOutputSchema.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage), PackMetadataInputSchema.parseAsync(metadataWithRewards), resolveAddress(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\nexport { Pack };","map":{"version":3,"names":["BigNumber","utils","constants","eC","FEATURE_PACK_VRF","e9","ContractWrapper","af","ContractEvents","eb","buildTransactionFunction","ak","Transaction","f","fetchCurrencyMetadata","bW","resolveAddress","c8","LINK_TOKEN_ADDRESS","R","Erc20","eD","PACK_CONTRACT_ROLES","bm","assertEnabled","cG","AbiSchema","z","ContractMetadata","dL","PackContractSchema","aq","ContractAppURI","A","ContractRoles","B","ContractRoyalty","y","ContractEncoder","ae","GasCostEstimator","ag","ContractInterceptor","aj","ContractOwner","aS","getRoleHash","n","normalizePriceValue","eo","isTokenApprovedForTransfer","bn","detectContractFeature","eA","uploadOrExtractURI","h","hasERC20Allowance","S","StandardErc1155","ERC20Abi","IPackVRFAbi","c","PackRewardsOutputSchema","d","PackMetadataInputSchema","PackVRF","featureName","name","constructor","network","address","storage","options","chainId","contractWrapper","arguments","length","undefined","events","onNetworkUpdated","updateSignerOrProvider","getAddress","open","_this","tokenId","amount","gasLimit","fromContractWrapper","method","args","overrides","parse","receipt","id","from","event","parseLogs","logs","requestId","e","claimRewards","_this2","Error","rewards","rewardUnitsDistributed","parseRewards","erc20Rewards","erc721Rewards","erc1155Rewards","reward","tokenType","tokenMetadata","getProvider","assetContract","push","contractAddress","quantityPerReward","formatUnits","totalAmount","decimals","toString","addPackOpenEventListener","callback","addEventListener","data","packId","opener","canClaimRewards","claimerAddress","getSignerAddress","read","openAndClaim","sendTransaction","getLinkBalance","getLinkContract","balanceOf","transferLink","transfer","linkAddress","contract","getSignerOrProvider","Pack","contractRoles","vrf","_vrf","abi","gasless","openzeppelin","useEOAForwarder","metadata","app","roles","royalties","encoder","estimator","interceptor","owner","detectVrf","get","erc1155","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","anyoneCanTransfer","AddressZero","getPackContents","contents","perUnitAmounts","i","totalRewards","div","create","metadataWithRewards","signerAddress","createTo","prepare","addPackContents","packContents","parsedContents","Promise","all","parseAsync","numOfRewardUnits","toPackContentArgs","to","uri","parsedMetadata","toAddress","packMetadata","rewardsData","openStartTime","rewardsPerPack","provider","erc20","normalizedQuantity","totalQuantity","mul","hasAllowance","erc721","isApproved","call","functionName"],"sources":["C:/Users/SUMAN K/meta_transfer/node_modules/@thirdweb-dev/sdk/dist/pack-bad2ef51.browser.esm.js"],"sourcesContent":["import { BigNumber, utils, constants } from 'ethers';\nimport { eC as FEATURE_PACK_VRF, e9 as ContractWrapper, af as ContractEvents, eb as buildTransactionFunction, ak as Transaction, f as fetchCurrencyMetadata, bW as resolveAddress, c8 as LINK_TOKEN_ADDRESS, R as Erc20, eD as PACK_CONTRACT_ROLES, bm as assertEnabled, cG as AbiSchema, z as ContractMetadata, dL as PackContractSchema, aq as ContractAppURI, A as ContractRoles, B as ContractRoyalty, y as ContractEncoder, ae as GasCostEstimator, ag as ContractInterceptor, aj as ContractOwner, aS as getRoleHash, n as normalizePriceValue, eo as isTokenApprovedForTransfer, bn as detectContractFeature, eA as uploadOrExtractURI } from './smart-contract-40473f5e.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-67c22215.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-29044916.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { c as PackRewardsOutputSchema, d as PackMetadataInputSchema } from './pack-588a5211.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/chains';\nimport 'bn.js';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'uuid';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\n\nclass PackVRF {\n  featureName = FEATURE_PACK_VRF.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks Open a pack using Chainlink VRFs random number generation\n   * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns the balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  static contractRoles = PACK_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), PackRewardsOutputSchema.parseAsync(packContents)]);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n    const [uri, parsedMetadata, toAddress] = await Promise.all([uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage), PackMetadataInputSchema.parseAsync(metadataWithRewards), resolveAddress(to)]);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\nexport { Pack };\n"],"mappings":"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,CAAC;UACJ;YACElE,aAAa,CAACO,IAAI,CAAC;cACjBC,eAAe,EAAEN,MAAM,CAACI,aAAa;cACrC7B,OAAO,EAAEyB,MAAM,CAACzB,OAAO,CAACoC,QAAQ,CAAC;YACnC,CAAC,CAAC;YACF;UACF;QACF,KAAK,CAAC;UACJ;YACEZ,cAAc,CAACM,IAAI,CAAC;cAClBC,eAAe,EAAEN,MAAM,CAACI,aAAa;cACrC7B,OAAO,EAAEyB,MAAM,CAACzB,OAAO,CAACoC,QAAQ,CAAC,CAAC;cAClCJ,iBAAiB,EAAE/B,MAAM,CAACmC,QAAQ,CAAC,CAAC;cACpCqD,YAAY,EAAE7K,SAAS,CAAC8F,IAAI,CAACe,MAAM,CAACS,WAAW,CAAC,CAACwD,GAAG,CAACzF,MAAM,CAAC,CAACmC,QAAQ,CAAC;YACxE,CAAC,CAAC;YACF;UACF;MACJ;IACF;IACA,OAAO;MACLd,YAAY;MACZC,aAAa;MACbC;IACF,CAAC;EACH;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmE,MAAM,GAAG,eAAerK,wBAAwB,CAAC,MAAMsK,mBAAmB,IAAI;IAC5E,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACvG,eAAe,CAACuD,gBAAgB,CAAC,CAAC;IACnE,OAAO,IAAI,CAACiD,QAAQ,CAACC,OAAO,CAACF,aAAa,EAAED,mBAAmB,CAAC;EAClE,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,eAAe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"},"metadata":{},"sourceType":"module","externalDependencies":[]}